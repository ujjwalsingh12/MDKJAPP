

--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/create.py ---
import os

def read_selected_files():
    output_file = "console.txt"
    current_dir = os.getcwd()
    valid_extensions = {'.css', '.js','.jsx','.json', '.py'}

    with open(output_file, 'w', encoding='utf-8') as out_f:
        for foldername, subfolders, filenames in os.walk(current_dir):
            for filename in filenames:
                filepath = os.path.join(foldername, filename)

                # Skip the output file itself
                if os.path.abspath(filepath) == os.path.abspath(output_file):
                    continue

                # Check file extension
                _, ext = os.path.splitext(filename)
                if ext.lower() not in valid_extensions:
                    continue

                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        out_f.write(f"\n\n--- START OF FILE: {filepath} ---\n")
                        out_f.write(f.read())
                        out_f.write(f"\n--- END OF FILE: {filepath} ---\n")
                except Exception as e:
                    print(f"Skipping file {filepath}: {e}")

if __name__ == '__main__':
    read_selected_files()
    print("Done. All .css, .js, and .py files written to 'console.txt'.")
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/create.py ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/vite.config.js ---
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173
  }
});
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/vite.config.js ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/package.json ---
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.6.7",
    "bootstrap": "^5.3.3",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^6.23.0",
    "react-toastify": "^9.1.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.4.1",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "vite": "^6.3.5"
  }
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/package.json ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/eslint.config.js ---
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/eslint.config.js ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/DarkModeContext.jsx ---
import React, { createContext, useState, useEffect } from 'react';

// Create the context
export const DarkModeContext = createContext();

// Create the provider component
export const DarkModeProvider = ({ children }) => {
    const [darkMode, setDarkMode] = useState(false);

    // Load dark mode preference from localStorage on mount
    useEffect(() => {
        const savedMode = localStorage.getItem('darkMode') === 'true';
        setDarkMode(savedMode);
        document.body.classList.toggle('dark-mode', savedMode);
        document.body.classList.toggle('bg-dark', savedMode);
        document.body.classList.toggle('text-white', savedMode);
    }, []);

    // Toggle dark mode and save preference to localStorage
    const toggleDarkMode = () => {
        const newMode = !darkMode;
        setDarkMode(newMode);
        localStorage.setItem('darkMode', newMode);
        document.body.classList.toggle('dark-mode', newMode);
        document.body.classList.toggle('bg-dark', newMode);
        document.body.classList.toggle('text-white', newMode);
    };

    return (
        <DarkModeContext.Provider value={{ darkMode, toggleDarkMode }}>
            {children}
        </DarkModeContext.Provider>
    );
};
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/DarkModeContext.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/routes.jsx ---
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Dashboard from './pages/Dashboard';
import AddEntry from './pages/AddEntry';
import ViewRecords from './pages/ViewRecords';
import NavBar from './components/NavBar';
import EntryDashboard from './pages/EntryDashboard';

import React, { useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS
import Header from './components/Header';
import Sidebar from './components/Sidebar';
import Dashboardx from './components/Dashboardx';
import Sales from './components/Sales';
import Bills from './components/Bills';
import Receipt from './components/CreateBill';
import UnifiedEntryForm from './components/UnifiedEntryForm';
// import ExcelInterface from './components/ExcelInterface';
import ReceiptPage from './components/ReceiptPage';
import Accounts from './pages/Accounts';
import ViewTables from './components/ViewTables';
import Stock from './pages/Stock';
import Journal from './pages/Journal';
import Bill from './pages/Bill';
import CreateBill from './components/CreateBill';


const AppRoutes = () => (
    <Router>

        {/* <Header /> */}
        <NavBar />
        <Routes>
            <Route path="/" element={<Dashboard />} />
            <Route path="/UnifiedEntryForm" element={<UnifiedEntryForm />} />
            <Route path="/add" element={<AddEntry />} />
            <Route path="view/stock" element={<Stock />} />
            <Route path="view/bill" element={<Bill />} />
            <Route path="view/journal" element={<Journal />} />
            <Route path="/sales" element={<Sales />} />
            <Route path="/stock" element={<Stock />} />
            <Route path="/bills" element={<Bills />} />
            <Route path="/create-bill" element={<CreateBill />} />
            <Route path="/receipt-page" element={<ReceiptPage />} />
            <Route path="/entry-dashboard" element={<EntryDashboard />} />
            <Route path="/accounts" element={<Accounts />} />
            <Route path="/view-tables" element={<ViewTables />} />
        </Routes>
    </Router>
);


export default AppRoutes;




--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/routes.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/App.css ---
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/App.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/index.css ---
html,
body,
#root {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
}

body {
  background-color: var(--bg-color);
  color: var(--text-color);
  display: flex;
  flex-direction: column;
}

body.dark-mode {
  background-color: #121212;
  color: #ffffff;
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/index.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/main.jsx ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import AppRoutes from './routes';
import { DarkModeProvider } from './DarkModeContext'; // Import the provider

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <DarkModeProvider>
      <AppRoutes />
    </DarkModeProvider>
  </React.StrictMode>
);
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/main.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/App.jsx ---
import { useState } from 'react';
import reactLogo from './assets/react.svg';
import viteLogo from '/vite.svg';
import './App.css';

function App() {
  const [count, setCount] = useState(0);

  return (
    <div className="container text-center">
      <div className="row justify-content-center my-4">
        <div className="col-6 col-md-3">
          <a href="https://vite.dev" target="_blank">
            <img src={viteLogo} className="img-fluid logo" alt="Vite logo" />
          </a>
        </div>
        <div className="col-6 col-md-3">
          <a href="https://react.dev" target="_blank">
            <img src={reactLogo} className="img-fluid logo react" alt="React logo" />
          </a>
        </div>
      </div>
      <h1>Vite + React</h1>
      <div className="card p-3 my-3">
        <button
          className="btn btn-primary"
          onClick={() => setCount((count) => count + 1)}
        >
          Count is {count}
        </button>
        <p className="mt-3">
          Edit <code>src/App.jsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </div>
  );
}

export default App;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/App.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Header.jsx ---
import React from 'react';

const Header = () => {
  return (
    <div className="header bg-primary text-white p-4">
      <h1>MDKJ Enterprise Dashboard</h1>
    </div>
  );
};

export default Header;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Header.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/PrintPreview.jsx ---
import React, { forwardRef } from 'react';
import convertToWords from './utils.js';
const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
    marginTop: '20px',
};

const thStyle = {
    border: '1px solid #ddd',
    padding: '8px',
    backgroundColor: '#f5f5f5',
    textAlign: 'left',
    fontWeight: 'bold',
};

const tdStyle = {
    border: '1px solid #ddd',
    padding: '8px',
    textAlign: 'left',
};

const PrintPreview = forwardRef(({
    billHeader,
    items,
    calculations,
    storeInfo,
}, ref) => (
    <div ref={ref} style={{ padding: '40px', backgroundColor: '#fff', color: '#333', fontFamily: 'Segoe UI', boxShadow: '0 0 10px rgba(0,0,0,0.1)', maxWidth: '900px', margin: 'auto' }}>
        {/* Header */}
        <div style={{ textAlign: 'center', marginBottom: '40px', borderBottom: '2px solid #333', paddingBottom: '20px' }}>
            <p style={{ margin: '0 0 10px' }}>{storeInfo.pagetype}</p>
            <h1 style={{ fontSize: '36px', margin: '0 0 15px' }}>{storeInfo.storeName}</h1>
            <div style={{ color: '#666', lineHeight: '1.4' }}>
                {storeInfo.storeAddress.split('\n').map((line, i) => (
                    <p key={i} style={{ margin: '5px 0' }}>{line}</p>
                ))}
            </div>
            <p style={{ color: '#666', marginTop: '10px' }}>
                Phone: {storeInfo.phone} | Email: {storeInfo.email}
            </p>
        </div>

        {/* Customer Info */}
        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '30px' }}>
            <div>
                <h3 style={{ margin: '0 0 10px' }}>Bill To:</h3>
                <p style={{ margin: '5px 0', fontSize: '16px' }}>
                    <strong>{billHeader.customerName || 'Customer Name'}</strong>
                </p>
                {billHeader.customerPhone && <p style={{ margin: '5px 0' }}>Phone: {billHeader.customerPhone}</p>}
                {billHeader.customerAddress && <p style={{ margin: '5px 0', whiteSpace: 'pre-line' }}>{billHeader.customerAddress}</p>}
                {billHeader.customerEmail && <p style={{ margin: '5px 0' }}>Email: {billHeader.customerEmail}</p>}
            </div>
            <div style={{ textAlign: 'right' }}>
                <p style={{ margin: '5px 0' }}><strong>Bill #:</strong> {billHeader.billNumber}</p>
                <p style={{ margin: '5px 0' }}><strong>Date:</strong> {billHeader.date}</p>
            </div>
        </div>

        {/* Items Table */}
        <div>
            <h3 style={{ marginBottom: '16px', color: '#444' }}>Items</h3>
            <table style={tableStyle}>
                <thead>
                    <tr>
                        <th style={thStyle}>S.No</th>
                        <th style={thStyle}>Description</th>
                        <th style={thStyle}>HSN/SAC</th>
                        <th style={thStyle}>Purity</th>
                        <th style={thStyle}>Weight (gms)</th>
                        <th style={thStyle}>Rate (₹)</th>
                        <th style={thStyle}>Amount (₹)</th>
                    </tr>
                </thead>
                <tbody>
                    {items.map((item, index) => (
                        <tr key={item.id || index}>
                            <td style={tdStyle}>{index + 1}</td>
                            <td style={tdStyle}>{item.description}</td>
                            <td style={tdStyle}>{item.hsnSac}</td>
                            <td style={tdStyle}>{item.purity}</td>
                            <td style={tdStyle}>{item.weight.toFixed(3)}</td>
                            <td style={tdStyle}>{item.rate.toFixed(2)}</td>
                            <td style={tdStyle}>{item.amount.toFixed(2)}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>

        {/* Tax Summary */}
        <div style={{ marginTop: '30px' }}>
            <h3 style={{ marginBottom: '16px', color: '#444' }}>Tax Summary</h3>
            <table style={tableStyle}>
                <tbody>
                    <tr>
                        <td style={tdStyle}>Total Taxable</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>₹{calculations.totalTaxable}</td>
                    </tr>
                    <tr>
                        <td style={tdStyle}>CGST ({calculations.cgstRate}%)</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>₹{calculations.cgstAmount}</td>
                    </tr>
                    <tr>
                        <td style={tdStyle}>SGST ({calculations.sgstRate}%)</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>₹{calculations.sgstAmount}</td>
                    </tr>
                    <tr>
                        <td style={tdStyle}>IGST ({calculations.igstRate}%)</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>₹{calculations.igstAmount}</td>
                    </tr>
                    <tr>
                        <td style={tdStyle}>Hallmarking Charges</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>₹{calculations.hallmarkingTotal}</td>
                    </tr>
                    <tr>
                        <td style={tdStyle}>Discount</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>-₹{calculations.discount}</td>
                    </tr>
                    <tr>
                        <td style={tdStyle}>Round Off</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>{calculations.roundOff >= 0 ? '+' : ''}₹{calculations.roundOff}</td>
                    </tr>
                    <tr>
                        <td style={{ ...tdStyle, fontWeight: 'bold' }}>Grand Total</td>
                        <td style={{ ...tdStyle, textAlign: 'right', fontWeight: 'bold' }}>₹{calculations.grandTotal}</td>
                    </tr>
                </tbody>
            </table>
        </div>

        {/* Footer */}
        <div style={{ textAlign: 'center', marginTop: '30px', fontSize: '14px', color: '#666' }}>
            <p>Amount in Words: <strong>{convertToWords(calculations.grandTotal)}</strong></p>
            <p>Thank you for your business!</p>
        </div>
    </div>
));

export default PrintPreview;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/PrintPreview.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/BillPreview.jsx ---
import React from 'react';
import ItemsTable from './ItemsTable.jsx';
import TaxSummary from './TaxSummary.jsx';
import convertToWords from './utils.js';


const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
    marginTop: '30px',
};

const thStyle = {
    padding: '10px',
    border: '1px solid #ddd',
    fontWeight: 'bold',
    textAlign: 'left',
    fontSize: '14px',
};

const tdStyle = {
    padding: '10px',
    border: '1px solid #ddd',
    fontSize: '14px',
};

const BillPreview = ({ items, setItems, total, selectedRowIndex, setSelectedRowIndex, calculations, cgstRate, sgstRate, igstRate, hallmarkingCharges, hallmarkingPieces, hallmarkingCgst, hallmarkingSgst, discount, storeInfo, billHeader, onTotalChange, onChange, onAdd, onDelete, onEditClick, onKeyDown, onCgstChange, onSgstChange, onIgstChange, onHallmarkingCgstChange, onHallmarkingSgstChange, onHallmarkingChange, onPiecesChange, onDiscountChange }) => {
    return (
        <div style={{ padding: '40px', backgroundColor: '#fff', color: '#333', fontFamily: 'Segoe UI', boxShadow: '0 0 10px rgba(0,0,0,0.1)', maxWidth: '900px', margin: 'auto' }}>
            {/* Header */}
            <div style={{ textAlign: 'center', marginBottom: '40px', borderBottom: '2px solid #333', paddingBottom: '20px' }}>
                <p style={{ margin: '0 0 10px' }}>{storeInfo.pagetype}</p>
                <h1 style={{ fontSize: '36px', margin: '0 0 15px' }}>{storeInfo.storeName}</h1>
                <div style={{ color: '#666', lineHeight: '1.4' }}>
                    {storeInfo.storeAddress.split('\n').map((line, i) => (
                        <p key={i} style={{ margin: '5px 0' }}>{line}</p>
                    ))}
                </div>
                <p style={{ color: '#666', marginTop: '10px' }}>
                    Phone: {storeInfo.phone} | Email: {storeInfo.email}
                </p>
            </div>

            {/* Customer Info */}
            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '30px' }}>
                <div>
                    <h3 style={{ margin: '0 0 10px' }}>Bill To:</h3>
                    <p style={{ margin: '5px 0', fontSize: '16px' }}>
                        <strong>{billHeader.customerName || 'Customer Name'}</strong>
                    </p>
                    {billHeader.customerPhone && <p style={{ margin: '5px 0' }}>Phone: {billHeader.customerPhone}</p>}
                    {billHeader.customerAddress && <p style={{ margin: '5px 0', whiteSpace: 'pre-line' }}>{billHeader.customerAddress}</p>}
                    {billHeader.customerEmail && <p style={{ margin: '5px 0' }}>Email: {billHeader.customerEmail}</p>}
                </div>
                <div style={{ textAlign: 'right' }}>
                    <p style={{ margin: '5px 0' }}><strong>Bill #:</strong> {billHeader.billNumber}</p>
                    <p style={{ margin: '5px 0' }}><strong>Date:</strong> {billHeader.date}</p>
                </div>
            </div>

            <ItemsTable
                items={items}
                setItems={setItems}
                total={total}
                onTotalChange={onTotalChange}
                selectedRowIndex={selectedRowIndex}
                onChange={onChange}
                onAdd={onAdd}
                onDelete={onDelete}
                onEditClick={onEditClick}
                onKeyDown={onKeyDown}
                setSelectedRowIndex={setSelectedRowIndex}
            />

            <TaxSummary
                calculations={calculations}
                cgstRate={cgstRate}
                sgstRate={sgstRate}
                igstRate={igstRate}
                hallmarkingCharges={hallmarkingCharges}
                hallmarkingPieces={hallmarkingPieces}
                hallmarkingCgst={hallmarkingCgst}
                hallmarkingSgst={hallmarkingSgst}
                discount={discount}
                onCgstChange={onCgstChange}
                onSgstChange={onSgstChange}
                onIgstChange={onIgstChange}
                onHallmarkingCgstChange={onHallmarkingCgstChange}
                onHallmarkingSgstChange={onHallmarkingSgstChange}
                onHallmarkingChange={onHallmarkingChange}
                onPiecesChange={onPiecesChange}
                onDiscountChange={onDiscountChange}
            />

            <div style={{ marginTop: '30px', padding: '15px', backgroundColor: '#f9f9f9', border: '1px solid #ddd', borderRadius: '4px' }}>
                <strong>Amount in word(s):</strong><br />
                <span style={{ fontSize: '16px', fontWeight: 'bold', color: '#333' }}>
                    {convertToWords(calculations.grandTotal || 0)}
                </span>
            </div>


            {/* Thank you message */}
            <div style={{ textAlign: 'center', marginTop: '40px', color: '#666' }}>
                <p style={{ margin: 0, fontSize: '16px' }}>Thank you for choosing MDKJ Jewellers!</p>
            </div>
        </div>

    );
};

export default BillPreview;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/BillPreview.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/DataTable.jsx ---
export default function DataTable({ data }) {
    if (!data.length) return <p>No data found.</p>;

    const keys = Object.keys(data[0]);

    return (
        <table border="1" cellPadding="5" style={{ width: '100%', marginTop: '1em' }}>
            <thead>
                <tr>{keys.map(key => <th key={key}>{key}</th>)}</tr>
            </thead>
            <tbody>
                {data.map((row, idx) => (
                    <tr key={idx}>
                        {keys.map(key => <td key={key}>{row[key]}</td>)}
                    </tr>
                ))}
            </tbody>
        </table>
    );
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/DataTable.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/UnifiedEntryForm.css ---
/* General container styles */
div {
    margin: 10px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    /* background-color: #f9f9f9; */
}

/* Dark mode container styles */
body.bg-dark div {
    background-color: #333;
    border-color: #555;
    color: #fff;
}

/* Form heading */
h2 {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 20px;
    text-align: center;
}

/* Dark mode heading */
body.bg-dark h2 {
    color: #fff;
}

/* Form styles */
form {
    /* display: flex; */
    flex-direction: column;
    gap: 15px;
}

/* Input fields */
input {
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 5px;
    width: 100%;
    box-sizing: border-box;
    background-color: #fff;
    color: #000;
}

/* Dark mode input fields */
body.bg-dark input {
    background-color: #444;
    border-color: #666;
    color: #fff;
}

/* Select dropdown */
select {
    padding: 10px;
    font-size: 16px;
    /* border: 1px solid #ccc; */
    /* border-radius: 5px; */
    width: 100%;
    box-sizing: border-box;
    /* background-color: #fff; */
    /* color: #000; */
}

/* Dark mode select dropdown */
body.bg-dark select {
    background-color: #444;
    border-color: #666;
    color: #fff;
}

/* Checkbox label */
label {
    font-size: 16px;
    /* display: flex; */
    align-items: center;
    gap: 10px;
}

/* Dark mode checkbox label */
body.bg-dark label {
    color: #fff;
}

/* Submit button */
button {
    padding: 10px 20px;
    font-size: 16px;
    font-weight: bold;
    color: #fff;
    background-color: #007bff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #0056b3;
}

/* Dark mode submit button */
body.bg-dark button {
    background-color: #0056b3;
}

body.bg-dark button:hover {
    background-color: #003f7f;
}

/* Error or success messages */
.alert {
    padding: 10px;
    margin-top: 10px;
    border-radius: 5px;
    font-size: 14px;
}

.alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

/* Dark mode alerts */
body.bg-dark .alert-success {
    background-color: #2d4d2d;
    color: #a3d9a3;
    border-color: #3e6e3e;
}

body.bg-dark .alert-danger {
    background-color: #4d2d2d;
    color: #d9a3a3;
    border-color: #6e3e3e;
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/UnifiedEntryForm.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ReceiptPage.jsx ---
import React, { useState, useMemo, useRef } from 'react';
import ReactDOMServer from 'react-dom/server';
import BillHeaderForm from './BillHeaderForm';
import ItemsTable from './ItemsTable';
import TaxSummary from './TaxSummary';
import PrintPreview from './PrintPreview';
// import { calculateTotals } from './utils';
import { containerStyle } from './styles';
// import { useReactToPrint } from 'react-to-print';
import BillPreview from './BillPreview';



function calculateTotals({
    items,
    cgstRate,
    sgstRate,
    igstRate,
    hallmarkingCharges,
    hallmarkingPieces,
    hallmarkingCgst,
    hallmarkingSgst,
    discount
}) {
    const totalAmount = items.reduce((sum, item) => sum + (Number(item.amount) || 0), 0);
    const totalTaxable = totalAmount;
    const cgstAmount = (cgstRate / 100) * totalAmount;
    const sgstAmount = (sgstRate / 100) * totalAmount;
    const igstAmount = (igstRate / 100) * totalAmount;

    const hallmarkingTotal = hallmarkingCharges * hallmarkingPieces;
    const hallmarkingCgstAmt = (hallmarkingCgst / 100) * hallmarkingTotal;
    const hallmarkingSgstAmt = (hallmarkingSgst / 100) * hallmarkingTotal;

    const grandTotal =
        totalAmount +
        cgstAmount +
        sgstAmount +
        igstAmount +
        hallmarkingTotal +
        hallmarkingCgstAmt +
        hallmarkingSgstAmt -
        discount;

    return {
        totalTaxable,
        totalAmount,
        cgstAmount,
        sgstAmount,
        igstAmount,
        hallmarkingTotal,
        hallmarkingCgstAmt,
        hallmarkingSgstAmt,
        grandTotal
    };
}


// Dummy customer data for autocomplete (move to a shared file if needed)
const dummyCustomers = [
    {
        id: 1,
        name: 'Rajesh Kumar',
        phone: '+91 98765 43210',
        address: '123 MG Road\nKanpur, UP 208001',
        email: 'rajesh.kumar@email.com'
    },
    {
        id: 2,
        name: 'Priya Sharma',
        phone: '+91 87654 32109',
        address: '456 Civil Lines\nKanpur, UP 208002',
        email: 'priya.sharma@email.com'
    },
    {
        id: 3,
        name: 'Amit Gupta',
        phone: '+91 76543 21098',
        address: '789 Swaroop Nagar\nKanpur, UP 208003',
        email: 'amit.gupta@email.com'
    },
    {
        id: 4,
        name: 'Sunita Verma',
        phone: '+91 65432 10987',
        address: '321 Kalyanpur\nKanpur, UP 208004',
        email: 'sunita.verma@email.com'
    },
    {
        id: 5,
        name: 'Vikram Singh',
        phone: '+91 54321 09876',
        address: '654 Govind Nagar\nKanpur, UP 208005',
        email: 'vikram.singh@email.com'
    }
];


const defaultItem = () => ({
    id: Date.now(),
    description: 'New Gold Ornaments',
    hsnSac: '7113',
    purity: '18 CT',
    weight: 0,
    rate: 7200.00,
    amount: 0,
    isEditing: false
});

const ReceiptPage = () => {
    // --- Bill Header State ---
    const [billHeader, setBillHeader] = useState({
        customerName: '',
        customerPhone: '',
        customerAddress: '',
        customerEmail: '',
        billNumber: 'BILL-' + Date.now().toString().slice(-6),
        date: new Date().toISOString().slice(0, 10)
    });

    // --- Customer Autocomplete State ---
    const [customerSearchTerm, setCustomerSearchTerm] = useState('');
    const [showCustomerDropdown, setShowCustomerDropdown] = useState(false);

    // --- Items State ---
    const [items, setItems] = useState([
        defaultItem()
    ]);
    const [total, setTotal] = useState(0);
    const [selectedRowIndex, setSelectedRowIndex] = useState(null);

    // --- Tax/Charges State ---
    const [cgstRate, setCgstRate] = useState(1.5);
    const [sgstRate, setSgstRate] = useState(1.5);
    const [igstRate, setIgstRate] = useState(0);
    const [hallmarkingCharges, setHallmarkingCharges] = useState(45.00);
    const [hallmarkingPieces, setHallmarkingPieces] = useState(0);
    const [hallmarkingCgst, setHallmarkingCgst] = useState(9);
    const [hallmarkingSgst, setHallmarkingSgst] = useState(9);
    const [discount, setDiscount] = useState(0);



    // --- Store Info ---
    const storeInfo = {
        pagetype: 'TAX INVOICE',
        storeName: 'MDKJ JEWELLERS',
        storeAddress: 'Shop No. 45, Birhana Road\nKanpur, Uttar Pradesh 208001',
        phone: '+91 98765 12345',
        email: 'mdkjjewellers@gmail.com'
    };

    const handleHallmarkingChargesChange = (hallmarkingCharges) => {
        setHallmarkingCharges(hallmarkingCharges);
        const total = hallmarkingCharges * hallmarkingPieces;
        // setHallmarkingCgst((total * hallmarkingCgst) / 100);
        // setHallmarkingSgst((total * hallmarkingSgst) / 100);
    };
    const handleHallmarkingPiecesChange = (hallmarkingPieces) => {
        setHallmarkingPieces(hallmarkingPieces);
        const total = hallmarkingCharges * hallmarkingPieces;
        // setHallmarkingCgst((total * hallmarkingCgst) / 100);
        // setHallmarkingSgst((total * hallmarkingSgst) / 100);
    };


    // --- Customer Autocomplete Logic ---
    const filteredCustomers = useMemo(() => {
        if (!customerSearchTerm) return dummyCustomers;
        return dummyCustomers.filter(customer =>
            customer.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
            customer.phone.includes(customerSearchTerm)
        );
    }, [customerSearchTerm]);

    const handleCustomerSelect = (customer) => {
        setBillHeader(prev => ({
            ...prev,
            customerName: customer.name,
            customerPhone: customer.phone,
            customerAddress: customer.address,
            customerEmail: customer.email
        }));
        setCustomerSearchTerm(customer.name);
        setShowCustomerDropdown(false);
    };

    const handleCustomerSearch = (value) => {
        setCustomerSearchTerm(value);
        setBillHeader(prev => ({ ...prev, customerName: value }));
        setShowCustomerDropdown(value.length > 0);
    };

    // --- Bill Header Change Handler ---
    const handleHeaderChange = (field, value) => {
        setBillHeader(prev => ({ ...prev, [field]: value }));
    };

    // --- Items Logic (auto-calc amount, edit/save, add/delete, keyboard nav) ---
    const handleItemChange = (rowIndex, field, value) => {
        const updatedItems = [...items];
        if (field === 'weight' || field === 'rate') {
            const numValue = parseFloat(value) || 0;
            updatedItems[rowIndex][field] = numValue;
            updatedItems[rowIndex].amount = (parseFloat(updatedItems[rowIndex].weight) || 0) * (parseFloat(updatedItems[rowIndex].rate) || 0);
        } else if (field === 'amount') {
            updatedItems[rowIndex][field] = parseFloat(value) || 0;
        } else {
            updatedItems[rowIndex][field] = value;
        }
        setItems(updatedItems);
    };

    const handleEditClick = (rowIndex) => {
        const updatedItems = [...items];
        updatedItems[rowIndex].isEditing = !updatedItems[rowIndex].isEditing;
        setItems(updatedItems);
    };

    const handleAddRow = () => {
        const newRowIndex = selectedRowIndex !== null ? selectedRowIndex + 1 : items.length;
        const updatedItems = [...items];
        updatedItems.splice(newRowIndex, 0, {
            ...defaultItem(),
            id: Date.now(),
            isEditing: true
        });
        setItems(updatedItems);
        setSelectedRowIndex(newRowIndex);
    };

    const handleDeleteRow = (rowIndex) => {
        if (items.length > 1) {
            const updatedItems = items.filter((_, idx) => idx !== rowIndex);
            setItems(updatedItems);
        }
    };

    const handleKeyDown = (event, rowIndex, field) => {
        if (event.key === 'Enter') {
            handleEditClick(rowIndex);
        } else if (event.key === 'Tab') {
            event.preventDefault();
            const fields = ['description', 'hsnSac', 'purity', 'weight', 'rate', 'amount'];
            const currentFieldIndex = fields.indexOf(field);

            if (currentFieldIndex < fields.length - 1) {
                const nextField = fields[currentFieldIndex + 1];
                const nextInput = document.querySelector(`input[data-row="${rowIndex}"][data-field="${nextField}"]`);
                if (nextInput) nextInput.focus();
            } else if (rowIndex < items.length - 1) {
                const nextInput = document.querySelector(`input[data-row="${rowIndex + 1}"][data-field="description"]`);
                if (nextInput) nextInput.focus();
            }
        }
    };

    // --- Calculations ---
    const calculations = useMemo(() => {
        return calculateTotals({
            items,
            cgstRate,
            sgstRate,
            igstRate,
            hallmarkingCharges,
            hallmarkingPieces,
            hallmarkingCgst,
            hallmarkingSgst,
            discount
        });
    }, [
        items,
        cgstRate,
        sgstRate,
        igstRate,
        hallmarkingCharges,
        hallmarkingPieces,
        hallmarkingCgst,
        hallmarkingSgst,
        discount
    ]);

    // --- Print Handler ---

    const componentRef = useRef(null);
    // const handlePrint = useReactToPrint({
    //     contentRef: componentRef,
    //     documentTitle: 'MDKJ_Receipt',
    //     copyStyles: true,
    // });

    const containerStyle = {
        maxWidth: '1400px',
        margin: '0 auto',
        padding: '20px',
        fontFamily: 'Arial, sans-serif',
        backgroundColor: '#f8f9fa'
    };

    const headerSectionStyle = {
        backgroundColor: 'white',
        padding: '30px',
        borderRadius: '8px',
        marginBottom: '20px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
    };

    const formGridStyle = {
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
        gap: '20px'
    };

    const labelStyle = {
        display: 'block',
        marginBottom: '5px',
        fontWeight: 'bold',
        color: '#333'
    };

    const inputStyle = {
        width: '100%',
        padding: '8px 12px',
        border: '1px solid #ddd',
        borderRadius: '4px',
        fontSize: '14px'
    };

    const customerDropdownStyle = {
        position: 'absolute',
        top: '100%',
        left: 0,
        right: 0,
        backgroundColor: 'white',
        border: '1px solid #ddd',
        borderTop: 'none',
        borderRadius: '0 0 4px 4px',
        maxHeight: '200px',
        overflowY: 'auto',
        zIndex: 1000
    };

    const customerOptionStyle = {
        padding: '10px',
        cursor: 'pointer',
        borderBottom: '1px solid #eee'
    };

    const billPreviewStyle = {
        backgroundColor: 'white',
        padding: '40px',
        borderRadius: '8px',
        marginBottom: '20px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
    };

    const tableStyle = {
        width: '100%',
        borderCollapse: 'collapse',
        margin: '20px 0'
    };

    const thStyle = {
        border: '1px solid #ddd',
        padding: '12px',
        backgroundColor: '#f5f5f5',
        fontWeight: 'bold',
        textAlign: 'left'
    };

    const tdStyle = {
        border: '1px solid #ddd',
        padding: '8px'
    };

    const controlsStyle = {
        display: 'flex',
        flexWrap: 'wrap',
        gap: '15px',
        alignItems: 'center',
        backgroundColor: 'white',
        padding: '20px',
        borderRadius: '8px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
    };

    const buttonStyle = {
        padding: '8px 16px',
        border: 'none',
        borderRadius: '4px',
        cursor: 'pointer',
        fontSize: '14px'
    };

    const editButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#007bff',
        color: 'white',
        marginRight: '5px'
    };

    const saveButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#28a745',
        color: 'white',
        marginRight: '5px'
    };

    const deleteButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#dc3545',
        color: 'white'
    };

    const billInfo = {
        storeName: storeInfo.storeName,
        storeAddress: storeInfo.storeAddress,
        phone: storeInfo.phone,
        email: storeInfo.email,
        billNumber: billHeader.billNumber,
        date: billHeader.date,
        customerName: billHeader.customerName,
        customerPhone: billHeader.customerPhone,
        customerAddress: billHeader.customerAddress,
        customerEmail: billHeader.customerEmail
    };

    return (<div style={containerStyle}>
        {/* --- Bill Header Form Section --- */}
        <div style={{ marginBottom: '40px' }}>
            <BillHeaderForm
                billHeader={billHeader}
                onChange={setBillHeader}
                customerSearchTerm={customerSearchTerm}
                onCustomerSearch={handleCustomerSearch}
                filteredCustomers={filteredCustomers}
                showCustomerDropdown={showCustomerDropdown}
                onCustomerSelect={handleCustomerSelect}
                setShowCustomerDropdown={setShowCustomerDropdown}
            />
        </div>

        {/* --- Bill Preview Section --- */}
        <div style={{ marginBottom: '40px' }}>
            <BillPreview
                items={items}
                setItems={setItems}
                total={total}
                selectedRowIndex={selectedRowIndex}
                setSelectedRowIndex={setSelectedRowIndex}
                calculations={calculations}
                cgstRate={cgstRate}
                sgstRate={sgstRate}
                igstRate={igstRate}
                hallmarkingCharges={hallmarkingCharges}
                hallmarkingPieces={hallmarkingPieces}
                hallmarkingCgst={hallmarkingCgst}
                hallmarkingSgst={hallmarkingSgst}
                discount={discount}
                storeInfo={storeInfo}
                billHeader={billHeader}
                onTotalChange={setTotal}
                onChange={handleItemChange}
                onAdd={handleAddRow}
                onDelete={handleDeleteRow}
                onEditClick={handleEditClick}
                onKeyDown={handleKeyDown}
                onCgstChange={setCgstRate}
                onSgstChange={setSgstRate}
                onIgstChange={setIgstRate}
                onHallmarkingCgstChange={setHallmarkingCgst}
                onHallmarkingSgstChange={setHallmarkingSgst}
                onHallmarkingChange={handleHallmarkingChargesChange}
                onPiecesChange={handleHallmarkingPiecesChange}
                onDiscountChange={setDiscount}
            />


        </div>

        {/* --- Action Buttons Section --- */}
        {/* <div style={controlsStyle}>
            <button
                onClick={handlePrint}
                style={{
                    ...buttonStyle,
                    backgroundColor: '#333',
                    color: 'white',
                    fontSize: '16px',
                    padding: '10px 20px',
                    transition: 'background-color 0.3s ease',
                }}
                onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = '#555')}
                onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = '#333')}
            >
                Print Receipt
            </button>
        </div>

        {/* --- Hidden Print Preview --- */}
        {/* <div style={{ display: 'none' }}>
            <PrintPreview
                ref={componentRef}
                billHeader={billHeader}
                items={items}
                calculations={calculations}
                storeInfo={storeInfo}
            />
        </div>  */}
    </div>);
};

export default ReceiptPage;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ReceiptPage.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/apiService.js ---
// Mock API URL (Replace with your actual API endpoint)
const API_URL = 'https://your-api-endpoint.com/data';

// Function to fetch data from the backend
export const fetchData = async () => {
  try {
    const response = await fetch(API_URL);
    if (!response.ok) {
      throw new Error('Error fetching data');
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error(error);
    throw error;
  }
};

// Function to add new data to the backend
export const addData = async (newEntry) => {
  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(newEntry),
    });
    if (!response.ok) {
      throw new Error('Error adding data');
    }
    const addedEntry = await response.json();
    return addedEntry;
  } catch (error) {
    console.error(error);
    throw error;
  }
};

// Function to update existing data on the backend
export const updateData = async (updatedEntry) => {
  try {
    const response = await fetch(`${API_URL}/${updatedEntry.id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updatedEntry),
    });
    if (!response.ok) {
      throw new Error('Error updating data');
    }
    return await response.json();
  } catch (error) {
    console.error(error);
    throw error;
  }
};

module.export = {addData,fetchData,updateData};
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/apiService.js ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/CreateBill.css ---
/* Customer Details Section */
.create-bill__header-section {
    background-color: #ffffff;
    padding: 30px;
    border-radius: 8px;
    margin-bottom: 20px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

body.dark-mode .create-bill__header-section {
    background-color: #1e1e1e;
    box-shadow: 0 2px 10px rgba(255, 255, 255, 0.05);
}

.controlStyle {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    align-items: center;
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

body.dark-mode .controlStyle {
    background-color: #232323;
    box-shadow: 0 2px 10px rgba(255, 255, 255, 0.05);
}

.create-bill__header-title {
    font-size: 24px;
    font-weight: bold;
    color: #333;
    margin-bottom: 20px;
}

body.dark-mode .create-bill__header-title {
    color: #e0e0e0;
}

.create-bill__form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
}

.create-bill__form-group {
    display: flex;
    flex-direction: column;
}

.create-bill__form-group--relative {
    position: relative;
}

.create-bill__label {
    font-size: 14px;
    font-weight: bold;
    color: #333;
    margin-bottom: 5px;
}

body.dark-mode .create-bill__label {
    color: #b0bec5;
}

.create-bill__input,
.create-bill__textarea {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.2s;
}

body.dark-mode .create-bill__input,
body.dark-mode .create-bill__textarea {
    background-color: #232323;
    color: #e0e0e0;
    border: 1px solid #424242;
}

.create-bill__input:focus,
.create-bill__textarea:focus {
    border-color: #1a73e8;
    outline: none;
}

body.dark-mode .create-bill__input:focus,
body.dark-mode .create-bill__textarea:focus {
    border-color: #90caf9;
}

.create-bill__textarea {
    resize: vertical;
    min-height: 80px;
}

.create-bill__dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background-color: #ffffff;
    border: 1px solid #ddd;
    border-top: none;
    border-radius: 0 0 4px 4px;
    max-height: 200px;
    overflow-y: auto;
    z-index: 1000;
}

body.dark-mode .create-bill__dropdown {
    background-color: #232323;
    border: 1px solid #424242;
}

.create-bill__dropdown-item {
    padding: 10px;
    cursor: pointer;
    border-bottom: 1px solid #eee;
    transition: background-color 0.2s, color 0.2s;
}

body.dark-mode .create-bill__dropdown-item {
    color: #e0e0e0;
    border-bottom: 1px solid #333;
}

.create-bill__dropdown-item:hover,
.create-bill__dropdown-item--hover {
    background-color: #e8f0fe;
    color: #1a73e8;
}

body.dark-mode .create-bill__dropdown-item:hover,
body.dark-mode .create-bill__dropdown-item--hover {
    background-color: #424242;
    color: #90caf9;
}

/* Items Table */
.create-bill__table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
}

.create-bill__table-head {
    background-color: #f5f5f5;
}

body.dark-mode .create-bill__table-head {
    background-color: #232323;
}

.create-bill__table-row {
    border-bottom: 1px solid #ddd;
}

body.dark-mode .create-bill__table-row {
    border-bottom: 1px solid #424242;
}

.create-bill__table-row--header {
    font-weight: bold;
}

.create-bill__table-row--highlight {
    background-color: #e8f0fe;
}

body.dark-mode .create-bill__table-row--highlight {
    background-color: #232f3e;
}

.create-bill__table-cell {
    padding: 10px;
    border: 1px solid #ddd;
    text-align: left;
}

body.dark-mode .create-bill__table-cell {
    border: 1px solid #424242;
    color: #e0e0e0;
}

.create-bill__table-cell--header {
    font-weight: bold;
    background-color: #f5f5f5;
}

body.dark-mode .create-bill__table-cell--header {
    background-color: #232323;
    color: #b0bec5;
}

.create-bill__table-cell--center {
    text-align: center;
}

.create-bill__table-cell--right {
    text-align: right;
}

.create-bill__table-cell--bold {
    font-weight: bold;
}

/* Editable Text */
.create-bill__editable-text {
    cursor: pointer;
}

.create-bill__editable-text--bold {
    font-weight: bold;
}

/* Input Fields */
.create-bill__input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
}

body.dark-mode .create-bill__input {
    background-color: #232323;
    color: #e0e0e0;
    border: 1px solid #424242;
}

.create-bill__input--small {
    width: 80px;
    padding: 6px;
}

/* Buttons */
.create-bill__button {
    padding: 6px 12px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
}

.create-bill__button--save {
    background-color: #28a745;
    color: white;
}

body.dark-mode .create-bill__button--save {
    background-color: #388e3c;
    color: #e0e0e0;
}

.create-bill__button--edit {
    background-color: #007bff;
    color: white;
}

body.dark-mode .create-bill__button--edit {
    background-color: #1565c0;
    color: #e0e0e0;
}

.create-bill__button--delete {
    background-color: #dc3545;
    color: white;
}

body.dark-mode .create-bill__button--delete {
    background-color: #b71c1c;
    color: #e0e0e0;
}

/* Print Hide */
@media print {
    .print-hide {
        display: none;
    }
}

.create-bill__button--print {
    background-color: #6c757d;
    color: white;
}

body.dark-mode .create-bill__button--print {
    background-color: #424242;
    color: #e0e0e0;
}

.create-bill__button--print:hover {
    background-color: #5a6268;
    color: white;
}

body.dark-mode .create-bill__button--print:hover {
    background-color: #616161;
    color: #e0e0e0;
}

/* Totals Section */
.create-bill__totals {
    width: 400px;
    margin-left: auto;
    margin-top: 30px;
}

body.dark-mode .create-bill__totals {
    background-color: #232323;
}

.create-bill__totals table {
    width: 100%;
    border-collapse: collapse;
}

.create-bill__totals td {
    padding: 8px;
    border: 1px solid #333;
}

body.dark-mode .create-bill__totals td {
    border: 1px solid #424242;
    color: #e0e0e0;
}

.create-bill__totals td:first-child {
    font-weight: bold;
    background-color: #f5f5f5;
}

body.dark-mode .create-bill__totals td:first-child {
    background-color: #232323;
    color: #b0bec5;
}

.create-bill__totals .grand-total {
    font-size: 18px;
    font-weight: bold;
    background-color: #f0f0f0;
}

body.dark-mode .create-bill__totals .grand-total {
    background-color: #333;
    color: #fff;
}

/* Amount in Words */
.create-bill__amount-in-words {
    margin-top: 30px;
    padding: 15px;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
    font-weight: bold;
    color: #333;
}

body.dark-mode .create-bill__amount-in-words {
    background-color: #232323;
    border: 1px solid #424242;
    color: #e0e0e0;
}

/* Thank You Message */
.create-bill__thank-you {
    text-align: center;
    margin-top: 40px;
    color: #666;
    font-size: 16px;
}

body.dark-mode .create-bill__thank-you {
    color: #b0bec5;
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/CreateBill.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/xCreateBill.jsx ---
import React, { useState, useRef, useMemo } from 'react';

const Receipt = () => {
    // --- Dummy customer data for auto-fill ---
    const dummyCustomers = [
        {
            id: 1,
            name: 'Rajesh Kumar',
            phone: '+91 98765 43210',
            address: '123 MG Road\nKanpur, UP 208001',
            email: 'rajesh.kumar@email.com'
        },
        {
            id: 2,
            name: 'Priya Sharma',
            phone: '+91 87654 32109',
            address: '456 Civil Lines\nKanpur, UP 208002',
            email: 'priya.sharma@email.com'
        },
        {
            id: 3,
            name: 'Amit Gupta',
            phone: '+91 76543 21098',
            address: '789 Swaroop Nagar\nKanpur, UP 208003',
            email: 'amit.gupta@email.com'
        },
        {
            id: 4,
            name: 'Sunita Verma',
            phone: '+91 65432 10987',
            address: '321 Kalyanpur\nKanpur, UP 208004',
            email: 'sunita.verma@email.com'
        },
        {
            id: 5,
            name: 'Vikram Singh',
            phone: '+91 54321 09876',
            address: '654 Govind Nagar\nKanpur, UP 208005',
            email: 'vikram.singh@email.com'
        }
    ];

    // --- Fixed store information ---
    const storeInfo = {
        storeName: 'MDKJ JEWELLERS',
        storeAddress: 'Shop No. 45, Birhana Road\nKanpur, Uttar Pradesh 208001',
        phone: '+91 98765 12345',
        email: 'mdkjjewellers@gmail.com'
    };

    // --- State for bill header information ---
    const [billHeader, setBillHeader] = useState({
        billNumber: 'BILL-' + Date.now().toString().slice(-6),
        date: new Date().toISOString().split('T')[0],
        customerName: '',
        customerPhone: '',
        customerAddress: '',
        customerEmail: ''
    });

    // --- State for bill items ---
    const [items, setItems] = useState([
        {
            id: 1,
            description: 'New Gold Ornaments',
            hsnSac: '7113',
            purity: '18 CT',
            weight: 104.510,
            rate: 7200.00,
            amount: 752472.00,
            isEditing: false
        },
        {
            id: 2,
            description: 'New Gold Ornaments',
            hsnSac: '7113',
            purity: '18 CT',
            weight: 260.770,
            rate: 7200.00,
            amount: 1877544.00,
            isEditing: false
        },
    ]);

    // --- State for charges and taxes ---
    const [cgstRate, setCgstRate] = useState(1.5);
    const [sgstRate, setSgstRate] = useState(1.5);
    const [igstRate, setIgstRate] = useState(0);
    const [hallmarkingCharges, setHallmarkingCharges] = useState(45.00);
    const [hallmarkingPieces, setHallmarkingPieces] = useState(40);
    const [hallmarkingCgst, setHallmarkingCgst] = useState(9.0);
    const [hallmarkingSgst, setHallmarkingSgst] = useState(9.0);
    const [discount, setDiscount] = useState(0);
    const [selectedRowIndex, setSelectedRowIndex] = useState(null);
    const [customerSearchTerm, setCustomerSearchTerm] = useState('');
    const [showCustomerDropdown, setShowCustomerDropdown] = useState(false);

    // --- Ref for the bill preview ---
    const billRef = useRef();

    // --- Filter customers based on search term ---
    const filteredCustomers = useMemo(() => {
        if (!customerSearchTerm) return dummyCustomers;
        return dummyCustomers.filter(customer =>
            customer.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
            customer.phone.includes(customerSearchTerm)
        );
    }, [customerSearchTerm]);

    // --- Convert number to words ---
    const convertToWords = (num) => {
        const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
        const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];

        const convertHundreds = (n) => {
            let result = '';
            if (n > 99) {
                result += ones[Math.floor(n / 100)] + ' Hundred ';
                n %= 100;
            }
            if (n > 19) {
                result += tens[Math.floor(n / 10)] + ' ';
                n %= 10;
            }
            if (n > 0) {
                result += ones[n] + ' ';
            }
            return result;
        };

        if (num === 0) return 'Zero';

        const crore = Math.floor(num / 10000000);
        const lakh = Math.floor((num % 10000000) / 100000);
        const thousand = Math.floor((num % 100000) / 1000);
        const remainder = num % 1000;

        let result = '';
        if (crore > 0) result += convertHundreds(crore) + 'Crore ';
        if (lakh > 0) result += convertHundreds(lakh) + 'Lakh(s) ';
        if (thousand > 0) result += convertHundreds(thousand) + 'Thousand ';
        if (remainder > 0) result += convertHundreds(remainder);

        return 'Rupees ' + result.trim() + ' Only';
    };

    // --- Memoized calculations for totals ---
    const calculations = useMemo(() => {
        const totalTaxable = items.reduce((sum, item) => sum + item.amount, 0);

        const cgstAmount = (totalTaxable * cgstRate) / 100;
        const sgstAmount = (totalTaxable * sgstRate) / 100;
        const igstAmount = (totalTaxable * igstRate) / 100;

        const hallmarkingTotal = hallmarkingCharges * hallmarkingPieces;
        const hallmarkingCgstAmount = (hallmarkingTotal * hallmarkingCgst) / 100;
        const hallmarkingSgstAmount = (hallmarkingTotal * hallmarkingSgst) / 100;

        const subtotal = totalTaxable + cgstAmount + sgstAmount + igstAmount + hallmarkingTotal + hallmarkingCgstAmount + hallmarkingSgstAmount;
        const roundOff = Math.round(subtotal) - subtotal;
        const grandTotal = Math.round(subtotal);

        return {
            totalTaxable: totalTaxable.toFixed(2),
            cgstAmount: cgstAmount.toFixed(2),
            sgstAmount: sgstAmount.toFixed(2),
            igstAmount: igstAmount.toFixed(2),
            hallmarkingTotal: hallmarkingTotal.toFixed(2),
            hallmarkingCgstAmount: hallmarkingCgstAmount.toFixed(2),
            hallmarkingSgstAmount: hallmarkingSgstAmount.toFixed(2),
            roundOff: roundOff.toFixed(2),
            grandTotal: grandTotal.toFixed(2),
            grandTotalWords: convertToWords(grandTotal)
        };
    }, [items, cgstRate, sgstRate, igstRate, hallmarkingCharges, hallmarkingPieces, hallmarkingCgst, hallmarkingSgst]);

    // --- Handle customer selection ---
    const handleCustomerSelect = (customer) => {
        setBillHeader(prev => ({
            ...prev,
            customerName: customer.name,
            customerPhone: customer.phone,
            customerAddress: customer.address,
            customerEmail: customer.email
        }));
        setCustomerSearchTerm(customer.name);
        setShowCustomerDropdown(false);
    };

    // --- Handle customer search ---
    const handleCustomerSearch = (value) => {
        setCustomerSearchTerm(value);
        setBillHeader(prev => ({ ...prev, customerName: value }));
        setShowCustomerDropdown(value.length > 0);
    };

    // --- Handle changes to bill header fields ---
    const handleHeaderChange = (field, value) => {
        setBillHeader(prev => ({ ...prev, [field]: value }));
    };

    // --- Handle changes to an item field ---
    const handleItemChange = (rowIndex, field, value) => {
        const newItems = [...items];
        if (field === 'weight' || field === 'rate') {
            const numValue = parseFloat(value) || 0;
            newItems[rowIndex][field] = numValue;
            // Auto-calculate amount when weight or rate changes
            if (field === 'weight' || field === 'rate') {
                newItems[rowIndex].amount = newItems[rowIndex].weight * newItems[rowIndex].rate;
            }
        } else if (field === 'amount') {
            newItems[rowIndex][field] = parseFloat(value) || 0;
        } else {
            newItems[rowIndex][field] = value;
        }
        setItems(newItems);
    };

    // --- Toggle edit mode for an item row ---
    const handleEditClick = (rowIndex) => {
        const newItems = [...items];
        newItems[rowIndex].isEditing = !newItems[rowIndex].isEditing;
        setItems(newItems);
    };

    // --- Add a new item row ---
    const handleAddRow = () => {
        const newRowIndex = selectedRowIndex !== null ? selectedRowIndex + 1 : items.length;
        const newItems = [...items];
        newItems.splice(newRowIndex, 0, {
            id: Date.now(),
            description: '',
            hsnSac: '7113',
            purity: '18 CT',
            weight: 0,
            rate: 7200.00,
            amount: 0,
            isEditing: true
        });
        setItems(newItems);
        setSelectedRowIndex(newRowIndex);
    };

    // --- Delete an item row ---
    const handleDeleteRow = (rowIndex) => {
        if (items.length > 1) {
            const newItems = items.filter((_, index) => index !== rowIndex);
            setItems(newItems);
        }
    };

    // --- Keyboard navigation ---
    const handleKeyDown = (event, rowIndex, field) => {
        if (event.key === 'Enter') {
            handleEditClick(rowIndex);
        } else if (event.key === 'Tab') {
            event.preventDefault();
            const fields = ['description', 'hsnSac', 'purity', 'weight', 'rate', 'amount'];
            const currentFieldIndex = fields.indexOf(field);

            if (currentFieldIndex < fields.length - 1) {
                const nextField = fields[currentFieldIndex + 1];
                const nextInput = document.querySelector(`input[data-row="${rowIndex}"][data-field="${nextField}"]`);
                if (nextInput) nextInput.focus();
            } else if (rowIndex < items.length - 1) {
                const nextInput = document.querySelector(`input[data-row="${rowIndex + 1}"][data-field="description"]`);
                if (nextInput) nextInput.focus();
            }
        }
    };

    // --- Print function ---
    const handlePrint = () => {
        const printContent = billRef.current.innerHTML;
        const printWindow = window.open('', '', 'height=600,width=800');

        printWindow.document.write(`
      <html>
        <head>
          <title>Print Bill - ${billHeader.billNumber}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .bill-header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }
            .bill-info { display: flex; justify-content: space-between; margin-bottom: 20px; }
            .customer-info { text-align: left; }
            .bill-details { text-align: right; }
            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f5f5f5; font-weight: bold; }
            .text-right { text-align: right; }
            .text-center { text-align: center; }
            .totals { margin-top: 20px; }
            .total-row { font-weight: bold; background-color: #f0f0f0; }
            .print-hide { display: none; }
            .grand-total { font-size: 18px; font-weight: bold; }
          </style>
        </head>
        <body>${printContent}</body>
      </html>
    `);

        printWindow.document.close();
        printWindow.focus();
        printWindow.print();
    };

    // Styles
    const containerStyle = {
        maxWidth: '1400px',
        margin: '0 auto',
        padding: '20px',
        fontFamily: 'Arial, sans-serif',
        backgroundColor: '#f8f9fa'
    };

    const headerSectionStyle = {
        backgroundColor: 'white',
        padding: '30px',
        borderRadius: '8px',
        marginBottom: '20px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
    };

    const formGridStyle = {
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
        gap: '20px'
    };

    const labelStyle = {
        display: 'block',
        marginBottom: '5px',
        fontWeight: 'bold',
        color: '#333'
    };

    const inputStyle = {
        width: '100%',
        padding: '8px 12px',
        border: '1px solid #ddd',
        borderRadius: '4px',
        fontSize: '14px'
    };

    const customerDropdownStyle = {
        position: 'absolute',
        top: '100%',
        left: 0,
        right: 0,
        backgroundColor: 'white',
        border: '1px solid #ddd',
        borderTop: 'none',
        borderRadius: '0 0 4px 4px',
        maxHeight: '200px',
        overflowY: 'auto',
        zIndex: 1000
    };

    const customerOptionStyle = {
        padding: '10px',
        cursor: 'pointer',
        borderBottom: '1px solid #eee'
    };

    const billPreviewStyle = {
        backgroundColor: 'white',
        padding: '40px',
        borderRadius: '8px',
        marginBottom: '20px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
    };

    const tableStyle = {
        width: '100%',
        borderCollapse: 'collapse',
        margin: '20px 0'
    };

    const thStyle = {
        border: '1px solid #ddd',
        padding: '12px',
        backgroundColor: '#f5f5f5',
        fontWeight: 'bold',
        textAlign: 'left'
    };

    const tdStyle = {
        border: '1px solid #ddd',
        padding: '8px'
    };

    const controlsStyle = {
        display: 'flex',
        flexWrap: 'wrap',
        gap: '15px',
        alignItems: 'center',
        backgroundColor: 'white',
        padding: '20px',
        borderRadius: '8px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
    };

    const buttonStyle = {
        padding: '8px 16px',
        border: 'none',
        borderRadius: '4px',
        cursor: 'pointer',
        fontSize: '14px'
    };

    const editButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#007bff',
        color: 'white',
        marginRight: '5px'
    };

    const saveButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#28a745',
        color: 'white',
        marginRight: '5px'
    };

    const deleteButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#dc3545',
        color: 'white'
    };

    return (
        <div style={containerStyle}>
            {/* --- Customer Details Section --- */}
            <div style={headerSectionStyle}>
                <h2 style={{ margin: '0 0 20px 0', color: '#333' }}>Customer Information</h2>
                <div style={formGridStyle}>
                    {/* Customer Name with Search */}
                    <div style={{ position: 'relative' }}>
                        <label style={labelStyle}>Customer Name:</label>
                        <input
                            type="text"
                            style={inputStyle}
                            value={customerSearchTerm}
                            onChange={(e) => handleCustomerSearch(e.target.value)}
                            onFocus={() => setShowCustomerDropdown(customerSearchTerm.length > 0)}
                            placeholder="Search or enter customer name"
                        />
                        {showCustomerDropdown && (
                            <div style={customerDropdownStyle}>
                                {filteredCustomers.map((customer) => (
                                    <div
                                        key={customer.id}
                                        style={customerOptionStyle}
                                        onClick={() => handleCustomerSelect(customer)}
                                        onMouseEnter={(e) => e.target.style.backgroundColor = '#f0f0f0'}
                                        onMouseLeave={(e) => e.target.style.backgroundColor = 'white'}
                                    >
                                        <strong>{customer.name}</strong><br />
                                        <small>{customer.phone}</small>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>

                    {/* Customer Phone */}
                    <div>
                        <label style={labelStyle}>Customer Phone:</label>
                        <input
                            type="text"
                            style={inputStyle}
                            value={billHeader.customerPhone}
                            onChange={(e) => handleHeaderChange('customerPhone', e.target.value)}
                        />
                    </div>

                    {/* Customer Address */}
                    <div>
                        <label style={labelStyle}>Customer Address:</label>
                        <textarea
                            style={{ ...inputStyle, minHeight: '60px', resize: 'vertical' }}
                            value={billHeader.customerAddress}
                            onChange={(e) => handleHeaderChange('customerAddress', e.target.value)}
                        />
                    </div>

                    {/* Customer Email */}
                    <div>
                        <label style={labelStyle}>Customer Email:</label>
                        <input
                            type="email"
                            style={inputStyle}
                            value={billHeader.customerEmail}
                            onChange={(e) => handleHeaderChange('customerEmail', e.target.value)}
                        />
                    </div>

                    {/* Bill Date */}
                    <div>
                        <label style={labelStyle}>Bill Date:</label>
                        <input
                            type="date"
                            style={inputStyle}
                            value={billHeader.date}
                            onChange={(e) => handleHeaderChange('date', e.target.value)}
                        />
                    </div>
                </div>
            </div>

            {/* --- Bill Preview Section --- */}
            <div ref={billRef} style={billPreviewStyle}>
                {/* Bill Header */}
                <div style={{ textAlign: 'center', marginBottom: '40px', borderBottom: '2px solid #333', paddingBottom: '20px' }}>
                    <h1 style={{ fontSize: '36px', margin: '0 0 10px 0', color: '#333' }}>INVOICE</h1>
                    <h2 style={{ fontSize: '24px', margin: '0 0 15px 0', color: '#333' }}>{storeInfo.storeName}</h2>
                    <div style={{ color: '#666', lineHeight: '1.4' }}>
                        {storeInfo.storeAddress.split('\n').map((line, i) => (
                            <p key={i} style={{ margin: '5px 0' }}>{line}</p>
                        ))}
                    </div>
                    <p style={{ color: '#666', margin: '10px 0 0 0' }}>
                        Phone: {storeInfo.phone} | Email: {storeInfo.email}
                    </p>
                </div>

                {/* Bill Info */}
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '30px' }}>
                    <div>
                        <h3 style={{ margin: '0 0 10px 0', fontWeight: 'bold' }}>Bill To:</h3>
                        <p style={{ margin: '5px 0', fontSize: '16px' }}>
                            <strong>{billHeader.customerName || 'Customer Name'}</strong>
                        </p>
                        {billHeader.customerPhone && (
                            <p style={{ margin: '5px 0', fontSize: '14px' }}>
                                Phone: {billHeader.customerPhone}
                            </p>
                        )}
                        {billHeader.customerAddress && (
                            <p style={{ margin: '5px 0', fontSize: '14px', whiteSpace: 'pre-line' }}>
                                {billHeader.customerAddress}
                            </p>
                        )}
                        {billHeader.customerEmail && (
                            <p style={{ margin: '5px 0', fontSize: '14px' }}>
                                Email: {billHeader.customerEmail}
                            </p>
                        )}
                    </div>
                    <div style={{ textAlign: 'right' }}>
                        <p style={{ margin: '5px 0' }}><strong>Bill #:</strong> {billHeader.billNumber}</p>
                        <p style={{ margin: '5px 0' }}><strong>Date:</strong> {billHeader.date}</p>
                    </div>
                </div>

                {/* Items Table */}
                <table style={tableStyle}>
                    <thead>
                        <tr style={{ backgroundColor: '#f5f5f5' }}>
                            <th style={{ ...thStyle, width: '30px', textAlign: 'center' }}>S.No</th>
                            <th style={{ ...thStyle, width: '200px' }}>Description</th>
                            <th style={{ ...thStyle, width: '80px', textAlign: 'center' }}>HSN/SAC</th>
                            <th style={{ ...thStyle, width: '80px', textAlign: 'center' }}>Purity</th>
                            <th style={{ ...thStyle, width: '100px', textAlign: 'center' }}>Weight(in gms)</th>
                            <th style={{ ...thStyle, width: '100px', textAlign: 'right' }}>Rate (₹)</th>
                            <th style={{ ...thStyle, width: '120px', textAlign: 'right' }}>Amount (₹)</th>
                            <th style={{ ...thStyle, width: '150px', textAlign: 'center' }} className="print-hide">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {items.map((item, rowIndex) => (
                            <tr
                                key={item.id}
                                style={{
                                    backgroundColor: selectedRowIndex === rowIndex ? '#e3f2fd' : 'transparent',
                                    cursor: 'pointer'
                                }}
                                onMouseEnter={() => setSelectedRowIndex(rowIndex)}
                                onMouseLeave={() => setSelectedRowIndex(null)}
                            >
                                <td style={{ ...tdStyle, textAlign: 'center', fontWeight: 'bold' }}>
                                    {rowIndex + 1}
                                </td>
                                <td style={tdStyle}>
                                    {item.isEditing ? (
                                        <input
                                            type="text"
                                            style={{ ...inputStyle, margin: 0 }}
                                            value={item.description}
                                            data-row={rowIndex}
                                            data-field="description"
                                            onChange={(e) => handleItemChange(rowIndex, 'description', e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, 'description')}
                                            autoFocus
                                        />
                                    ) : (
                                        <span
                                            onClick={() => handleEditClick(rowIndex)}
                                            style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                                        >
                                            {item.description || 'Click to edit'}
                                        </span>
                                    )}
                                </td>
                                <td style={{ ...tdStyle, textAlign: 'center' }}>
                                    {item.isEditing ? (
                                        <input
                                            type="text"
                                            style={{ ...inputStyle, margin: 0, textAlign: 'center', width: '70px' }}
                                            value={item.hsnSac}
                                            data-row={rowIndex}
                                            data-field="hsnSac"
                                            onChange={(e) => handleItemChange(rowIndex, 'hsnSac', e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, 'hsnSac')}
                                        />
                                    ) : (
                                        <span
                                            onClick={() => handleEditClick(rowIndex)}
                                            style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                                        >
                                            {item.hsnSac}
                                        </span>
                                    )}
                                </td>
                                <td style={{ ...tdStyle, textAlign: 'center' }}>
                                    {item.isEditing ? (
                                        <input
                                            type="text"
                                            style={{ ...inputStyle, margin: 0, textAlign: 'center', width: '70px' }}
                                            value={item.purity}
                                            data-row={rowIndex}
                                            data-field="purity"
                                            onChange={(e) => handleItemChange(rowIndex, 'purity', e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, 'purity')}
                                        />
                                    ) : (
                                        <span
                                            onClick={() => handleEditClick(rowIndex)}
                                            style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                                        >
                                            {item.purity}
                                        </span>
                                    )}
                                </td>
                                <td style={{ ...tdStyle, textAlign: 'center' }}>
                                    {item.isEditing ? (
                                        <input
                                            type="number"
                                            style={{ ...inputStyle, margin: 0, textAlign: 'center', width: '90px' }}
                                            value={item.weight}
                                            data-row={rowIndex}
                                            data-field="weight"
                                            onChange={(e) => handleItemChange(rowIndex, 'weight', e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, 'weight')}
                                            min="0"
                                            step="0.001"
                                        />
                                    ) : (
                                        <span
                                            onClick={() => handleEditClick(rowIndex)}
                                            style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                                        >
                                            {item.weight.toFixed(3)}
                                        </span>
                                    )}
                                </td>
                                <td style={{ ...tdStyle, textAlign: 'right' }}>
                                    {item.isEditing ? (
                                        <input
                                            type="number"
                                            style={{ ...inputStyle, margin: 0, textAlign: 'right', width: '90px' }}
                                            value={item.rate}
                                            data-row={rowIndex}
                                            data-field="rate"
                                            onChange={(e) => handleItemChange(rowIndex, 'rate', e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, 'rate')}
                                            min="0"
                                            step="0.01"
                                        />
                                    ) : (
                                        <span
                                            onClick={() => handleEditClick(rowIndex)}
                                            style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                                        >
                                            ₹{item.rate.toFixed(2)}
                                        </span>
                                    )}
                                </td>
                                <td style={{ ...tdStyle, textAlign: 'right' }}>
                                    {item.isEditing ? (
                                        <input
                                            type="number"
                                            style={{ ...inputStyle, margin: 0, textAlign: 'right', width: '110px' }}
                                            value={item.amount}
                                            data-row={rowIndex}
                                            data-field="amount"
                                            onChange={(e) => handleItemChange(rowIndex, 'amount', e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, 'amount')}
                                            min="0"
                                            step="0.01"
                                        />
                                    ) : (
                                        <span
                                            onClick={() => handleEditClick(rowIndex)}
                                            style={{ cursor: 'pointer', display: 'block', padding: '4px', fontWeight: 'bold' }}
                                        >
                                            ₹{item.amount.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                        </span>
                                    )}
                                </td>
                                <td style={{ ...tdStyle, textAlign: 'center' }} className="print-hide">
                                    <button
                                        style={item.isEditing ? saveButtonStyle : editButtonStyle}
                                        onClick={() => handleEditClick(rowIndex)}
                                    >
                                        {item.isEditing ? 'Save' : 'Edit'}
                                    </button>
                                    <button
                                        style={deleteButtonStyle}
                                        onClick={() => handleDeleteRow(rowIndex)}
                                    >
                                        Del
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>

                {/* Totals Section */}
                <div style={{ width: '400px', marginLeft: 'auto', marginTop: '30px' }}>
                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                        <tbody>
                            <tr>
                                <td style={{ padding: '8px', fontWeight: 'bold', backgroundColor: '#f5f5f5', border: '1px solid #333' }}>
                                    Total Taxable
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', fontWeight: 'bold', backgroundColor: '#f5f5f5', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.totalTaxable).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333' }}>
                                    CGST {cgstRate}%
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.cgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333' }}>
                                    SGST {sgstRate}%
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.sgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333' }}>
                                    IGST {igstRate}%
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.igstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333' }}>
                                    Hallmarking Charges 9983 @ ₹{hallmarkingCharges.toFixed(2)}<br />
                                    <small>{hallmarkingPieces} Pieces</small>
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.hallmarkingTotal).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                                    CGST {hallmarkingCgst}%
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.hallmarkingCgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                                    SGST {hallmarkingSgst}%
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.hallmarkingSgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                                    IGST 0.0%
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹0.00
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333' }}>
                                    Round off
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    {parseFloat(calculations.roundOff) >= 0 ? '+' : ''}₹{calculations.roundOff}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '12px', fontWeight: 'bold', fontSize: '18px', backgroundColor: '#f0f0f0', border: '2px solid #333' }}>
                                    Grand Total
                                </td>
                                <td style={{ padding: '12px', textAlign: 'right', fontWeight: 'bold', fontSize: '18px', backgroundColor: '#f0f0f0', border: '2px solid #333' }}>
                                    ₹{parseFloat(calculations.grandTotal).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                {/* Amount in Words */}
                <div style={{ marginTop: '30px', padding: '15px', backgroundColor: '#f9f9f9', border: '1px solid #ddd', borderRadius: '4px' }}>
                    <strong>Amount in word(s):</strong><br />
                    <span style={{ fontSize: '16px', fontWeight: 'bold', color: '#333' }}>
                        {calculations.grandTotalWords}
                    </span>
                </div>

                {/* Thank you message */}
                <div style={{ textAlign: 'center', marginTop: '40px', color: '#666' }}>
                    <p style={{ margin: 0, fontSize: '16px' }}>Thank you for choosing MDKJ Jewellers!</p>
                </div>
            </div>

            {/* Controls */}
            <div style={controlsStyle}>
                <button
                    style={{ ...buttonStyle, backgroundColor: '#28a745', color: 'white', fontSize: '16px', padding: '12px 24px' }}
                    onClick={handleAddRow}
                >
                    Add Item
                </button>

                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <label style={{ fontSize: '14px', fontWeight: 'bold' }}>CGST (%):</label>
                    <input
                        type="number"
                        style={{ ...inputStyle, width: '80px' }}
                        value={cgstRate}
                        onChange={(e) => setCgstRate(parseFloat(e.target.value) || 0)}
                        min="0"
                        step="0.1"
                    />
                </div>

                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <label style={{ fontSize: '14px', fontWeight: 'bold' }}>SGST (%):</label>
                    <input
                        type="number"
                        style={{ ...inputStyle, width: '80px' }}
                        value={sgstRate}
                        onChange={(e) => setSgstRate(parseFloat(e.target.value) || 0)}
                        min="0"
                        step="0.1"
                    />
                </div>

                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <label style={{ fontSize: '14px', fontWeight: 'bold' }}>IGST (%):</label>
                    <input
                        type="number"
                        style={{ ...inputStyle, width: '80px' }}
                        value={igstRate}
                        onChange={(e) => setIgstRate(parseFloat(e.target.value) || 0)}
                        min="0"
                        step="0.1"
                    />
                </div>

                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <label style={{ fontSize: '14px', fontWeight: 'bold' }}>Hallmark Rate (₹):</label>
                    <input
                        type="number"
                        style={{ ...inputStyle, width: '80px' }}
                        value={hallmarkingCharges}
                        onChange={(e) => setHallmarkingCharges(parseFloat(e.target.value) || 0)}
                        min="0"
                        step="0.01"
                    />
                </div>

                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <label style={{ fontSize: '14px', fontWeight: 'bold' }}>Pieces:</label>
                    <input
                        type="number"
                        style={{ ...inputStyle, width: '80px' }}
                        value={hallmarkingPieces}
                        onChange={(e) => setHallmarkingPieces(parseInt(e.target.value) || 0)}
                        min="0"
                        step="1"
                    />
                </div>

                <button
                    style={{ ...buttonStyle, backgroundColor: '#007bff', color: 'white', fontSize: '16px', padding: '12px 24px' }}
                    onClick={handlePrint}
                >
                    Print Bill
                </button>
            </div>

            {/* Usage Instructions */}
            <div style={{
                marginTop: '20px',
                padding: '20px',
                backgroundColor: '#e3f2fd',
                borderRadius: '8px',
                border: '1px solid #2196f3'
            }}>
                <h3 style={{ margin: '0 0 15px 0', color: '#1976d2' }}>How to use:</h3>
                <ul style={{ margin: 0, paddingLeft: '20px', color: '#333', lineHeight: '1.6' }}>
                    <li>Search for existing customers or enter new customer details manually</li>
                    <li>Click on customer name in dropdown to auto-fill their information</li>
                    <li>Click on any item cell to edit it directly</li>
                    <li>Weight and Rate will auto-calculate Amount when changed</li>
                    <li>Use Tab to move between fields, Enter to save</li>
                    <li>Adjust tax rates and hallmarking charges as needed</li>
                    <li>Print the final bill when ready</li>
                </ul>
            </div>
        </div>
    );
};

export default Receipt;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/xCreateBill.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/NavBar.css ---
/* General styles for the navbar
.navbar {
    border-radius: 5px;
}

/* Dark mode styles */
.bg-dark {
    background-color: #343a40 !important;
}

body.dark-mode .navbar {
    background-color: #232323 !important;
    border-radius: 5px;
}

body.dark-mode .navbar-nav .nav-link,
body.dark-mode .navbar .nav-link {
    color: #e0e0e0 !important;
}

body.dark-mode .navbar-nav .nav-link.active,
body.dark-mode .navbar .nav-link.active,
body.dark-mode .nav-item.active {
    color: #90caf9 !important;
    background-color: #232f3e !important;
    font-weight: bold;
    border-radius: 5px;
}

body.dark-mode .btn,
body.dark-mode .btn-outline-secondary {
    background-color: #232323 !important;
    color: #e0e0e0 !important;
    border-color: #424242 !important;
}

body.dark-mode .btn:hover,
body.dark-mode .btn-outline-secondary:hover {
    background-color: #424242 !important;
    color: #90caf9 !important;
    border-color: #90caf9 !important;
}

.text-white {
    color: #ffffff !important;
}

body.dark-mode .text-white {
    color: #e0e0e0 !important;
}

/* Active nav item styles */
.nav-item.active {
    font-weight: bold;
    border-radius: 5px;
}

/* Button styles */
.btn {
    font-size: 1rem;
}

.btn-outline-secondary {
    margin-left: auto;
}

.navbar-nav {
    flex-direction: row;
}

.navbar-nav .nav-link {
    padding: 0.5rem 1rem;
}

/*
*/
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/NavBar.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ItemsTable.css ---
/* ItemsTable.css */
.table {
    width: 100%;
    border-collapse: collapse;
}

.table th,
.table td {
    border: 1px solid #ddd;
    padding: 8px;
}

.table th {
    background-color: #f2f2f2;
    text-align: left;
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ItemsTable.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Bills.css ---
/* Container styling */
.container {
  padding: 20px;
  background-color: #f9f9f9;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Heading styling */
h1 {
  font-size: 24px;
  color: #333;
  margin-bottom: 20px;
  text-align: center;
  /* Center align for better mobile appearance */
}

/* Table styling */
.table {
  margin-bottom: 20px;
  width: 100%;
  /* Ensure table fits within the screen */
  overflow-x: auto;
  /* Add horizontal scrolling for smaller screens */
  display: block;
  /* Make table scrollable */
}

.table-bordered {
  border: 1px solid #ddd;
}

.table-bordered th,
.table-bordered td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
  font-size: 14px;
  /* Reduce font size for smaller screens */
}

.table-bordered th {
  background-color: #343a40;
  color: #fff;
}

.table-bordered td {
  background-color: #fff;
}

.table-active {
  background-color: #e9ecef;
}

.table .form-control {
  width: 100%;
  border: 1px solid #ddd;
  border-radius: 4px;
}

/* Button styling */
.btn {
  margin-right: 5px;
  font-size: 14px;
  /* Adjust button font size for smaller screens */
  padding: 8px 12px;
  /* Adjust padding for better fit */
}

.btn-success {
  background-color: #28a745;
  border-color: #28a745;
}

.btn-success:hover {
  background-color: #218838;
  border-color: #1e7e34;
}

.btn-primary {
  background-color: #007bff;
  border-color: #007bff;
}

.btn-primary:hover {
  background-color: #0069d9;
  border-color: #005cbf;
}

.btn-info {
  background-color: #17a2b8;
  border-color: #17a2b8;
}

.btn-info:hover {
  background-color: #138496;
  border-color: #117a8b;
}

/* Filter inputs styling */
.form-control {
  display: inline-block;
  width: auto;
}

.d-flex {
  display: flex;
  flex-wrap: wrap;
  /* Allow wrapping for smaller screens */
}

.mr-2 {
  margin-right: 0.5rem;
}

.ml-2 {
  margin-left: 0.5rem;
}

/* Mobile-specific styles */
@media (max-width: 768px) {
  .container {
    padding: 10px;
    /* Reduce padding for smaller screens */
  }

  h1 {
    font-size: 20px;
    /* Reduce heading size */
  }

  .table-bordered th,
  .table-bordered td {
    font-size: 12px;
    /* Further reduce font size for smaller screens */
    padding: 6px;
    /* Adjust padding */
  }

  .btn {
    font-size: 12px;
    /* Smaller buttons */
    padding: 6px 10px;
    /* Adjust padding */
  }

  .d-flex {
    flex-direction: column;
    /* Stack elements vertically */
  }

  .mr-2,
  .ml-2 {
    margin: 0;
    /* Remove margins for better spacing */
  }

  .form-control {
    width: 100%;
    /* Make inputs full width */
    margin-bottom: 10px;
    /* Add spacing between inputs */
  }
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Bills.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ViewTables.jsx ---
import React, { useState, useEffect } from "react";
import { useSearchParams } from "react-router-dom";
import { fetchAll } from "../api/index";
import { fetchTableSchema } from "../api/index"; // Import the function to fetch table schema
import 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS
import 'bootstrap/dist/js/bootstrap.bundle.min.js'; // Import Bootstrap JS
import './ViewTables.css'; // Import custom CSS for styling

const DataRow = ({
    row,
    rowIndex,
    handleCellChange,
    handleEditClick,
    handleCancelClick,
    selectedRowIndex,
    handleRowHover,
    tableLayout
}) => (
    <tr
        key={rowIndex}
        className={`view-tables__row ${selectedRowIndex === rowIndex ? 'view-tables__row--active' : ''}`}
        onMouseEnter={() => handleRowHover(rowIndex)}
    >
        <td></td>
        {tableLayout.map((column, i) => (
            <td key={column.key} className="view-tables__cell">
                {row.isEditing && column.editable ? (
                    <input
                        type={column.type === 'number' ? 'number' : 'text'}
                        className="view-tables__input"
                        value={row[column.key] || ""}
                        onChange={(e) => handleCellChange(rowIndex, column.key, e.target.value)}
                    />
                ) : (
                    row[column.key] === null || row[column.key] === undefined || row[column.key] === ""
                        ? "N/A" // Handle null or missing values
                        : row[column.key]
                )}
            </td>
        ))}
        <td className="view-tables__cell">
            <button
                className={`view-tables__button ${row.isEditing ? 'view-tables__button--save' : 'view-tables__button--edit'}`}
                onClick={() => handleEditClick(rowIndex, !(row.isEditing))}
            >
                {row.isEditing ? 'Save' : 'Edit'}
            </button>
        </td>
        <td className="view-tables__cell">
            {row.isEditing && (
                <button className="view-tables__button view-tables__button--cancel" onClick={() => handleCancelClick(rowIndex)}>
                    Cancel
                </button>
            )}
        </td>
    </tr>
);

// Table Component
const DataTable = ({
    data,
    handleCellChange,
    handleEditClick,
    handleCancelClick,
    selectedRowIndex,
    handleRowHover,
    handleSort,
    tableLayout,
    params
}) => (
    <table className="view-tables__table">
        <thead className="view-tables">
            <tr className="view-tables__header-row">
                <th className="view-tables__header-cell">ID</th>
                {tableLayout.map((column) => (
                    <th
                        key={column.key}
                        className="view-tables__header-cell view-tables__header-cell--sortable"
                        onClick={() => handleSort(column.key)}
                    >
                        {column.label} {params.sort_by === column.key ? (params.sort_order === "asc" ? "↑" : "↓") : ""}
                    </th>
                ))}
                <th className="view-tables__header-cell">Edit</th>
                <th className="view-tables__header-cell">Cancel</th>
            </tr>
        </thead>
        <tbody className="view-tables__body">
            {data.map((row, rowIndex) => (
                <DataRow
                    key={rowIndex}
                    row={row}
                    rowIndex={rowIndex}
                    handleCellChange={handleCellChange}
                    handleEditClick={handleEditClick}
                    handleCancelClick={handleCancelClick}
                    selectedRowIndex={selectedRowIndex}
                    handleRowHover={handleRowHover}
                    tableLayout={tableLayout} // Pass tableLayout
                />
            ))}
        </tbody>
    </table>
);

const ViewTables = ({ tableName, initialParams = {} }) => {
    const [data, setData] = useState([]);
    const [sdata, setsData] = useState([]); // State for storing original data
    const [tableLayout, setTableLayout] = useState([]); // Dynamic table layout
    const [selectedRowIndex, setSelectedRowIndex] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [params, setParams] = useState({
        page: 1,
        page_size: 10,
        sort_by: null,
        sort_order: "asc",
        ...initialParams,
    });

    // Fetch schema for the table
    const fetchSchema = async () => {
        try {
            const response = await fetchTableSchema(tableName);
            const schema = response.data.schema || [];
            const layout = schema.map((column) => ({
                key: column.column_name,
                label: column.column_name.toUpperCase(),
                type: column.data_type === "integer" || column.data_type === "numeric" ? "number" : "text",
                editable: true,
            }));
            setTableLayout(layout);
        } catch (err) {
            console.error(`Error fetching schema for table: ${tableName}`, err);
            setError("Failed to fetch table schema");
        }
    };

    // Fetch data for the table
    const fetchData = async () => {
        setLoading(true);
        setError(null);
        try {
            const response = await fetchAll(tableName, params);
            if (Array.isArray(response.data)) {
                setData(response.data);
                setsData(response.data); // Store original data
            } else {
                console.error(`Unexpected data format for table: ${tableName}`, response.data);
                setData([]);
            }
        } catch (err) {
            console.error(`Error fetching data for table: ${tableName}`, err);
            setError(err.message || "Failed to fetch data");
        } finally {
            setLoading(false);
        }
    };

    // Handle tableName change
    useEffect(() => {
        // Reset state when tableName changes
        setData([]);
        setsData([]);
        setTableLayout([]);
        setError(null);
        setParams({
            page: 1,
            page_size: 10,
            sort_by: null,
            sort_order: "asc",
            ...initialParams,
        });

        // Fetch schema and data for the new table
        fetchSchema();
        fetchData();
    }, [tableName]); // Re-run when tableName changes

    // Handle params change (e.g., pagination, sorting)
    useEffect(() => {
        fetchData();
    }, [params]);

    const handleSort = (column) => {
        setParams((prev) => ({
            ...prev,
            sort_by: column,
            sort_order: prev.sort_by === column && prev.sort_order === "asc" ? "desc" : "asc",
        }));
    };

    const handlePageChange = (newPage) => {
        setParams((prev) => ({ ...prev, page: newPage }));
    };

    const handlePageSizeChange = (e) => {
        const newPageSize = parseInt(e.target.value, 10) || 10;
        setParams((prev) => ({ ...prev, page_size: newPageSize }));
    };

    const handleCellChange = (rowIndex, columnKey, value) => {
        const newData = [...data];
        const snewData = [...sdata];
        newData[rowIndex][columnKey] = value;
        snewData[rowIndex][columnKey] = value;
        delete snewData[rowIndex].isEditing;
        setData(newData);
        setsData(snewData);
    };

    const handleRowHover = (rowIndex) => {
        try {
            setSelectedRowIndex(rowIndex);
        } catch (err) {
            console.error(`Error handling row hover for row: ${rowIndex}`, err);
        }
    };

    const handleEditClick = (rowIndex, editing) => {
        if (editing) {
            const newData = [...data];
            newData[rowIndex].isEditing = !newData[rowIndex].isEditing;
            setData(newData);
            if (newData[rowIndex].isEditing) {
                newData[rowIndex].original = { ...newData[rowIndex] };
            }
        } else {
            const row = data[rowIndex];
            const srow = sdata[rowIndex];
            updateData(srow)
                .then(() => {
                    const newData = [...data];
                    newData[rowIndex].isEditing = false;
                    setData(newData);
                    fetchData();
                })
                .catch((error) => {
                    console.error('Error updating row:', error);
                });
        }
    };

    const handleCancelClick = (rowIndex) => {
        const newData = [...data];
        newData[rowIndex] = { ...newData[rowIndex].original }; // Restore original data
        newData[rowIndex].isEditing = false; // Reset editing state
        setData(newData);
    };

    return (
        <div className="view-tables">
            <h3 className="view-tables__title">Viewing Table: {tableName}</h3>
            {error && <div className="view-tables__alert view-tables__alert--error">{error}</div>}
            {loading ? (
                <div className="view-tables__loading">Loading...</div>
            ) : (
                <>
                    <div className="view-tables__controls">
                        <label className="view-tables__label">Page Size: </label>
                        <select
                            className="view-tables__select"
                            value={params.page_size}
                            onChange={handlePageSizeChange}
                        >
                            <option value={5}>5</option>
                            <option value={10}>10</option>
                            <option value={20}>20</option>
                            <option value={50}>50</option>
                        </select>
                    </div>
                    <DataTable
                        data={data}
                        handleCellChange={handleCellChange}
                        handleEditClick={handleEditClick}
                        handleCancelClick={handleCancelClick}
                        tableLayout={tableLayout}
                        handleSort={handleSort}
                        params={params}
                        handleRowHover={handleRowHover}
                        selectedRowIndex={selectedRowIndex}
                    />
                    <div className="view-tables__pagination">
                        <button
                            className="view-tables__button view-tables__button--prev"
                            onClick={() => handlePageChange(params.page - 1)}
                            disabled={params.page === 1}
                        >
                            Previous
                        </button>
                        <span className="view-tables__pagination-info">Page {params.page}</span>
                        <button
                            className="view-tables__button view-tables__button--next"
                            onClick={() => handlePageChange(params.page + 1)}
                            disabled={data.length < params.page_size}
                        >
                            Next
                        </button>
                    </div>
                </>
            )}
        </div>
    );
};

export default ViewTables;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ViewTables.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Sidebar.jsx ---
import React from 'react';
import './Sidebar.css'; // Import custom CSS

const Sidebar = ({ isOpen, handleNavigation }) => {
  return (
    <div className={`sidebar ${isOpen ? 'open' : 'closed'}`}>
      <ul className="list-unstyled">
        <li className="nav-item" onClick={() => handleNavigation('dashboard')}>Dashboard</li>
        <li className="nav-item" onClick={() => handleNavigation('sales')}>Sales</li>
        <li className="nav-item" onClick={() => handleNavigation('purchase')}>Purchase</li>
        <li className="nav-item" onClick={() => handleNavigation('stock')}>Stock</li>
        <li className="nav-item" onClick={() => handleNavigation('bills')}>Bills</li>
        <li className="nav-item" onClick={() => handleNavigation('receipt')}>Receipt</li>
        <li className="nav-item" onClick={() => handleNavigation('createbill')}>CreateBill</li>
        <li className="nav-item" onClick={() => handleNavigation('receipt2')}>ReceiptPage</li>
      </ul>
    </div>
  );
};

export default Sidebar;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Sidebar.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/CreateCustomer.jsx ---
import React, { useState } from 'react';
// import { createCustomer } from '../api/index'; // Uncomment and implement this API call
import '../pages/EntryDashboard.css';
const initialState = {
    gstin: '',
    name: '',
    address: '',
    phone: '',
    email: '',
};

const NewCustomerForm = ({ onSuccess }) => {
    const [form, setForm] = useState(initialState);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    const handleChange = (field, value) => {
        setForm(prev => ({ ...prev, [field]: value }));
    };

    const validate = () => {
        if (!form.gstin || form.gstin.length < 5) return "GSTIN is required";
        if (!form.name) return "Name is required";
        // Optionally add more validation here
        return '';
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        const err = validate();
        if (err) {
            setError(err);
            return;
        }
        setLoading(true);
        try {
            // await createCustomer(form); // Implement this API call
            setLoading(false);
            alert('Customer created successfully!');
            setForm(initialState);
            if (onSuccess) onSuccess();
        } catch (err) {
            setLoading(false);
            setError(err?.response?.data?.error || 'Failed to create customer');
        }
    };

    return (
        <div className="entry-dashboard__container">
            <h2 className="entry-dashboard__title">Add New Customer</h2>
            <form className="entry-dashboard__form" onSubmit={handleSubmit}>
                <div className="entry-dashboard__field">
                    <label>GSTIN *</label>
                    <input
                        className="entry-dashboard__input"
                        value={form.gstin}
                        onChange={e => handleChange('gstin', e.target.value.toUpperCase())}
                        maxLength={15}
                        required
                        placeholder="Enter GSTIN"
                    />
                </div>
                <div className="entry-dashboard__field">
                    <label>Name *</label>
                    <input
                        className="entry-dashboard__input"
                        value={form.name}
                        onChange={e => handleChange('name', e.target.value)}
                        required
                        placeholder="Customer Name"
                    />
                </div>
                <div className="entry-dashboard__field">
                    <label>Address</label>
                    <textarea
                        className="entry-dashboard__textarea"
                        value={form.address}
                        onChange={e => handleChange('address', e.target.value)}
                        placeholder="Address"
                    />
                </div>
                <div className="entry-dashboard__field">
                    <label>Phone</label>
                    <input
                        className="entry-dashboard__input"
                        value={form.phone}
                        onChange={e => handleChange('phone', e.target.value)}
                        maxLength={15}
                        placeholder="Phone Number"
                    />
                </div>
                <div className="entry-dashboard__field">
                    <label>Email</label>
                    <input
                        className="entry-dashboard__input"
                        type="email"
                        value={form.email}
                        onChange={e => handleChange('email', e.target.value)}
                        placeholder="Email"
                    />
                </div>
                {error && <div style={{ color: 'red', marginBottom: 10 }}>{error}</div>}
                <button
                    type="submit"
                    className="entry-dashboard__submit-button"
                    disabled={loading}
                >
                    {loading ? 'Saving...' : 'Create Customer'}
                </button>
            </form>
        </div>
    );
};

export default NewCustomerForm;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/CreateCustomer.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/TaxSummary.jsx ---
import React, { useState, useEffect } from 'react';

const calculateHallmarkingTaxes = (hallmarkingCharges, cgstRate, sgstRate, igstRate) => {
    const taxable = parseFloat(hallmarkingCharges) || 0;
    const cgst = (taxable * (cgstRate || 0)) / 100;
    const sgst = (taxable * (sgstRate || 0)) / 100;
    const igst = (taxable * (igstRate || 0)) / 100;
    return {
        taxable,
        cgst,
        sgst,
        igst,
    };
};

const TaxSummary = ({
    calculations,
    cgstRate,
    sgstRate,
    igstRate,
    hallmarkingCharges,
    hallmarkingPieces,
    hallmarkingCgst,
    hallmarkingSgst,
    discount,
    onCgstChange,
    onSgstChange,
    onIgstChange,
    onHallmarkingChange,
    onPiecesChange,
    onHallmarkingCgstChange,
    onHallmarkingSgstChange,
    onDiscountChange,
}) => {

    const hallmarkingTax = calculateHallmarkingTaxes(hallmarkingCharges, cgstRate, sgstRate, igstRate);
    return (
        <div style={{ width: '400px', marginLeft: 'auto', marginTop: '30px' }}>
            <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                <tbody>
                    <tr>
                        <td style={{
                            padding: '8px',
                            fontWeight: 'bold',
                            backgroundColor: '#f5f5f5',
                            border: '1px solid #333',
                        }}>
                            Total Taxable
                        </td>
                        <td style={{
                            padding: '8px',
                            textAlign: 'right',
                            fontWeight: 'bold',
                            backgroundColor: '#f5f5f5',
                            border: '1px solid #333',
                        }}>
                            ₹{parseFloat(calculations.totalTaxable).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333' }}>
                            CGST&nbsp;
                            <input
                                type="number"
                                value={cgstRate}
                                min="0"
                                step="0.1"
                                onChange={e => onCgstChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 60, marginRight: 4 }}
                            />%
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹{parseFloat(calculations.cgstAmount).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333' }}>
                            SGST&nbsp;
                            <input
                                type="number"
                                value={sgstRate}
                                min="0"
                                step="0.1"
                                onChange={e => onSgstChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 60, marginRight: 4 }}
                            />%
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹{parseFloat(calculations.sgstAmount).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333' }}>
                            IGST&nbsp;
                            <input
                                type="number"
                                value={igstRate}
                                min="0"
                                step="0.1"
                                onChange={e => onIgstChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 60, marginRight: 4 }}
                            />%
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹{parseFloat(calculations.igstAmount).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>
                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333' }}>
                            Hallmarking Charges 9983 @ ₹
                            <input
                                type="number"
                                value={hallmarkingCharges}
                                min="0"
                                step="0.01"
                                onChange={e => onHallmarkingChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 80, marginRight: 4 }}
                            />
                            <br />
                            <small>
                                <input
                                    type="number"
                                    value={hallmarkingPieces}
                                    min="0"
                                    step="1"
                                    onChange={e => onPiecesChange(parseInt(e.target.value) || 0)}
                                    style={{ width: 60, marginRight: 4 }}
                                /> Pieces
                            </small>
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹{parseFloat(calculations.hallmarkingTotal).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                            CGST&nbsp;
                            <input
                                type="number"
                                value={hallmarkingCgst}
                                min="0"
                                step="0.1"
                                onChange={e => onHallmarkingCgstChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 60, marginRight: 4 }}
                            />%
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹{parseFloat(calculations.hallmarkingCgstAmt).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                            SGST&nbsp;
                            <input
                                type="number"
                                value={hallmarkingSgst}
                                min="0"
                                step="0.1"
                                onChange={e => onHallmarkingSgstChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 60, marginRight: 4 }}
                            />%
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹{parseFloat(calculations.hallmarkingSgstAmt).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                            IGST 0.0%
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹0.00
                        </td>
                    </tr>
                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333' }}>
                            Discount&nbsp;
                            <input
                                type="number"
                                value={discount}
                                min="0"
                                step="0.01"
                                onChange={e => onDiscountChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 80, marginRight: 4 }}
                            />
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            -₹{parseFloat(discount).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333' }}>Round off</td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            {parseFloat(calculations.roundOff) >= 0 ? '+' : ''}
                            ₹{calculations.roundOff}
                        </td>
                    </tr>

                    <tr>
                        <td style={{
                            padding: '12px',
                            fontWeight: 'bold',
                            fontSize: '18px',
                            backgroundColor: '#f0f0f0',
                            border: '2px solid #333',
                        }}>
                            Grand Total
                        </td>
                        <td style={{
                            padding: '12px',
                            textAlign: 'right',
                            fontWeight: 'bold',
                            fontSize: '18px',
                            backgroundColor: '#f0f0f0',
                            border: '2px solid #333',
                        }}>
                            ₹{parseFloat(calculations.grandTotal).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>
                </tbody>
            </table>

        </ div >
    );
};

export default TaxSummary;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/TaxSummary.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/CreateBill.jsx ---


import React, { useEffect, useState, useRef, useMemo } from 'react';
import { fetchAll, addRecord, insertUnifiedEntry } from '../api';
import { json } from 'react-router-dom';
import './CreateBill.css';

const CreateBill = () => {
  // --- Fixed store information ---
  const [cgstRate, setCgstRate] = useState(1.5);
  const [sgstRate, setSgstRate] = useState(1.5);
  const [igstRate, setIgstRate] = useState(0);
  const [hallmarkingCharges, setHallmarkingCharges] = useState(45.00);
  const [hallmarkingPieces, setHallmarkingPieces] = useState(40);
  const [hallmarkingCgst, setHallmarkingCgst] = useState(9.0);
  const [hallmarkingSgst, setHallmarkingSgst] = useState(9.0);
  const [discount, setDiscount] = useState(0);
  const [selectedRowIndex, setSelectedRowIndex] = useState(null);
  const [customerSearchTerm, setCustomerSearchTerm] = useState('');
  const [showCustomerDropdown, setShowCustomerDropdown] = useState(false);
  const storeInfo = {
    storeName: 'MDKJ JEWELLERS',
    storeAddress: 'Shop No. 45, Birhana Road\nKanpur, Uttar Pradesh 208001',
    phone: '+91 98765 12345',
    email: 'mdkjjewellers@gmail.com'
  };



  const [customers, setCustomers] = useState([]);
  useEffect(() => {
    const loadCustomers = async () => {
      try {
        const response = await fetchAll('customer_details', {
          page: 1,
          page_size: 100
        });
        setCustomers(response.data); // Assuming backend returns `{ records: [...] }`
      } catch (err) {
        console.error('Error loading customers:', err);
      } finally {
        ;
      }
    };

    loadCustomers();
  }, []);
  // --- Filter customers based on search term ---
  const filteredCustomers = useMemo(() => {
    if (!customerSearchTerm) return customers;
    return customers.filter(customer =>
      customer.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
      customer.phone.includes(customerSearchTerm)
    );
  }, [customerSearchTerm]);


  // --- State for bill header information ---
  const [billHeader, setBillHeader] = useState({
    billNumber: 'BILL-' + Date.now().toString().slice(-6),
    date: new Date().toISOString().split('T')[0],
    customerName: '',
    customerPhone: '',
    customerAddress: '',
    customerEmail: ''
  });



  // --- State for bill items ---
  const [items, setItems] = useState([
    {
      id: 1,
      description: 'New Gold Ornaments',
      hsnSac: '7113',
      purity: '18 CT',
      weight: 0,
      rate: 7200.00,
      amount: 0,
      isEditing: true
    },
    // {
    //   id: 2,
    //   description: 'New Gold Ornaments',
    //   hsnSac: '7113',
    //   purity: '18 CT',
    //   weight: 260.770,
    //   rate: 7200.00,
    //   amount: 1877544.00,
    //   isEditing: false
    // },
  ]);

  // --- State for charges and taxes ---

  // --- Ref for the bill preview ---
  const billRef = useRef();


  // --- Memoized calculations for totals ---
  const calculations = useMemo(() => {
    const totalTaxable = items.reduce((sum, item) => sum + item.amount, 0);

    const cgstAmount = (totalTaxable * cgstRate) / 100;
    const sgstAmount = (totalTaxable * sgstRate) / 100;
    const igstAmount = (totalTaxable * igstRate) / 100;

    const hallmarkingTotal = hallmarkingCharges * hallmarkingPieces;
    const hallmarkingCgstAmount = (hallmarkingTotal * hallmarkingCgst) / 100;
    const hallmarkingSgstAmount = (hallmarkingTotal * hallmarkingSgst) / 100;

    const subtotal = totalTaxable + cgstAmount + sgstAmount + igstAmount + hallmarkingTotal + hallmarkingCgstAmount + hallmarkingSgstAmount;
    const roundOff = Math.round(subtotal) - subtotal;
    const grandTotal = Math.round(subtotal);

    return {
      totalTaxable: totalTaxable.toFixed(2),
      cgstAmount: cgstAmount.toFixed(2),
      sgstAmount: sgstAmount.toFixed(2),
      igstAmount: igstAmount.toFixed(2),
      hallmarkingTotal: hallmarkingTotal.toFixed(2),
      hallmarkingCgstAmount: hallmarkingCgstAmount.toFixed(2),
      hallmarkingSgstAmount: hallmarkingSgstAmount.toFixed(2),
      roundOff: roundOff.toFixed(2),
      grandTotal: grandTotal.toFixed(2),
      grandTotalWords: convertToWords(grandTotal)
    };
  }, [items, cgstRate, sgstRate, igstRate, hallmarkingCharges, hallmarkingPieces, hallmarkingCgst, hallmarkingSgst]);

  // --- Handle customer selection ---
  const handleCustomerSelect = (customer) => {
    setBillHeader(prev => ({
      ...prev,
      customerName: customer.name,
      customerPhone: customer.phone,
      customerAddress: customer.address,
      customerEmail: customer.email,
      customerGstin: customer.gstin || '' // Assuming customer object has gstin field
    }));
    setCustomerSearchTerm(customer.name);
    setShowCustomerDropdown(false);
  };

  // --- Handle customer search ---
  const handleCustomerSearch = (value) => {
    setCustomerSearchTerm(value);
    setBillHeader(prev => ({ ...prev, customerName: value }));
    setShowCustomerDropdown(value.length > 0);
  };

  // --- Handle changes to bill header fields ---
  const handleHeaderChange = (field, value) => {
    setBillHeader(prev => ({ ...prev, [field]: value }));
  };

  // --- Handle changes to an item field ---
  const handleItemChange = (rowIndex, field, value) => {
    const newItems = [...items];
    if (field === 'weight' || field === 'rate') {
      const numValue = parseFloat(value) || 0;
      newItems[rowIndex][field] = numValue;
      // Auto-calculate amount when weight or rate changes
      if (field === 'weight' || field === 'rate') {
        newItems[rowIndex].amount = newItems[rowIndex].weight * newItems[rowIndex].rate;
      }
    } else if (field === 'amount') {
      newItems[rowIndex][field] = parseFloat(value) || 0;
    } else {
      newItems[rowIndex][field] = value;
    }
    setItems(newItems);
  };

  // --- Toggle edit mode for an item row ---
  const handleEditClick = (rowIndex) => {
    const newItems = [...items];
    newItems[rowIndex].isEditing = !newItems[rowIndex].isEditing;
    setItems(newItems);
  };

  // --- Add a new item row ---
  const handleAddRow = () => {
    const newRowIndex = selectedRowIndex !== null ? selectedRowIndex + 1 : items.length;
    const newItems = [...items];
    newItems.splice(newRowIndex, 0, {
      id: Date.now(),
      description: '',
      hsnSac: '7113',
      purity: '18 CT',
      weight: 0,
      rate: 7200.00,
      amount: 0,
      isEditing: true
    });
    setItems(newItems);
    setSelectedRowIndex(newRowIndex);
  };

  // --- Delete an item row ---
  const handleDeleteRow = (rowIndex) => {
    if (items.length > 1) {
      const newItems = items.filter((_, index) => index !== rowIndex);
      setItems(newItems);
    }
  };

  // --- Keyboard navigation ---
  const handleKeyDown = (event, rowIndex, field) => {
    if (event.key === 'Enter') {
      handleEditClick(rowIndex);
    } else if (event.key === 'Tab') {
      event.preventDefault();
      const fields = ['description', 'hsnSac', 'purity', 'weight', 'rate', 'amount'];
      const currentFieldIndex = fields.indexOf(field);

      if (currentFieldIndex < fields.length - 1) {
        const nextField = fields[currentFieldIndex + 1];
        const nextInput = document.querySelector(`input[data-row="${rowIndex}"][data-field="${nextField}"]`);
        if (nextInput) nextInput.focus();
      } else if (rowIndex < items.length - 1) {
        const nextInput = document.querySelector(`input[data-row="${rowIndex + 1}"][data-field="description"]`);
        if (nextInput) nextInput.focus();
      }
    }
  };

  // --- Print function ---
  const handlePrint = () => {
    const printContent = billRef.current.innerHTML;
    const printWindow = window.open('', '', 'height=600,width=800');

    printWindow.document.write(`
      <html>
        <head>
          <title>Print Bill - ${billHeader.billNumber}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .bill-header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }
            .bill-info { display: flex; justify-content: space-between; margin-bottom: 20px; }
            .customer-info { text-align: left; }
            .bill-details { text-align: right; }
            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f5f5f5; font-weight: bold; }
            .text-right { text-align: right; }
            .text-center { text-align: center; }
            .totals { margin-top: 20px; }
            .total-row { font-weight: bold; background-color: #f0f0f0; }
            .print-hide { display: none; }
            .grand-total { font-size: 18px; font-weight: bold; }
          </style>
        </head>
        <body>${printContent}</body>
      </html>
    `);

    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
  };

  // Styles
  const containerStyle = {
    maxWidth: '1400px',
    margin: '0 auto',
    padding: '20px',
    fontFamily: 'Arial, sans-serif',
    // backgroundColor: '#f8f9fa'
  };

  const headerSectionStyle = {
    backgroundColor: 'white',
    padding: '30px',
    borderRadius: '8px',
    marginBottom: '20px',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
  };

  const formGridStyle = {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
    gap: '20px'
  };

  const labelStyle = {
    display: 'block',
    marginBottom: '5px',
    fontWeight: 'bold',
    color: '#333'
  };

  const inputStyle = {
    width: '100%',
    padding: '8px 12px',
    border: '1px solid #ddd',
    borderRadius: '4px',
    fontSize: '14px'
  };

  const customerDropdownStyle = {
    position: 'absolute',
    top: '100%',
    left: 0,
    right: 0,
    backgroundColor: 'white',
    border: '1px solid #ddd',
    borderTop: 'none',
    borderRadius: '0 0 4px 4px',
    maxHeight: '200px',
    overflowY: 'auto',
    zIndex: 1000
  };

  const customerOptionStyle = {
    padding: '10px',
    cursor: 'pointer',
    borderBottom: '1px solid #eee'
  };

  const billPreviewStyle = {
    // backgroundColor: 'white',
    padding: '40px',
    borderRadius: '8px',
    marginBottom: '20px',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
  };

  const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
    margin: '20px 0'
  };

  const thStyle = {
    border: '1px solid #ddd',
    padding: '12px',
    backgroundColor: '#f5f5f5',
    fontWeight: 'bold',
    textAlign: 'left'
  };

  const tdStyle = {
    border: '1px solid #ddd',
    padding: '8px'
  };


  const buttonStyle = {
    padding: '8px 16px',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '14px'
  };

  const editButtonStyle = {
    ...buttonStyle,
    backgroundColor: '#007bff',
    color: 'white',
    marginRight: '5px'
  };

  const saveButtonStyle = {
    ...buttonStyle,
    backgroundColor: '#28a745',
    color: 'white',
    marginRight: '5px'
  };

  const deleteButtonStyle = {
    ...buttonStyle,
    backgroundColor: '#dc3545',
    color: 'white'
  };

  return (
    <div style={containerStyle}>
      {/* --- Customer Details Section --- */}
      // --- Customer Details Section ---
      <div className="create-bill__header-section">
        <h2 className="create-bill__header-title">Customer Information</h2>
        <div className="create-bill__form-grid">
          {/* Customer Name with Search */}
          <div className="create-bill__form-group create-bill__form-group--relative">
            <label className="create-bill__label">Customer Name:</label>
            <input
              type="text"
              className="create-bill__input"
              value={customerSearchTerm}
              onChange={(e) => handleCustomerSearch(e.target.value)}
              onFocus={() => setShowCustomerDropdown(customerSearchTerm.length > 0)}
              placeholder="Search or enter customer name"
            />
            {showCustomerDropdown && (
              <div className="create-bill__dropdown">
                {filteredCustomers.map((customer) => (
                  <div
                    key={customer.id}
                    className="create-bill__dropdown-item"
                    onClick={() => handleCustomerSelect(customer)}
                    onMouseEnter={(e) => e.target.classList.add('create-bill__dropdown-item--hover')}
                    onMouseLeave={(e) => e.target.classList.remove('create-bill__dropdown-item--hover')}
                  >
                    <strong>{customer.name}</strong><br />
                    <small>{customer.phone}</small>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Customer Phone */}
          <div className="create-bill__form-group">
            <label className="create-bill__label">Customer Phone:</label>
            <input
              type="text"
              className="create-bill__input"
              value={billHeader.customerPhone}
              onChange={(e) => handleHeaderChange('customerPhone', e.target.value)}
            />
          </div>

          {/* Customer GSTIN */}
          <div className="create-bill__form-group">
            <label className="create-bill__label">Customer GSTIN:</label>
            <input
              type="text"
              className="create-bill__input"
              value={billHeader.customerGstin || ''}
              onChange={(e) => handleHeaderChange('customerGstin', e.target.value)}
            />
          </div>

          {/* Customer Address */}
          <div className="create-bill__form-group">
            <label className="create-bill__label">Customer Address:</label>
            <textarea
              className="create-bill__textarea"
              value={billHeader.customerAddress}
              onChange={(e) => handleHeaderChange('customerAddress', e.target.value)}
            />
          </div>

          {/* Customer Email */}
          <div className="create-bill__form-group">
            <label className="create-bill__label">Customer Email:</label>
            <input
              type="email"
              className="create-bill__input"
              value={billHeader.customerEmail}
              onChange={(e) => handleHeaderChange('customerEmail', e.target.value)}
            />
          </div>

          {/* Bill Date */}
          <div className="create-bill__form-group">
            <label className="create-bill__label">Bill Date:</label>
            <input
              type="date"
              className="create-bill__input"
              value={billHeader.date}
              onChange={(e) => handleHeaderChange('date', e.target.value)}
            />
          </div>
        </div>
      </div>

      {/* --- Bill Preview Section --- */}
      <div ref={billRef} style={billPreviewStyle}>
        {/* Bill Header */}
        <div style={{ textAlign: 'center', marginBottom: '40px', borderBottom: '2px solid #333', paddingBottom: '20px' }}>
          <h1 style={{ fontSize: '36px', margin: '0 0 10px 0', color: '#333' }}>INVOICE</h1>
          <h2 style={{ fontSize: '24px', margin: '0 0 15px 0', color: '#333' }}>{storeInfo.storeName}</h2>
          <div style={{ color: '#666', lineHeight: '1.4' }}>
            {storeInfo.storeAddress.split('\n').map((line, i) => (
              <p key={i} style={{ margin: '5px 0' }}>{line}</p>
            ))}
          </div>
          <p style={{ color: '#666', margin: '10px 0 0 0' }}>
            Phone: {storeInfo.phone} | Email: {storeInfo.email}
          </p>
        </div>

        {/* Bill Info */}
        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '30px' }}>
          <div>
            <h3 style={{ margin: '0 0 10px 0', fontWeight: 'bold' }}>Bill To:</h3>
            <p style={{ margin: '5px 0', fontSize: '16px' }}>
              <strong>{billHeader.customerName || 'Customer Name'}</strong>
            </p>
            {billHeader.customerPhone && (
              <p style={{ margin: '5px 0', fontSize: '14px' }}>
                Phone: {billHeader.customerPhone}
              </p>
            )}
            {billHeader.customerGstin && (
              <p style={{ margin: '5px 0', fontSize: '14px' }}>
                GSTIN: {billHeader.customerGstin}
              </p>
            )}
            {billHeader.customerAddress && (
              <p style={{ margin: '5px 0', fontSize: '14px', whiteSpace: 'pre-line' }}>
                {billHeader.customerAddress}
              </p>
            )}
            {billHeader.customerEmail && (
              <p style={{ margin: '5px 0', fontSize: '14px' }}>
                Email: {billHeader.customerEmail}
              </p>
            )}
          </div>
          <div style={{ textAlign: 'right' }}>
            <p style={{ margin: '5px 0' }}><strong>Bill #:</strong> {billHeader.billNumber}</p>
            <p style={{ margin: '5px 0' }}><strong>Date:</strong> {billHeader.date}</p>
          </div>
        </div>
        <div>
          {/* Items Table */}
          <table className="create-bill__table">
            <thead className="create-bill__table-head">
              <tr className="create-bill__table-row create-bill__table-row--header">
                <th className="create-bill__table-cell create-bill__table-cell--header create-bill__table-cell--center">S.No</th>
                <th className="create-bill__table-cell create-bill__table-cell--header">Description</th>
                <th className="create-bill__table-cell create-bill__table-cell--header create-bill__table-cell--center">HSN/SAC</th>
                <th className="create-bill__table-cell create-bill__table-cell--header create-bill__table-cell--center">Purity</th>
                <th className="create-bill__table-cell create-bill__table-cell--header create-bill__table-cell--center">Weight (in gms)</th>
                <th className="create-bill__table-cell create-bill__table-cell--header create-bill__table-cell--right">Rate (₹)</th>
                <th className="create-bill__table-cell create-bill__table-cell--header create-bill__table-cell--right">Amount (₹)</th>
                <th className="create-bill__table-cell create-bill__table-cell--header create-bill__table-cell--center print-hide">Actions</th>
              </tr>
            </thead>
            <tbody className="create-bill__table-body">
              {items.map((item, rowIndex) => (
                <tr
                  key={item.id}
                  className={`create-bill__table-row ${selectedRowIndex === rowIndex ? 'create-bill__table-row--highlight' : ''}`}
                  onMouseEnter={() => setSelectedRowIndex(rowIndex)}
                  onMouseLeave={() => setSelectedRowIndex(null)}
                >
                  <td className="create-bill__table-cell create-bill__table-cell--center create-bill__table-cell--bold">
                    {rowIndex + 1}
                  </td>
                  <td className="create-bill__table-cell">
                    {item.isEditing ? (
                      <input
                        type="text"
                        className="create-bill__input"
                        value={item.description}
                        data-row={rowIndex}
                        data-field="description"
                        onChange={(e) => handleItemChange(rowIndex, 'description', e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, 'description')}
                        autoFocus
                      />
                    ) : (
                      <span
                        className="create-bill__editable-text"
                        onClick={() => handleEditClick(rowIndex)}
                      >
                        {item.description || 'Click to edit'}
                      </span>
                    )}
                  </td>
                  <td className="create-bill__table-cell create-bill__table-cell--center">
                    {item.isEditing ? (
                      <input
                        type="text"
                        className="create-bill__input create-bill__input--small"
                        value={item.hsnSac}
                        data-row={rowIndex}
                        data-field="hsnSac"
                        onChange={(e) => handleItemChange(rowIndex, 'hsnSac', e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, 'hsnSac')}
                      />
                    ) : (
                      <span
                        className="create-bill__editable-text"
                        onClick={() => handleEditClick(rowIndex)}
                      >
                        {item.hsnSac}
                      </span>
                    )}
                  </td>
                  <td className="create-bill__table-cell create-bill__table-cell--center">
                    {item.isEditing ? (
                      <input
                        type="text"
                        className="create-bill__input create-bill__input--small"
                        value={item.purity}
                        data-row={rowIndex}
                        data-field="purity"
                        onChange={(e) => handleItemChange(rowIndex, 'purity', e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, 'purity')}
                      />
                    ) : (
                      <span
                        className="create-bill__editable-text"
                        onClick={() => handleEditClick(rowIndex)}
                      >
                        {item.purity}
                      </span>
                    )}
                  </td>
                  <td className="create-bill__table-cell create-bill__table-cell--center">
                    {item.isEditing ? (
                      <input
                        type="number"
                        className="create-bill__input create-bill__input--small"
                        value={item.weight}
                        data-row={rowIndex}
                        data-field="weight"
                        onChange={(e) => handleItemChange(rowIndex, 'weight', e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, 'weight')}
                        min="0"
                        step="0.001"
                      />
                    ) : (
                      <span
                        className="create-bill__editable-text"
                        onClick={() => handleEditClick(rowIndex)}
                      >
                        {item.weight.toFixed(3)}
                      </span>
                    )}
                  </td>
                  <td className="create-bill__table-cell create-bill__table-cell--right">
                    {item.isEditing ? (
                      <input
                        type="number"
                        className="create-bill__input create-bill__input--small"
                        value={item.rate}
                        data-row={rowIndex}
                        data-field="rate"
                        onChange={(e) => handleItemChange(rowIndex, 'rate', e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, 'rate')}
                        min="0"
                        step="0.01"
                      />
                    ) : (
                      <span
                        className="create-bill__editable-text"
                        onClick={() => handleEditClick(rowIndex)}
                      >
                        ₹{item.rate.toFixed(2)}
                      </span>
                    )}
                  </td>
                  <td className="create-bill__table-cell create-bill__table-cell--right">
                    {item.isEditing ? (
                      <input
                        type="number"
                        className="create-bill__input create-bill__input--small"
                        value={item.amount}
                        data-row={rowIndex}
                        data-field="amount"
                        onChange={(e) => handleItemChange(rowIndex, 'amount', e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, 'amount')}
                        min="0"
                        step="0.01"
                      />
                    ) : (
                      <span
                        className="create-bill__editable-text create-bill__editable-text--bold"
                        onClick={() => handleEditClick(rowIndex)}
                      >
                        ₹{item.amount.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                      </span>
                    )}
                  </td>
                  <td className="create-bill__table-cell create-bill__table-cell--center print-hide">
                    <button
                      className={`create-bill__button ${item.isEditing ? 'create-bill__button--save' : 'create-bill__button--edit'}`}
                      onClick={() => handleEditClick(rowIndex)}
                    >
                      {item.isEditing ? 'Save' : 'Edit'}
                    </button>
                    <button
                      className="create-bill__button create-bill__button--delete"
                      onClick={() => handleDeleteRow(rowIndex)}
                    >
                      Del
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>


          <div className='controlStyle'>
            <button
              style={{ ...buttonStyle, backgroundColor: '#28a745', color: 'white', fontSize: '16px', padding: '12px 24px' }}
              onClick={handleAddRow}
              className="create-bill__button create-bill__button--add print-hide"
            >
              Add Item
            </button>
          </div>

          {/* Totals Section */}
          <div style={{ width: '400px', marginLeft: 'auto', marginTop: '30px' }}>
            <table style={{ width: '100%', borderCollapse: 'collapse' }}>
              <tbody>
                <tr>
                  <td style={{ padding: '8px', fontWeight: 'bold', backgroundColor: '#f5f5f5', border: '1px solid #333' }}>
                    Total Taxable
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', fontWeight: 'bold', backgroundColor: '#f5f5f5', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.totalTaxable).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333' }}>
                    CGST {cgstRate}%
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.cgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333' }}>
                    SGST {sgstRate}%
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.sgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333' }}>
                    IGST {igstRate}%
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.igstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333' }}>
                    Hallmarking Charges 9983 @ ₹{hallmarkingCharges.toFixed(2)}<br />
                    <small>
                      Pieces:
                      <input
                        type="number"
                        style={{ ...inputStyle, width: '60px', marginLeft: '10px' }}
                        value={hallmarkingPieces}
                        onChange={(e) => setHallmarkingPieces(parseInt(e.target.value) || 0)}
                        min="0"
                        step="1"
                      />
                    </small>
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.hallmarkingTotal).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                    CGST {hallmarkingCgst}%
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.hallmarkingCgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                    SGST {hallmarkingSgst}%
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.hallmarkingSgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                    IGST 0.0%
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹0.00
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333' }}>
                    Round off
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    {parseFloat(calculations.roundOff) >= 0 ? '+' : ''}₹{calculations.roundOff}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '12px', fontWeight: 'bold', fontSize: '18px', backgroundColor: '#f0f0f0', border: '2px solid #333' }}>
                    Grand Total
                  </td>
                  <td style={{ padding: '12px', textAlign: 'right', fontWeight: 'bold', fontSize: '18px', backgroundColor: '#f0f0f0', border: '2px solid #333' }}>
                    ₹{parseFloat(calculations.grandTotal).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>

          {/* Amount in Words */}
          <div style={{ marginTop: '30px', padding: '15px', backgroundColor: '#f9f9f9', border: '1px solid #ddd', borderRadius: '4px' }}>
            <strong>Amount in word(s):</strong><br />
            <span style={{ fontSize: '16px', fontWeight: 'bold', color: '#333' }}>
              {calculations.grandTotalWords}
            </span>
          </div>

          {/* Thank you message */}
          <div style={{ textAlign: 'center', marginTop: '40px', color: '#666' }}>
            <p style={{ margin: 0, fontSize: '16px' }}>Thank you for choosing MDKJ Jewellers!</p>
          </div>
        </div>

        {/* Controls */}

        <div className='print-hide controlStyle'>
          <div style={{ alignItems: 'center', gap: '8px' }} >
            <label style={{ fontSize: '14px', fontWeight: 'bold' }}>CGST (%):</label>
            <input
              type="number"
              style={{ ...inputStyle, width: '80px' }}
              value={cgstRate}
              onChange={(e) => setCgstRate(parseFloat(e.target.value) || 0)}
              min="0"
              step="0.1"
            />
          </div>

          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            <label style={{ fontSize: '14px', fontWeight: 'bold' }}>SGST (%):</label>
            <input
              type="number"
              style={{ ...inputStyle, width: '80px' }}
              value={sgstRate}
              onChange={(e) => setSgstRate(parseFloat(e.target.value) || 0)}
              min="0"
              step="0.1"
            />
          </div>

          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            <label style={{ fontSize: '14px', fontWeight: 'bold' }}>IGST (%):</label>
            <input
              type="number"
              style={{ ...inputStyle, width: '80px' }}
              value={igstRate}
              onChange={(e) => setIgstRate(parseFloat(e.target.value) || 0)}
              min="0"
              step="0.1"
            />
          </div>

          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            <label style={{ fontSize: '14px', fontWeight: 'bold' }}>Hallmark Rate (₹):</label>
            <input
              type="number"
              style={{ ...inputStyle, width: '80px' }}
              value={hallmarkingCharges}
              onChange={(e) => setHallmarkingCharges(parseFloat(e.target.value) || 0)}
              min="0"
              step="0.01"
            />
          </div>

          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            <label style={{ fontSize: '14px', fontWeight: 'bold' }}>Pieces:</label>
            <input
              type="number"
              style={{ ...inputStyle, width: '80px' }}
              value={hallmarkingPieces}
              onChange={(e) => setHallmarkingPieces(parseInt(e.target.value) || 0)}
              min="0"
              step="1"
            />
          </div>
          <div style={{ display: 'flex', alignSelf: "center", alignItems: 'right', gap: '8px' }}
          >
            <button
              style={{ ...buttonStyle, backgroundColor: '#ffc107', color: 'black', fontSize: '16px', padding: '12px 24px' }}
              onClick={async () => {
                // Validation checks
                if (!billHeader.customerName || !billHeader.customerPhone || !billHeader.customerAddress) {
                  alert('Please fill all mandatory customer details.');
                  return;
                }

                const customerExists = customers.some(customer => customer.gstin === billHeader.customerGstin);
                if (!customerExists && billHeader.customerGstin) {
                  const confirmCreate = window.confirm(
                    'The GSTIN provided does not exist in the database. Do you want to create a new customer?'
                  );
                  if (!confirmCreate) return;

                  try {
                    await addRecord('customer_details', {
                      name: billHeader.customerName,
                      phone: billHeader.customerPhone,
                      address: billHeader.customerAddress,
                      email: billHeader.customerEmail,
                      gstin: billHeader.customerGstin
                    });
                    alert('New customer created successfully.');
                  } catch (err) {
                    console.error('Error creating customer:', err);
                    alert('Failed to create new customer.');
                    return;
                  }
                }

                // Prepare bill data
                const billData = items.map(item => ({
                  entry_type: 'bill',
                  gstin: billHeader.customerGstin || null,
                  dated: billHeader.date,
                  bank: false, // Assuming bank is false by default
                  bill_no: billHeader.billNumber || 'N/A',
                  purity: item.purity || 'N/A',
                  wt: item.weight,
                  rate: item.rate,
                  cgst: ((item.amount * cgstRate) / 100).toFixed(2),
                  sgst: ((item.amount * sgstRate) / 100).toFixed(2),
                  igst: ((item.amount * igstRate) / 100).toFixed(2),
                  weight: item.weight,
                  cash_amount: item.amount.toFixed(2),
                  is_debit: true
                }));

                try {
                  console.log(billData);
                  await insertUnifiedEntry(billData[0]);
                  alert('Bill submitted successfully.');
                } catch (err) {
                  console.error('Error submitting bill:', err);
                  alert('Failed to submit bill.');
                }
              }}
            >
              Submit Bill
            </button>
            <button
              style={{ ...buttonStyle, backgroundColor: '#007bff', color: 'white', fontSize: '16px', padding: '12px 24px' }}
              onClick={handlePrint}
            >
              Print Bill
            </button>
          </div>
        </div>
      </div>

      {/* Usage Instructions */}
      <div style={{
        marginTop: '20px',
        padding: '20px',
        backgroundColor: '#e3f2fd',
        borderRadius: '8px',
        border: '1px solid #2196f3'
      }}>
        <h3 style={{ margin: '0 0 15px 0', color: '#1976d2' }}>How to use:</h3>
        <ul style={{ margin: 0, paddingLeft: '20px', color: '#333', lineHeight: '1.6' }}>
          <li>Search for existing customers or enter new customer details manually</li>
          <li>Click on customer name in dropdown to auto-fill their information</li>
          <li>Click on any item cell to edit it directly</li>
          <li>Weight and Rate will auto-calculate Amount when changed</li>
          <li>Use Tab to move between fields, Enter to save</li>
          <li>Adjust tax rates and hallmarking charges as needed</li>
          <li>Print the final bill when ready</li>
        </ul>
      </div>
    </div >
  );
};

export default CreateBill;


// ------------- END OF FILE -------------


// --- Convert number to words ---
const convertToWords = (num) => {
  const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
  const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];

  const convertHundreds = (n) => {
    let result = '';
    if (n > 99) {
      result += ones[Math.floor(n / 100)] + ' Hundred ';
      n %= 100;
    }
    if (n > 19) {
      result += tens[Math.floor(n / 10)] + ' ';
      n %= 10;
    }
    if (n > 0) {
      result += ones[n] + ' ';
    }
    return result;
  };

  if (num === 0) return 'Zero';

  const crore = Math.floor(num / 10000000);
  const lakh = Math.floor((num % 10000000) / 100000);
  const thousand = Math.floor((num % 100000) / 1000);
  const remainder = num % 1000;

  let result = '';
  if (crore > 0) result += convertHundreds(crore) + 'Crore ';
  if (lakh > 0) result += convertHundreds(lakh) + 'Lakh(s) ';
  if (thousand > 0) result += convertHundreds(thousand) + 'Thousand ';
  if (remainder > 0) result += convertHundreds(remainder);

  return 'Rupees ' + result.trim() + ' Only';
};
// const dummyCustomers = [
//   {
//     id: 1,
//     name: 'Rajesh Kumar',
//     phone: '+91 98765 43210',
//     address: '123 MG Road\nKanpur, UP 208001',
//     email: 'rajesh.kumar@email.com'
//   },
//   {
//     id: 2,
//     name: 'Priya Sharma',
//     phone: '+91 87654 32109',
//     address: '456 Civil Lines\nKanpur, UP 208002',
//     email: 'priya.sharma@email.com'
//   },
//   {
//     id: 3,
//     name: 'Amit Gupta',
//     phone: '+91 76543 21098',
//     address: '789 Swaroop Nagar\nKanpur, UP 208003',
//     email: 'amit.gupta@email.com'
//   },
//   {
//     id: 4,
//     name: 'Sunita Verma',
//     phone: '+91 65432 10987',
//     address: '321 Kalyanpur\nKanpur, UP 208004',
//     email: 'sunita.verma@email.com'
//   },
//   {
//     id: 5,
//     name: 'Vikram Singh',
//     phone: '+91 54321 09876',
//     address: '654 Govind Nagar\nKanpur, UP 208005',
//     email: 'vikram.singh@email.com'
//   }
// ];



// ------------- SCROLL UP TO SEE THE END OF FILE ------------- 
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/CreateBill.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ViewTable.jsx ---
import React, { useEffect, useState } from 'react';
import { fetchAll } from '../api';

export default function ViewTable({ table }) {
    const [records, setRecords] = useState([]);

    useEffect(() => {
        const load = async () => {
            try {
                const res = await fetchAll(table);
                setRecords(res.data);
            } catch (err) {
                console.error('Failed to fetch records:', err);
            }
        };
        load();
    }, [table]);

    return (
        <div>
            <h2>{table.toUpperCase()} Records</h2>
            <table border="1">
                <thead>
                    <tr>{records[0] && Object.keys(records[0]).map(col => <th key={col}>{col}</th>)}</tr>
                </thead>
                <tbody>
                    {records.map((row, i) => (
                        <tr key={i}>
                            {Object.values(row).map((val, j) => <td key={j}>{val?.toString()}</td>)}
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ViewTable.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Bills.jsx ---
/**
 * Bills.js
 * 
 * This component renders a Bills management page with the following features:
 * - Displays a table of bills with columns for Bill Number, Amount, and Date.
 * - Allows inline editing of bill rows and saving changes.
 * - Supports adding new rows.
 * - Provides filtering options for each column, including date range filtering.
 * - Enables printing of individual bill rows.
 * - Keyboard navigation and accessibility for editing cells.
 * - Uses Bootstrap for styling.
 */

import React, { useState, useMemo, useRef } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import './Bills.css'; // Custom CSS for styling

const Bills = () => {
  // State for table data, including editing state for each row
  const [data, setData] = useState([
    { id: 1, billNumber: 12345, amount: '$150', date: '2024-01-06', isEditing: false },
    { id: 2, billNumber: 67890, amount: '$200', date: '2024-01-07', isEditing: false },
    // Add more rows as needed
  ]);

  // State for the currently selected row index (for highlighting/navigation)
  const [selectedRowIndex, setSelectedRowIndex] = useState(null);

  // State for filter values for each column
  const [filters, setFilters] = useState({
    billNumber: '',
    amount: '',
    dateStart: '',
    dateEnd: '',
  });

  // Table column definitions
  const columns = [
    { key: 'billNumber', label: 'Bill Number' },
    { key: 'amount', label: 'Amount' },
    { key: 'date', label: 'Date' },
    // Add more columns as needed
  ];

  /**
   * Updates the value of a cell in the table.
   * @param {number} rowIndex - Index of the row to update.
   * @param {string} columnKey - Key of the column to update.
   * @param {string} value - New value for the cell.
   */
  const handleCellChange = (rowIndex, columnKey, value) => {
    const newData = [...data];
    newData[rowIndex][columnKey] = value;
    setData(newData);
  };

  /**
   * Toggles the editing state of a row.
   * @param {number} rowIndex - Index of the row to edit/save.
   */
  const handleEditClick = (rowIndex) => {
    const newData = [...data];
    newData[rowIndex].isEditing = !newData[rowIndex].isEditing;
    setData(newData);
  };

  /**
   * Sets the currently hovered row index for highlighting.
   * @param {number} rowIndex - Index of the hovered row.
   */
  const handleRowHover = (rowIndex) => {
    setSelectedRowIndex(rowIndex);
  };

  /**
   * Handles keyboard navigation and editing in table cells.
   * @param {object} event - Keyboard event.
   * @param {number} rowIndex - Index of the current row.
   * @param {string} columnKey - Key of the current column.
   */
  const handleKeyDown = (event, rowIndex, columnKey) => {
    if (event.key === 'Enter') {
      handleEditClick(rowIndex);
    } else if (event.key === 'ArrowUp' && rowIndex > 0) {
      setSelectedRowIndex(rowIndex - 1);
    } else if (event.key === 'ArrowDown' && rowIndex < data.length - 1) {
      setSelectedRowIndex(rowIndex + 1);
    } else if (event.key === 'ArrowLeft' && columnKey !== 'billNumber') {
      handleEditClick(rowIndex); // Edit the cell when pressing left arrow
    } else if (event.key === 'ArrowRight' && columnKey !== 'date') {
      handleEditClick(rowIndex); // Edit the cell when pressing right arrow
    }
  };

  /**
   * Adds a new row to the table, placing it after the selected row if any.
   */
  const handleAddRow = () => {
    const newRowIndex = selectedRowIndex !== null ? selectedRowIndex + 1 : data.length;
    const newData = [...data];
    newData.splice(newRowIndex, 0, { id: Date.now(), billNumber: '', amount: '', date: '', isEditing: true });
    setData(newData);
    setSelectedRowIndex(newRowIndex);
  };

  /**
   * Saves all rows by setting their editing state to false.
   */
  const handleSaveAll = () => {
    const newData = data.map(row => ({ ...row, isEditing: false }));
    setData(newData);
  };

  /**
   * Opens a print window for the selected bill row.
   * @param {object} row - The bill row to print.
   */
  const handlePrintRow = (row) => {
    // Customize this function to handle the print logic for the row
    const printWindow = window.open('', '', 'height=600,width=800');
    const billContent = `<div>
      <h1>Bill Number: ${row.billNumber}</h1>
      <p>Amount: ${row.amount}</p>
      <p>Date: ${row.date}</p>
    </div>`;

    printWindow.document.write('<html><head><title>Print Bill</title></head><body>');
    printWindow.document.write(billContent);
    printWindow.document.write('</body></html>');
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
  };

  /**
   * Updates the filter value for a specific column or date range.
   * @param {string} filterKey - The key of the filter to update.
   * @param {string} value - The new filter value.
   */
  const handleFilterChange = (filterKey, value) => {
    setFilters({
      ...filters,
      [filterKey]: value,
    });
  };

  /**
   * Returns the filtered data based on the current filter values.
   */
  const filteredData = useMemo(() => {
    return data.filter(row => {
      return columns.every(column => {
        const filterValue = filters[column.key];
        if (!filterValue) {
          return true; // No filter applied for this column
        }

        if (column.key === 'date') {
          // Check if the date falls within the specified range
          const startDate = new Date(filters.dateStart);
          const endDate = new Date(filters.dateEnd);

          const rowDate = new Date(row[column.key]);

          return rowDate >= startDate && rowDate <= endDate;
        }

        return String(row[column.key]).toLowerCase().includes(filterValue.toLowerCase());
      });
    });
  }, [data, filters, columns]);

  return (
    <div className="container mt-4">
      <h1 className="mb-4">Bills Page</h1>

      <div className="mb-2">
        {columns.map(column => (
          <div key={column.key} className="mb-2">
            <label className="mr-2">{column.label}:</label>
            {column.key === 'date' ? (
              <div className="d-flex">
                <input
                  type="date"
                  className="form-control mr-2"
                  placeholder="Start Date"
                  value={filters.dateStart || ''}
                  onChange={(e) => handleFilterChange('dateStart', e.target.value)}
                />
                <input
                  type="date"
                  className="form-control"
                  placeholder="End Date"
                  value={filters.dateEnd || ''}
                  onChange={(e) => handleFilterChange('dateEnd', e.target.value)}
                />
              </div>
            ) : (
              <input
                type="text"
                className="form-control"
                value={filters[column.key] || ''}
                onChange={(e) => handleFilterChange(column.key, e.target.value)}
              />
            )}
          </div>
        ))}
      </div>

      <table className="table table-bordered">
        <thead className="thead-dark">
          <tr>
            {columns.map((column) => (
              <th key={column.key}>{column.label}</th>
            ))}
            <th>Edit</th>
            <th>Print</th>
          </tr>
        </thead>
        <tbody>
          {filteredData.map((row, rowIndex) => (
            <tr
              key={row.id}
              className={selectedRowIndex === rowIndex ? 'table-active' : ''}
              onMouseEnter={() => handleRowHover(rowIndex)}
            >
              {columns.map((column) => (
                <td key={column.key}>
                  {row.isEditing ? (
                    column.key === 'date' ? (
                      <input
                        type="date"
                        className="form-control"
                        value={row[column.key]}
                        onChange={(e) => handleCellChange(rowIndex, column.key, e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, column.key)}
                      />
                    ) : (
                      <input
                        type="text"
                        className="form-control"
                        value={row[column.key]}
                        onChange={(e) => handleCellChange(rowIndex, column.key, e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, column.key)}
                      />
                    )
                  ) : (
                    row[column.key]
                  )}
                </td>
              ))}
              <td>
                <button
                  className={`btn ${row.isEditing ? 'btn-success' : 'btn-primary'}`}
                  onClick={() => handleEditClick(rowIndex)}
                >
                  {row.isEditing ? 'Save' : 'Edit'}
                </button>
              </td>
              <td>
                <button className="btn btn-info" onClick={() => handlePrintRow(row)}>
                  Print
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <button className="btn btn-success" onClick={handleAddRow}>
        Add Row
      </button>
      <button className="btn btn-primary ml-2" onClick={handleSaveAll}>
        Save All
      </button>
    </div>
  );
};

export default Bills;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Bills.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ItemsTable.jsx ---
import React, { useEffect } from 'react';

const fields = ['description', 'hsnSac', 'purity', 'weight', 'rate', 'amount'];

const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
    marginBottom: '20px',
    border: '1px solid #ddd'
};

const thStyle = {
    border: '1px solid #ddd',
    padding: '8px',
    backgroundColor: '#f5f5f5',
    textAlign: 'left',
    fontWeight: 'bold'
};

const tdStyle = {
    border: '1px solid #ddd',
    padding: '8px',
    verticalAlign: 'middle'
};

const inputStyle = {
    width: '100%',
    padding: '6px',
    border: '1px solid #ccc',
    borderRadius: '4px',
    fontSize: '14px'
};

const editButtonStyle = {
    padding: '4px 8px',
    marginRight: '5px',
    backgroundColor: '#007bff',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer'
};

const saveButtonStyle = {
    ...editButtonStyle,
    backgroundColor: '#28a745'
};

const deleteButtonStyle = {
    padding: '4px 8px',
    backgroundColor: '#dc3545',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer'
};

const ItemsTable = ({ items, setItems, selectedRowIndex, setSelectedRowIndex }) => {
    useEffect(() => {
        const total = items.reduce((sum, item) => sum + Number(item.amount || 0), 0);
        // Optionally notify parent component
        // onTotalChange && onTotalChange(total);
        console.log('Total:', total);
    }, [items]);

    const handleItemChange = (rowIndex, field, value) => {
        const newItems = [...items];
        if (field === 'weight' || field === 'rate') {
            const numValue = parseFloat(value) || 0;
            newItems[rowIndex][field] = numValue;
            newItems[rowIndex].amount = newItems[rowIndex].weight * newItems[rowIndex].rate;
        } else if (field === 'amount') {
            newItems[rowIndex][field] = parseFloat(value) || 0;
        } else {
            newItems[rowIndex][field] = value;
        }
        setItems(newItems);
    };

    const handleAddRow = () => {
        const newRowIndex = selectedRowIndex !== null ? selectedRowIndex + 1 : items.length;
        const newItems = [...items];
        newItems.splice(newRowIndex, 0, {
            id: Date.now(),
            description: '',
            hsnSac: '7113',
            purity: '18 CT',
            weight: 0,
            rate: 7200.00,
            amount: 0,
            isEditing: true
        });
        setItems(newItems);
        setSelectedRowIndex(newRowIndex);
    };

    const handleDeleteRow = (rowIndex) => {
        if (items.length > 1) {
            const newItems = items.filter((_, index) => index !== rowIndex);
            setItems(newItems);
        }
    };

    const handleEditClick = (rowIndex) => {
        const newItems = [...items];
        newItems[rowIndex].isEditing = !newItems[rowIndex].isEditing;
        setItems(newItems);
    };

    const handleKeyDown = (event, rowIndex, field) => {
        if (event.key === 'Enter') {
            handleEditClick(rowIndex);
        } else if (event.key === 'Tab') {
            event.preventDefault();
            const currentFieldIndex = fields.indexOf(field);
            if (currentFieldIndex < fields.length - 1) {
                const nextField = fields[currentFieldIndex + 1];
                const nextInput = document.querySelector(`input[data-row="${rowIndex}"][data-field="${nextField}"]`);
                if (nextInput) nextInput.focus();
            } else if (rowIndex < items.length - 1) {
                const nextInput = document.querySelector(`input[data-row="${rowIndex + 1}"][data-field="description"]`);
                if (nextInput) nextInput.focus();
            }
        }
    };

    return (
        <div>
            <table style={tableStyle}>
                <thead>
                    <tr>
                        <th style={{ ...thStyle, width: '30px', textAlign: 'center' }}>S.No</th>
                        <th style={{ ...thStyle, width: '200px' }}>Description</th>
                        <th style={{ ...thStyle, width: '80px', textAlign: 'center' }}>HSN/SAC</th>
                        <th style={{ ...thStyle, width: '80px', textAlign: 'center' }}>Purity</th>
                        <th style={{ ...thStyle, width: '100px', textAlign: 'center' }}>Weight (gms)</th>
                        <th style={{ ...thStyle, width: '100px', textAlign: 'right' }}>Rate (₹)</th>
                        <th style={{ ...thStyle, width: '120px', textAlign: 'right' }}>Amount (₹)</th>
                        <th style={{ ...thStyle, width: '150px', textAlign: 'center' }}>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {items.map((item, rowIndex) => (
                        <tr
                            key={item.id || rowIndex}
                            style={{
                                backgroundColor: selectedRowIndex === rowIndex ? '#e3f2fd' : 'transparent',
                                cursor: 'pointer'
                            }}
                            onMouseEnter={() => setSelectedRowIndex && setSelectedRowIndex(rowIndex)}
                            onMouseLeave={() => setSelectedRowIndex && setSelectedRowIndex(null)}
                        >
                            <td style={{ ...tdStyle, textAlign: 'center' }}>{rowIndex + 1}</td>
                            {fields.map((field) => (
                                <td key={field} style={{ ...tdStyle, textAlign: field === 'rate' || field === 'amount' ? 'right' : 'left' }}>
                                    {item.isEditing ? (
                                        <input
                                            style={inputStyle}
                                            type={field === 'weight' || field === 'rate' || field === 'amount' ? 'number' : 'text'}
                                            value={item[field]}
                                            onChange={(e) => handleItemChange(rowIndex, field, e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, field)}
                                            data-row={rowIndex}
                                            data-field={field}
                                        />
                                    ) : (
                                        item[field]
                                    )}
                                </td>
                            ))}
                            <td style={{ ...tdStyle, textAlign: 'center' }}>
                                {item.isEditing ? (
                                    <button style={saveButtonStyle} onClick={() => handleEditClick(rowIndex)}>
                                        Save
                                    </button>
                                ) : (
                                    <button style={editButtonStyle} onClick={() => handleEditClick(rowIndex)}>
                                        Edit
                                    </button>
                                )}
                                <button style={deleteButtonStyle} onClick={() => handleDeleteRow(rowIndex)}>
                                    Delete
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
            <div style={{ textAlign: 'right' }}>
                <button onClick={handleAddRow} style={{ marginBottom: '10px', ...editButtonStyle }}>
                    + Add Item
                </button>
            </div>
        </div>
    );
};

export default ItemsTable;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ItemsTable.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Purchase.jsx ---
import React from 'react';
import ExcelInterface from './ExcelInterface';
// import Apps from './Apps';

/**
 * Purchase component renders an Excel-like interface for managing purchase data.
 *
 * @component
 * @returns {JSX.Element} The rendered ExcelInterface component with purchase data.
 */
const Purchase = () => {
  const columns = [
    { key: 'Product', label: 'Product' },
    { key: 'Quantity', label: 'Quantity' },
    { key: 'Price', label: 'Price' },
    { key: 'Total', label: 'Total' },
  ];

  const initialData = [
    { id: 1, product: 'Product X', quantity: 8, price: '$40', total: '$320', isEditing: false },
    { id: 2, product: 'Product Y', quantity: 15, price: '$25', total: '$375', isEditing: false },
    // Add more rows as needed
  ];

  return (
    <ExcelInterface columns={columns} initialData={initialData} />
    // <Apps />
  );
};

export default Purchase;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Purchase.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Sidebar.css ---
.sidebar {
    width: 250px; /* Fixed width for sidebar */
    height: 100vh; /* Full viewport height */
    position: fixed; /* Fixed position */
    top: 0;
    left: 0;
    background-color: #f8f9fa; /* Light background */
    border-right: 1px solid #dee2e6; /* Border for separation */
    transition: transform 0.3s ease; /* Smooth transition for open/close */
    overflow: auto; /* Enable scrolling if content overflows */
  }
  
  .sidebar.closed {
    transform: translateX(-100%); /* Move sidebar off-screen */
  }
  
  .sidebar.open {
    transform: translateX(0); /* Show sidebar */
  }
  
  .nav-item {
    cursor: pointer;
    padding: 10px;
    border-radius: 4px;
    transition: background-color 0.3s;
  }
  
  .nav-item:hover {
    background-color: #e9ecef; /* Hover effect */
  }
  
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Sidebar.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ViewTables.css ---
/* Table Header Styles */
.view-tables__header {
    background-color: #f1f3f4;
    border-bottom: 2px solid #dadce0;
}

body.dark-mode .view-tables__header {
    background-color: #2c2c2c;
    border-bottom: 2px solid #424242;
}

.view-tables__header-row {
    display: table-row;
}

.view-tables__header-cell {
    font-size: 14px;
    font-weight: 500;
    color: #5f6368;
    text-align: left;
    padding: 10px;
    cursor: pointer;
    transition: background-color 0.2s, color 0.2s;
    position: relative;
}

body.dark-mode .view-tables__header-cell {
    color: #b0bec5;
}

.view-tables__header-cell:hover {
    background-color: #e8f0fe;
    color: #1a73e8;
}

body.dark-mode .view-tables__header-cell:hover {
    background-color: #424242;
    color: #90caf9;
}

.view-tables__header-cell--sortable {
    /* display: flex; */
    align-items: center;
    justify-content: space-between;
}

.view-tables__header-cell--sortable::after {
    content: " ";
    display: inline-block;
    width: 8px;
    height: 8px;
    margin-left: 5px;
    border: solid #5f6368;
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
    transition: transform 0.2s, color 0.2s;
}

body.dark-mode .view-tables__header-cell--sortable::after {
    border-color: #b0bec5;
}

.view-tables__header-cell--sortable.asc::after {
    transform: rotate(-135deg);
    /* Upward arrow */
    color: #1a73e8;
}

body.dark-mode .view-tables__header-cell--sortable.asc::after {
    color: #90caf9;
}

.view-tables__header-cell--sortable.desc::after {
    transform: rotate(45deg);
    /* Downward arrow */
    color: #1a73e8;
}

body.dark-mode .view-tables__header-cell--sortable.desc::after {
    color: #90caf9;
}

/* General Styles */
.view-tables {
    font-family: 'Roboto', Arial, sans-serif;
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin-bottom: 20px;
}

body.dark-mode .view-tables {
    background-color: #1e1e1e;
    box-shadow: 0 1px 3px rgba(255, 255, 255, 0.1);
}

.view-tables__title {
    font-size: 20px;
    font-weight: 500;
    color: #1a73e8;
    margin-bottom: 20px;
    text-align: center;
}

body.dark-mode .view-tables__title {
    color: #90caf9;
}

/* Table Styles */
.view-tables__table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

.view-tables__header {
    background-color: #f1f3f4;
}

body.dark-mode .view-tables__header {
    background-color: #2c2c2c;
}

.view-tables__header-row {
    border-bottom: 2px solid #dadce0;
}

body.dark-mode .view-tables__header-row {
    border-bottom: 2px solid #424242;
}

.view-tables__body {
    background-color: #ffffff;
}

body.dark-mode .view-tables__body {
    background-color: #1e1e1e;
}

.view-tables__row {
    border-bottom: 1px solid #dadce0;
    transition: background-color 0.2s;
}

body.dark-mode .view-tables__row {
    border-bottom: 1px solid #424242;
}

.view-tables__row:hover {
    background-color: #f1f3f4;
}

body.dark-mode .view-tables__row:hover {
    background-color: #2c2c2c;
}

.view-tables__row--active {
    background-color: #e8f0fe;
}

body.dark-mode .view-tables__row--active {
    background-color: #424242;
}

.view-tables__cell {
    font-size: 14px;
    color: #202124;
    padding: 10px;
    text-align: left;
    vertical-align: middle;
}

body.dark-mode .view-tables__cell {
    color: #e0e0e0;
}

/* Input Styles */
.view-tables__input {
    width: 100%;
    padding: 8px;
    font-size: 14px;
    border: 1px solid #dadce0;
    border-radius: 4px;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    transition: border-color 0.2s;
}

body.dark-mode .view-tables__input {
    background-color: #2c2c2c;
    color: #e0e0e0;
    border: 1px solid #424242;
    box-shadow: inset 0 1px 2px rgba(255, 255, 255, 0.1);
}

.view-tables__input:focus {
    border-color: #1a73e8;
    outline: none;
}

body.dark-mode .view-tables__input:focus {
    border-color: #90caf9;
}

/* Button Styles */
.view-tables__button {
    padding: 8px 12px;
    font-size: 14px;
    font-weight: 500;
    color: #202124;
    background-color: #f1f3f4;
    border: 1px solid #dadce0;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s, color 0.2s;
}

body.dark-mode .view-tables__button {
    background-color: #2c2c2c;
    color: #e0e0e0;
    border: 1px solid #424242;
}

.view-tables__button:hover {
    background-color: #e8f0fe;
    color: #1a73e8;
}

body.dark-mode .view-tables__button:hover {
    background-color: #424242;
    color: #90caf9;
}

.view-tables__button--save {
    background-color: #e6f4ea;
    color: #188038;
}

body.dark-mode .view-tables__button--save {
    background-color: #2e7d32;
    color: #a5d6a7;
}

.view-tables__button--edit {
    background-color: #fef7e0;
    color: #f9ab00;
}

body.dark-mode .view-tables__button--edit {
    background-color: #795548;
    color: #ffcc80;
}

.view-tables__button--cancel {
    background-color: #fce8e6;
    color: #d93025;
}

body.dark-mode .view-tables__button--cancel {
    background-color: #b71c1c;
    color: #ef9a9a;
}

/* Pagination Styles */
.view-tables__pagination {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 20px;
}

body.dark-mode .view-tables__pagination-info {
    color: #b0bec5;
}

/* Controls Styles */
.view-tables__controls {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
}

body.dark-mode .view-tables__label {
    color: #b0bec5;
}

.view-tables__select {
    padding: 8px;
    font-size: 14px;
    border: 1px solid #dadce0;
    border-radius: 4px;
    background-color: #ffffff;
    color: #202124;
    cursor: pointer;
    transition: border-color 0.2s;
}

body.dark-mode .view-tables__select {
    background-color: #2c2c2c;
    color: #e0e0e0;
    border: 1px solid #424242;
}

.view-tables__select:focus {
    border-color: #1a73e8;
    outline: none;
}

body.dark-mode .view-tables__select:focus {
    border-color: #90caf9;
}

/* Alert Styles */
.view-tables__alert {
    padding: 10px;
    font-size: 14px;
    border-radius: 4px;
    margin-bottom: 20px;
}

.view-tables__alert--error {
    background-color: #fce8e6;
    color: #d93025;
    border: 1px solid #d93025;
}

body.dark-mode .view-tables__alert--error {
    background-color: #b71c1c;
    color: #ef9a9a;
    border: 1px solid #ef5350;
}

/* Loading Styles */
.view-tables__loading {
    font-size: 16px;
    font-weight: 500;
    color: #5f6368;
    text-align: center;
    margin: 20px 0;
}

body.dark-mode .view-tables__loading {
    color: #b0bec5;
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ViewTables.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Sales.jsx ---
import React from 'react';
import PageTemplate from './PageTemplate';

const Sales = () => {
  const tableHeaders = ['Product', 'Quantity', 'Price', 'Total'];
  const tableData = [
    ['Product A', 10, '$50', '$500'],
    ['Product B', 5, '$30', '$150'],
    // Add more rows as needed
  ];

  return (
    <PageTemplate title="Sales Page" tableHeaders={tableHeaders} tableData={tableData} />
  );
};

export default Sales;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Sales.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/NavBar.jsx ---
import React, { useContext } from 'react';
import { NavLink } from 'react-router-dom';
import { DarkModeContext } from '../DarkModeContext'; // Import the context
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min.js';
import './NavBar.css'

function NavItem({ to, label }) {
    return (
        <NavLink
            to={to}
            className={({ isActive }) =>
                isActive
                    ? 'nav-item active fw-bold btn btn-primary d-block fs-6'
                    : 'nav-item btn fs-6'
            }
            style={({ isActive }) =>
                isActive ? { borderRadius: '5px' } : {}
            }
        >
            {label}
        </NavLink>
    );
}

export default function NavBar() {
    const { darkMode, toggleDarkMode } = useContext(DarkModeContext); // Use the context

    const navLinks = [
        { to: '/', label: 'Dashboard' },
        { to: '/view/journal', label: 'View Journal' },
        { to: '/view/bill', label: 'View Bills' },
        { to: '/view/stock', label: 'View Stock' },
        { to: '/create-bill', label: 'Create Bill' },
        { to: '/UnifiedEntryForm', label: 'Unified Entry Form' },
        { to: '/accounts', label: 'Accounts' },
    ];

    return (
        <nav
            className={`navbar navbar-expand-lg ${darkMode ? 'navbar-dark bg-dark ms-auto' : 'navbar-light bg-light ms-auto'
                }`}
        >
            <div className="container-fluid">
                <span className="navbar-brand fw-bold fs-4">MDKJ Invoicing App</span>
                <button
                    className="btn btn-outline-secondary ms-auto"
                    onClick={toggleDarkMode}
                >
                    {darkMode ? '🌞' : '🌙'}
                </button>
                <button
                    className="navbar-toggler"
                    type="button"
                    data-bs-toggle="collapse"
                    data-bs-target="#navbarNav"
                    aria-controls="navbarNav"
                    aria-expanded="false"
                    aria-label="Toggle navigation"
                >
                    <span className="navbar-toggler-icon"></span>
                </button>
                <div className="collapse navbar-collapse" id="navbarNav">
                    <ul className="navbar-nav">
                        {navLinks.map((link, index) => (
                            <NavItem key={index} to={link.to} label={link.label} />
                        ))}
                    </ul>
                </div>
            </div>
        </nav>
    );
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/NavBar.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/utils.js ---
// utils.js

// Basic number to words for INR currency (can be replaced by a library for full feature)
export function numberToWords(num) {
    // For demo, return the formatted number + suffix
    if (typeof num !== 'number') num = parseFloat(num);
    if (isNaN(num)) return '';
    return num.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' Rupees Only';
}

// Format currency INR with 2 decimals
export function formatINR(amount) {
    if (typeof amount !== 'number') amount = parseFloat(amount);
    if (isNaN(amount)) amount = 0;
    return '₹' + amount.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
}

// Round to 2 decimals
export function round2Decimals(value) {
    return Math.round(value * 100) / 100;
}

// utils.js

const convertToWords = (num) => {
    const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
    const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];

    const convertHundreds = (n) => {
        let result = '';
        if (n > 99) {
            result += ones[Math.floor(n / 100)] + ' Hundred ';
            n %= 100;
        }
        if (n > 19) {
            result += tens[Math.floor(n / 10)] + ' ';
            n %= 10;
        }
        if (n > 0) {
            result += ones[n] + ' ';
        }
        return result;
    };

    if (num === 0) return 'Zero';

    const crore = Math.floor(num / 10000000);
    const lakh = Math.floor((num % 10000000) / 100000);
    const thousand = Math.floor((num % 100000) / 1000);
    const remainder = num % 1000;

    let result = '';
    if (crore > 0) result += convertHundreds(crore) + 'Crore ';
    if (lakh > 0) result += convertHundreds(lakh) + 'Lakh(s) ';
    if (thousand > 0) result += convertHundreds(thousand) + 'Thousand ';
    if (remainder > 0) result += convertHundreds(remainder);

    return 'Rupees ' + result.trim() + ' Only';
};

// exports = {
//     convertToWords,
//     numberToWords,
//     formatINR,
//     round2Decimals
// };
export default convertToWords;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/utils.js ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/PageTemplate.jsx ---
import React from 'react';

/**
 * Renders a page template with a title and a table.
 *
 * @component
 * @param {Object} props - The component props.
 * @param {string} props.title - The title to display above the table.
 * @param {string[]} props.tableHeaders - An array of strings representing the table headers.
 * @param {Array<Array<React.ReactNode>>} props.tableData - A 2D array representing the table rows and cells.
 * @returns {JSX.Element} The rendered page template component.
 */
const PageTemplate = ({ title, tableHeaders, tableData }) => {
  return (
    <div className="page-container p-4">
      <h2>{title}</h2>
      <table className="table table-bordered mt-3">
        <thead>
          <tr>
            {tableHeaders.map((header, index) => (
              <th key={index}>{header}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {tableData.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, cellIndex) => (
                <td key={cellIndex}>{cell}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default PageTemplate;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/PageTemplate.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ExcelInterface.css ---
/* Container styling */
.container {
    max-width: 1200px;
    margin: 0 auto;
  }
  
  /* Table styling */
  .table {
    border-collapse: collapse;
    width: 100%;
    margin-bottom: 1rem;
  }
  
  .table th,
  .table td {
    border: 1px solid #dee2e6;
    padding: 0.75rem;
    vertical-align: top;
  }
  
  .table thead th {
    background-color: #343a40;
    color: #fff;
    font-weight: bold;
  }
  
  .table tbody tr.table-active {
    background-color: #e9ecef;
  }
  
  /* Button styling */
  .btn {
    margin: 0.2rem;
  }
  
  .btn-success {
    background-color: #28a745;
    border-color: #28a745;
  }
  
  .btn-primary {
    background-color: #007bff;
    border-color: #007bff;
  }
  
  .btn-info {
    background-color: #17a2b8;
    border-color: #17a2b8;
  }
  
  .btn-success:hover {
    background-color: #218838;
    border-color: #1e7e34;
  }
  
  .btn-primary:hover {
    background-color: #0056b3;
    border-color: #004085;
  }
  
  .btn-info:hover {
    background-color: #138496;
    border-color: #117a8b;
  }
  
  /* Form control styling */
  .form-control {
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
  }
  
  .input-group {
    display: flex;
    align-items: center;
  }
  
  .input-group .form-control {
    margin-right: 0.5rem;
  }
  
  .input-group .form-control:last-child {
    margin-right: 0;
  }
  
  /* Heading styling */
  h1 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }
  
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ExcelInterface.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/UnifiedEntryForm.jsx ---
import React, { useState } from 'react';
import { insertUnifiedEntry } from '../api';

export default function UnifiedEntryForm() {
    const [entryType, setEntryType] = useState('bill');
    const [form, setForm] = useState({
        entry_type_or_data: 'bill',
        gstin: '',
        dated: '',
        bank: false,
        bill_no: '',
        purity: '',
        wt: '',
        rate: '',
        cgst: '',
        sgst: '',
        igst: '',
        weight: '',
        cash_amount: ''
    });

    const handleChange = (e) => {
        const { name, type, value, checked } = e.target;
        setForm((prev) => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
    };

    const handleEntryTypeChange = (e) => {
        const newType = e.target.value;
        setEntryType(newType);
        setForm((prev) => ({ ...prev, entry_type_or_data: newType }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await insertUnifiedEntry(form);
            alert('Entry inserted successfully');
            console.log(response.data);
        } catch (error) {
            console.error(error);
            alert('Failed to insert entry');
        }
    };

    return (
        <div>
            <h2>Add Entry</h2>
            <form onSubmit={handleSubmit}>
                <label>
                    Entry Type:
                    <select name="entry_type_or_data" value={entryType} onChange={handleEntryTypeChange}>
                        <option value="bill">Bill</option>
                        <option value="cash">Cash</option>
                        <option value="gold">Gold</option>
                        <option value="stock">Stock</option>
                    </select>
                </label>
                <br />
                <input name="gstin" placeholder="GSTIN" onChange={handleChange} />

                {(entryType === 'bill' || entryType === 'gold' || entryType === 'stock') && (
                    <>
                        <input name="purity" placeholder="Purity" onChange={handleChange} />
                        <input name="weight" type="number" placeholder="Weight" onChange={handleChange} />
                    </>
                )}

                {entryType === 'bill' && (
                    <>
                        <input name="bill_no" placeholder="Bill No" onChange={handleChange} />
                        <input name="wt" type="number" placeholder="Bill Weight" onChange={handleChange} />
                        <input name="rate" type="number" placeholder="Rate" onChange={handleChange} />
                        <input name="cgst" type="number" placeholder="CGST" onChange={handleChange} />
                        <input name="sgst" type="number" placeholder="SGST" onChange={handleChange} />
                        <input name="igst" type="number" placeholder="IGST" onChange={handleChange} />
                    </>
                )}

                {entryType === 'cash' && (
                    <input name="cash_amount" type="number" placeholder="Cash Amount" onChange={handleChange} />
                )}

                <label>
                    Bank Entry:
                    <input type="checkbox" name="bank" onChange={handleChange} />
                </label>

                <input type="date" name="dated" onChange={handleChange} />

                <button type="submit">Submit Entry</button>
            </form>
        </div>
    );
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/UnifiedEntryForm.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Dashboardx.jsx ---
// Dashboard.js
// This file defines the Dashboard component for the MDKJ Enterprise application.
// The Dashboard displays a welcome message and a brief description for users on the dashboard page.

import React from 'react';

/**
 * Dashboard component
 * Renders the main dashboard page with a heading and a welcome message.
 */
const Dashboardx = () => {
  return (
    <div className="dashboard p-4">
      <h2>Dashboard Page</h2>
      <p className="lead">Welcome to the MDKJ Enterprise Dashboard. Here, you can view key metrics and summaries of your business.</p>
    </div>
  );
};

export default Dashboardx;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Dashboardx.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/BillHeaderForm.jsx ---
import React, { useState, useMemo } from 'react';

// Dummy customer data for autocomplete
const dummyCustomers = [
    {
        id: 1,
        name: 'Rajesh Kumar',
        phone: '+91 98765 43210',
        address: '123 MG Road\nKanpur, UP 208001',
        email: 'rajesh.kumar@email.com'
    },
    {
        id: 2,
        name: 'Priya Sharma',
        phone: '+91 87654 32109',
        address: '456 Civil Lines\nKanpur, UP 208002',
        email: 'priya.sharma@email.com'
    },
    {
        id: 3,
        name: 'Amit Gupta',
        phone: '+91 76543 21098',
        address: '789 Swaroop Nagar\nKanpur, UP 208003',
        email: 'amit.gupta@email.com'
    },
    {
        id: 4,
        name: 'Sunita Verma',
        phone: '+91 65432 10987',
        address: '321 Kalyanpur\nKanpur, UP 208004',
        email: 'sunita.verma@email.com'
    },
    {
        id: 5,
        name: 'Vikram Singh',
        phone: '+91 54321 09876',
        address: '654 Govind Nagar\nKanpur, UP 208005',
        email: 'vikram.singh@email.com'
    }
];

// Basic inline styles
const labelStyle = { display: 'block', marginBottom: '6px', fontWeight: 'bold' };
const inputStyle = {
    width: '100%',
    padding: '8px',
    boxSizing: 'border-box',
    borderRadius: '4px',
    border: '1px solid #ccc',
};
const headerSectionStyle = {
    padding: '20px',
    border: '1px solid #ddd',
    borderRadius: '6px',
    maxWidth: '600px',
    margin: 'auto',
    backgroundColor: '#fafafa',
};
const formGridStyle = {
    display: 'grid',
    gridTemplateColumns: '1fr 1fr',
    gap: '20px',
};
const customerDropdownStyle = {
    position: 'absolute',
    top: '100%',
    left: 0,
    right: 0,
    backgroundColor: 'white',
    border: '1px solid #ddd',
    borderTop: 'none',
    borderRadius: '0 0 4px 4px',
    maxHeight: '200px',
    overflowY: 'auto',
    zIndex: 1000
};
const customerOptionStyle = {
    padding: '10px',
    cursor: 'pointer',
    borderBottom: '1px solid #eee'
};

// BillHeaderForm with autocomplete for customer name
const BillHeaderForm = ({ billHeader = {}, onChange, customerSearchTerm, onCustomerSearch, filteredCustomers, showCustomerDropdown, onCustomerSelect, setShowCustomerDropdown }) => {
    return (
        <div style={headerSectionStyle}>
            <h2 style={{ marginBottom: '20px', color: '#333' }}>Bill Information</h2>

            <div style={formGridStyle}>
                {/* Customer Name with Autocomplete */}
                <div style={{ position: 'relative' }}>
                    <label style={labelStyle}>Customer Name:</label>
                    <input
                        type="text"
                        style={inputStyle}
                        value={customerSearchTerm}
                        onChange={(e) => onCustomerSearch(e.target.value)}
                        onFocus={() => setShowCustomerDropdown(customerSearchTerm.trim().length > 0)}
                        placeholder="Search or enter customer name"
                        autoComplete="off"
                    />
                    {showCustomerDropdown && (
                        <div style={customerDropdownStyle}>
                            {filteredCustomers.length > 0 ? (
                                filteredCustomers.map((customer) => (
                                    <div
                                        key={customer.id}
                                        style={customerOptionStyle}
                                        onClick={() => onCustomerSelect(customer)}
                                        onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = '#f0f0f0')}
                                        onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = 'white')}
                                    >
                                        <strong>{customer.name}</strong><br />
                                        <small>{customer.phone}</small>
                                    </div>
                                ))
                            ) : (
                                <div style={{ padding: '10px', color: '#999' }}>No customers found</div>
                            )}
                        </div>
                    )}
                </div>

                {/* Customer Phone */}
                <div>
                    <label style={labelStyle}>Customer Phone:</label>
                    <input
                        type="text"
                        style={inputStyle}
                        value={billHeader.customerPhone || ''}
                        onChange={(e) => onChange('customerPhone', e.target.value)}
                        placeholder="Enter phone number"
                    />
                </div>

                {/* Customer Address */}
                <div style={{ gridColumn: 'span 2' }}>
                    <label style={labelStyle}>Customer Address:</label>
                    <textarea
                        style={{ ...inputStyle, minHeight: '60px', resize: 'vertical' }}
                        value={billHeader.customerAddress || ''}
                        onChange={(e) => onChange('customerAddress', e.target.value)}
                        placeholder="Enter customer address"
                    />
                </div>

                {/* Customer Email */}
                <div>
                    <label style={labelStyle}>Customer Email:</label>
                    <input
                        type="email"
                        style={inputStyle}
                        value={billHeader.customerEmail || ''}
                        onChange={(e) => onChange('customerEmail', e.target.value)}
                        placeholder="Enter email address"
                    />
                </div>

                {/* Bill Number */}
                <div>
                    <label style={labelStyle}>Bill Number:</label>
                    <input
                        type="text"
                        style={inputStyle}
                        value={billHeader.billNumber || ''}
                        onChange={(e) => onChange('billNumber', e.target.value)}
                        placeholder="Enter bill number"
                    />
                </div>

                {/* Bill Date */}
                <div>
                    <label style={labelStyle}>Bill Date:</label>
                    <input
                        type="date"
                        style={inputStyle}
                        value={billHeader.date || ''}
                        onChange={(e) => onChange('date', e.target.value)}
                    />
                </div>
            </div>
        </div>

    );
};

export default BillHeaderForm;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/BillHeaderForm.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Stock.jsx ---
import React from 'react';
import PageTemplate from './PageTemplate';
import ViewTables from './ViewTables';

const Stock = () => {
  const tableHeaders = ['Product', 'Available Quantity'];
  const tableData = [
    ['Product A', 20],
    ['Product B', 10],
    // Add more rows as needed
  ];

  return (
    <div className="container">
      <h1 className="text-center my-4">Stock Management</h1>
      <ViewTables
        tableName="journal" // Replace with the actual table name for stock in your backend
        initialParams={{
          // page_size: 10, // Default page size
          // sort_by: "gstin", // Replace with the actual column name for sorting
          sort_order: "asc", // Default sort order
        }}
      />
      <div className="table-responsive">
        <table className="table table-striped">
          <thead>
            <tr>
              {tableHeaders.map((header, index) => (
                <th key={index}>{header}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {tableData.map((row, rowIndex) => (
              <tr key={rowIndex}>
                {row.map((cell, cellIndex) => (
                  <td key={cellIndex}>{cell}</td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
// Using PageTemplate to render the stock page
//   // If you want to use PageTemplate, you can replace the above return with:
//     <PageTemplate title="Stock Page" tableHeaders={tableHeaders} tableData={tableData} />
//   );
// };

export default Stock;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Stock.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/styles.jsx ---
// styles.js

export const containerStyle = {
    padding: '20px',
    maxWidth: '1000px',
    margin: 'auto',
    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
    color: '#333',
};

export const headerStyle = {
    textAlign: 'center',
    marginBottom: '25px',
};

export const inputStyle = {
    width: '100%',
    padding: '8px',
    fontSize: '14px',
    borderRadius: '4px',
    border: '1px solid #ccc',
    boxSizing: 'border-box',
};

export const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
};

export const thStyle = {
    border: '1px solid #ddd',
    padding: '10px',
    backgroundColor: '#f2f2f2',
    fontWeight: 'bold',
    textAlign: 'left',
};

export const tdStyle = {
    border: '1px solid #ddd',
    padding: '8px',
    textAlign: 'left',
};

export const buttonPrimary = {
    backgroundColor: '#28a745',
    color: 'white',
    border: 'none',
    padding: '12px 20px',
    cursor: 'pointer',
    fontSize: '16px',
    borderRadius: '4px',
};

export const buttonDanger = {
    backgroundColor: '#dc3545',
    color: 'white',
    border: 'none',
    padding: '6px 12px',
    cursor: 'pointer',
    fontSize: '14px',
    borderRadius: '4px',
};

export const totalsContainer = {
    width: '400px',
    marginLeft: 'auto',
    marginTop: '30px',
};

export const totalsTable = {
    width: '100%',
    borderCollapse: 'collapse',
};

export const totalsTdLabel = {
    padding: '8px',
    fontWeight: 'bold',
    backgroundColor: '#f5f5f5',
    border: '1px solid #333',
};

export const totalsTdValue = {
    padding: '8px',
    textAlign: 'right',
    fontWeight: 'bold',
    backgroundColor: '#f5f5f5',
    border: '1px solid #333',
};

export const totalsTdNormal = {
    padding: '8px',
    border: '1px solid #333',
};

export const totalsTdIndented = {
    padding: '8px 8px 8px 20px',
    border: '1px solid #333',
};

export const grandTotalRow = {
    padding: '12px',
    fontWeight: 'bold',
    fontSize: '18px',
    backgroundColor: '#f0f0f0',
    border: '2px solid #333',
};

export const amountInWordsBox = {
    marginTop: '30px',
    padding: '15px',
    backgroundColor: '#f9f9f9',
    border: '1px solid #ddd',
    borderRadius: '4px',
    fontWeight: 'bold',
    fontSize: '16px',
    color: '#333',
};

export const thankYouMessage = {
    textAlign: 'center',
    marginTop: '40px',
    color: '#666',
    fontSize: '16px',
};

export const headerSectionStyle = {
    marginBottom: '20px',
    borderBottom: '2px solid #333',
    paddingBottom: '10px',
};

export const formGridStyle = {
    display: 'grid',
    gridTemplateColumns: '1fr 2fr',
    gap: '15px 20px',
    alignItems: 'center',
    marginBottom: '20px',
};

export const labelStyle = {
    fontWeight: '600',
    fontSize: '14px',
    color: '#222',
};
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/styles.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/BillGenerator.css ---
/* Container Styles */
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    font-family: 'Arial', sans-serif;
    background-color: #f8f9fa;
}

/* Section Header Styles */
.header-section {
    margin-bottom: 30px;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #ffffff;
}

.header-section h2 {
    margin: 0 0 20px 0;
    color: #333;
    font-size: 28px;
    /* Added for consistency, was previously inline */
    border-bottom: 2px solid #e9ecef;
    /* Added for consistency, was previously inline */
    padding-bottom: 15px;
    /* Added for consistency, was previously inline */
}

/* Form Grid Styles */
.form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 15px;
    margin-top: 15px;
}

/* Label and Input Styles */
.label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    font-size: 14px;
}

.input {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 14px;
    box-sizing: border-box;
    /* Ensures padding doesn't increase total width */
    transition: all 0.3s ease;
    /* Added for better UX */
}

.input:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    outline: none;
}

textarea.input {
    min-height: 60px;
    /* Added for consistency */
    resize: vertical;
    /* Added for consistency */
}

/* Customer Dropdown Styles (retained from previous comprehensive CSS) */
.customer-dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background-color: #fff;
    border: 1px solid #ced4da;
    border-radius: 6px;
    max-height: 200px;
    overflow-y: auto;
    z-index: 100;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.customer-option {
    padding: 12px 15px;
    cursor: pointer;
    border-bottom: 1px solid #e9ecef;
    transition: background-color 0.2s ease;
}

.customer-option:last-child {
    border-bottom: none;
}

.customer-option:hover {
    background-color: #f0f0f0;
}

.customer-option strong {
    color: #333;
}

.customer-option small {
    color: #777;
}

/* Bill Preview Section */
.bill-preview {
    border: 2px solid #333;
    padding: 40px;
    background-color: #ffffff;
    margin-bottom: 20px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    /* Retained for aesthetics */
    border-radius: 10px;
    /* Retained for aesthetics */
}

/* Bill Header Info (retain some inline for clarity if needed, or move to classes) */
.bill-preview h1 {
    font-size: 36px;
    margin: 0 0 10px 0;
    color: #333;
}

.bill-preview h2 {
    font-size: 24px;
    margin: 0 0 15px 0;
    color: #333;
}

.bill-preview .store-info p {
    margin: 5px 0;
    color: #666;
    line-height: 1.4;
}

.bill-info {
    display: flex;
    justify-content: space-between;
    margin-bottom: 30px;
    border-bottom: 1px solid #eee;
    /* Retained for clarity */
    padding-bottom: 15px;
    /* Retained for clarity */
}

.bill-info h3 {
    margin: 0 0 10px 0;
    font-weight: bold;
    color: #333;
}

.bill-info p {
    margin: 5px 0;
    font-size: 16px;
    color: #555;
}

.bill-info p strong {
    color: #333;
}

/* Items Table */
.table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 30px;
}

.table th {
    border: 1px solid #333;
    padding: 12px 8px;
    background-color: #f5f5f5;
    font-weight: bold;
    text-align: left;
    white-space: nowrap;
    /* Prevent wrapping for headers */
}

.table td {
    border: 1px solid #333;
    padding: 8px;
    vertical-align: middle;
}

.table tbody tr {
    transition: background-color 0.2s ease;
    /* Retained from previous comprehensive CSS */
}

.table tbody tr:hover {
    background-color: #f8f9fa;
    /* Retained from previous comprehensive CSS */
}

.table tbody tr.selected-row {
    background-color: #e3f2fd;
    /* Retained from previous comprehensive CSS */
}

.table td span {
    display: block;
    padding: 4px;
    cursor: pointer;
}

.table td input {
    width: calc(100% - 8px);
    /* Adjust for padding */
    padding: 8px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    box-sizing: border-box;
}

/* Buttons */
.button {
    padding: 8px 16px;
    margin: 0 4px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s ease, transform 0.1s ease;
}

.edit-button {
    background-color: #007bff;
    color: white;
}

.edit-button:hover {
    transform: translateY(-1px);
    background-color: #0056b3;
}

.save-button {
    background-color: #28a745;
    color: white;
}

.save-button:hover {
    transform: translateY(-1px);
    background-color: #218838;
}

.delete-button {
    background-color: #dc3545;
    color: white;
}

.delete-button:hover {
    transform: translateY(-1px);
    background-color: #c82333;
}

/* Controls Section */
.controls {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    align-items: center;
    justify-content: center;
    padding: 20px;
    background-color: #ffffff;
    border: 1px solid #ddd;
    border-radius: 8px;
}

.controls button {
    /* Generic button style within controls */
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    font-weight: bold;
    transition: background-color 0.2s ease, transform 0.1s ease;
    white-space: nowrap;
}

.controls button:hover {
    transform: translateY(-2px);
}

.add-item-button {
    /* Specific button style, like add item */
    background-color: #28a745;
    color: white;
}

.add-item-button:hover {
    background-color: #218838;
}

.print-bill-button {
    /* Specific button style, like print */
    background-color: #007bff;
    color: white;
}

.print-bill-button:hover {
    background-color: #0056b3;
}

.controls .input-group {
    /* Grouping for labels and inputs in controls */
    display: flex;
    align-items: center;
    gap: 8px;
}

.controls .input-group label {
    font-size: 14px;
    font-weight: bold;
    color: #555;
}

.controls .input-group input {
    width: 80px;
    padding: 10px;
    border: 1px solid #ced4da;
    border-radius: 6px;
    font-size: 15px;
    text-align: center;
}


/* Totals Section */
.totals-section {
    margin-left: auto;
    width: 350px;
    border: 1px solid #333;
    /* This border will apply to the div itself */
    margin-top: 30px;
    /* Added for spacing */
}

.totals-table {
    width: 100%;
    border-collapse: collapse;
}

.totals-table td {
    padding: 10px 12px;
    border: 1px solid #dee2e6;
    text-align: right;
    font-size: 15px;
}

.totals-table tr:first-child td {
    font-weight: bold;
    background-color: #f5f5f5;
}

.totals-table tr:nth-child(even) td {
    background-color: #fcfcfc;
}

.totals-table tr:last-child td {
    font-weight: bold;
    font-size: 18px;
    background-color: #e9ecef;
    border: 2px solid #333;
}

.totals-table small {
    font-size: 12px;
    color: #777;
}

/* Amount in Words */
.amount-in-words {
    margin-top: 30px;
    padding: 18px;
    background-color: #f9f9f9;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    color: #333;
}

.amount-in-words strong {
    color: #555;
    font-size: 15px;
}

.amount-in-words span {
    font-size: 17px;
    font-weight: bold;
    color: #333;
}

/* Thank you message */
.thank-you-message {
    text-align: center;
    margin-top: 40px;
    color: #666;
    font-size: 16px;
    padding-top: 15px;
    border-top: 1px dashed #ced4da;
}

/* Usage Instructions (from previous comprehensive CSS) */
.usage-instructions {
    margin-top: 30px;
    padding: 25px;
    background-color: #e3f2fd;
    border-radius: 10px;
    border: 1px solid #90caf9;
    color: #333;
    box-shadow: 0 2px 8px rgba(33, 150, 243, 0.1);
}

.usage-instructions h3 {
    margin: 0 0 15px 0;
    color: #1976d2;
    font-size: 22px;
}

.usage-instructions ul {
    margin: 0;
    padding-left: 25px;
    color: #444;
    line-height: 1.8;
    list-style-type: disc;
}

.usage-instructions li {
    margin-bottom: 8px;
}

/* Print Specific Styles */
@media print {
    body * {
        visibility: hidden;
    }

    .bill-preview,
    .bill-preview * {
        visibility: visible;
    }

    .bill-preview {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        margin: 0;
        padding: 0;
        box-shadow: none;
        border: none;
    }

    .print-hide {
        display: none !important;
    }

    .container {
        padding: 0;
        box-shadow: none;
    }

    .header-section,
    .controls,
    .usage-instructions {
        display: none;
    }

    .table th,
    .table td {
        padding: 8px 6px;
        /* Smaller padding for print */
        font-size: 13px;
        /* Smaller font for print */
    }

    .bill-preview h1 {
        font-size: 28px;
    }

    .bill-preview h2 {
        font-size: 20px;
    }

    .bill-info p {
        font-size: 13px;
    }

    .totals-table td {
        font-size: 13px;
        padding: 6px 8px;
    }

    .totals-table tr:last-child td {
        font-size: 16px;
    }

    .amount-in-words span {
        font-size: 14px;
    }
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/BillGenerator.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/api/index.jsx ---
import axios from 'axios';

const API_BASE = 'http://localhost:5003/api/queries';

// --- JOURNAL ENTRY INSERT (Only insert endpoint used for all types)
export const insertUnifiedEntry = (data) =>
    axios.post(`${API_BASE}/journal/entry`, data);

// Generic fetch for any table
export const fetchAll = (table, params = {}) =>
    axios.get(`${API_BASE}/${table}/all`, { params });

// Fetch by GSTIN
export const fetchByGSTIN = (table, gstin) =>
    axios.get(`${API_BASE}/${table}/customer/${gstin}`);

// Add a new record to a specified table
export const addRecord = (table, data) =>
    axios.post(`${API_BASE}/${table}/add`, data);

// Fetch schema of a specified table
export const fetchTableSchema = (table) =>
    axios.get(`${API_BASE}/${table}/schema`);

// Utility function to sanitize responses by converting NaN to null
export const sanitizeResponse = (data) => {
    if (Array.isArray(data)) {
        return data.map((row) =>
            Object.fromEntries(
                Object.entries(row).map(([key, value]) => [
                    key,
                    isNaN(value) && typeof value === 'number' ? null : value,
                ])
            )
        );
    } else if (typeof data === 'object' && data !== null) {
        return Object.fromEntries(
            Object.entries(data).map(([key, value]) => [
                key,
                isNaN(value) && typeof value === 'number' ? null : value,
            ])
        );
    }
    return data;
};

// Example usage of sanitizeResponse in fetchAll
export const fetchAllSanitized = async (table, params = {}) => {
    const response = await fetchAll(table, params);
    return sanitizeResponse(response.data);
};

// Update a record in a specified table
export const updateRecord = (table, data) =>
    axios.put(`${API_BASE}/${table}/update`, data);
// Delete a record from a specified table
export const deleteRecord = (table, id) =>
    axios.delete(`${API_BASE}/${table}/delete/${id}`);  
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/api/index.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/Accounts.jsx ---
import React, { useEffect, useMemo, useState } from 'react';
import { fetchAll, fetchByGSTIN } from '../api';
import DataTable from '../components/DataTable';
import ViewTables from '../components/ViewTables';
import 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS
import 'bootstrap/dist/js/bootstrap.bundle.min.js'; // Import Bootstrap JS
import CreateCustomer from '../components/CreateCustomer';

export default function Accounts() {
    const [customers, setCustomers] = useState([]);
    const [customerSearchTerm, setCustomerSearchTerm] = useState('');
    const [showCustomerDropdown, setShowCustomerDropdown] = useState(false);
    const [selectedCustomer, setSelectedCustomer] = useState(null);
    const [journalEntries, setJournalEntries] = useState([]);

    const [overallMetrics, setOverallMetrics] = useState({
        totalCustomers: 0,
        totalJournalEntries: 0,
        totalBillAmount: 0,
    });

    // Load all customers
    useEffect(() => {
        const loadCustomers = async () => {
            try {
                const res = await fetchAll('customer_details', { page: 1, page_size: 100 });
                setCustomers(res.data);
                setOverallMetrics(prev => ({ ...prev, totalCustomers: res.data.length }));
            } catch (err) {
                console.error('Failed to load customers:', err);
            }
        };
        loadCustomers();
    }, []);

    // Load overall journal and metrics
    useEffect(() => {
        const loadMetrics = async () => {
            try {
                const res = await fetchAll('journal', { page: 1, page_size: 1000 });
                const entries = res.data || [];
                const totalBillAmount = entries
                    .filter(e => e.entry_type === 'bill')
                    .reduce((sum, e) => sum + parseFloat(e.amount || 0), 0);
                setOverallMetrics(prev => ({
                    ...prev,
                    totalJournalEntries: entries.length,
                    totalBillAmount,
                }));
            } catch (err) {
                console.error('Failed to load journal entries:', err);
            }
        };
        loadMetrics();
    }, []);

    const filteredCustomers = useMemo(() => {
        if (!customerSearchTerm) return customers;
        return customers.filter(c =>
            c.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
            (c.phone || '').includes(customerSearchTerm)
        );
    }, [customerSearchTerm, customers]);

    const handleCustomerSelect = (customer) => {
        setSelectedCustomer(customer);
        setCustomerSearchTerm(customer.name);
        setShowCustomerDropdown(false);

        // Load customer journal
        fetchByGSTIN('journal', customer.gstin)
            .then(res => setJournalEntries(res.data || []))
            .catch(err => {
                console.error('Failed to fetch customer journal:', err);
                setJournalEntries([]);
            });
    };

    const handleCustomerSearch = (val) => {
        setCustomerSearchTerm(val);
        setSelectedCustomer(null);
        setShowCustomerDropdown(val.length > 0);
        setJournalEntries([]);
    };

    return (
        <div className="container mt-4">
            <h1 className="mb-4">Accounts Overview</h1>

            {/* Section 1: Overall Metrics */}
            <div className="card p-4 mb-4">
                <h3>Overall Metrics</h3>
                <div className="row mt-3">
                    <div className="col-md-4">
                        <div className="p-3 bg-light border rounded">
                            <h6>Total Customers</h6>
                            <p className="h4 text-primary">{overallMetrics.totalCustomers}</p>
                        </div>
                    </div>
                    <div className="col-md-4">
                        <div className="p-3 bg-light border rounded">
                            <h6>Total Journal Entries</h6>
                            <p className="h4 text-success">{overallMetrics.totalJournalEntries}</p>
                        </div>
                    </div>
                    <div className="col-md-4">
                        <div className="p-3 bg-light border rounded">
                            <h6>Total Bill Amount</h6>
                            <p className="h4 text-info">₹{overallMetrics.totalBillAmount.toLocaleString('en-IN', { minimumFractionDigits: 2 })}</p>
                        </div>
                    </div>
                </div>
            </div>

            {/* Section 2: Customer Summary */}
            <div className="card p-4">
                <h3>Customer Account Summary</h3>

                {/* Customer Search */}
                <div className="mb-3 position-relative">
                    <label className="form-label">Search Customer by Name/Phone</label>
                    <input
                        className="form-control"
                        value={customerSearchTerm}
                        onChange={(e) => handleCustomerSearch(e.target.value)}
                        onFocus={() => setShowCustomerDropdown(customerSearchTerm.trim().length > 0)}
                        placeholder="e.g. Rajesh or 9876543210"
                    />
                    {showCustomerDropdown && (
                        <ul className="list-group position-absolute w-100 zindex-dropdown mt-1" style={{ zIndex: 999 }}>
                            {filteredCustomers.length > 0 ? (
                                filteredCustomers.map((c) => (
                                    <li
                                        key={c.gstin}
                                        className="list-group-item list-group-item-action"
                                        onClick={() => handleCustomerSelect(c)}
                                    >
                                        <strong>{c.name}</strong> ({c.phone})<br />
                                        <small>{c.address}</small>
                                    </li>
                                ))
                            ) : (
                                <li className="list-group-item">No customers found</li>
                            )}
                        </ul>
                    )}
                </div>

                {/* Selected Customer Journal */}
                {selectedCustomer && (
                    <>
                        <div className="mt-3 mb-3">
                            <h5>
                                Transactions for: <strong>{selectedCustomer.name}</strong> (GSTIN: {selectedCustomer.gstin})
                            </h5>
                        </div>
                        <ViewTables
                            tableName="journal"
                            initialParams={{ page: 1, page_size: 1000 }}
                        // render={(data) => {
                        //     const filteredEntries = data.filter(entry => entry.gstin === selectedCustomer.gstin);

                        //     // Consolidate data (e.g., summing amounts by entry type)
                        //     const consolidatedData = filteredEntries.reduce(
                        //         (acc, entry) => {
                        //             acc.totalAmount += parseFloat(entry.amount || 0);
                        //             acc[entry.entry_type] = (acc[entry.entry_type] || 0) + parseFloat(entry.amount || 0);
                        //             return acc;
                        //         },
                        //         { totalAmount: 0 }
                        //     );
                        //     console.log('Consolidated Data:', consolidatedData);

                        //     return filteredEntries.length > 0 ? (
                        //         <>
                        //             <DataTable data={filteredEntries} />
                        //             <div className="mt-4">
                        //                 <h5>Consolidated Data</h5>
                        //                 <p>Total Amount: ₹{consolidatedData.totalAmount.toLocaleString('en-IN', { minimumFractionDigits: 2 })}</p>
                        //                 {Object.entries(consolidatedData).map(([key, value]) =>
                        //                     key !== 'totalAmount' ? (
                        //                         <p key={key}>
                        //                             {key}: ₹{value.toLocaleString('en-IN', { minimumFractionDigits: 2 })}
                        //                         </p>
                        //                     ) : null
                        //                 )}
                        //             </div>
                        //         </>
                        //     ) : (
                        //         <p>No entries found for this customer.</p>
                        //     );
                        // }}
                        />
                    </>
                )}
            </div>
            <CreateCustomer />
        </div>
    );
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/Accounts.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/Journal.jsx ---
import ViewTables from "../components/ViewTables";
export default function Journal() { return (<ViewTables tableName='journal' />) };
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/Journal.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/EntryDashboard.css ---
/* General Styles */
body {
    font-family: 'Roboto', Arial, sans-serif;
    background-color: #f5f5f5;
    color: #202124;
    margin: 0;
    padding: 0;
}


body.dark-mode {
    background-color: #121212;
    color: #e0e0e0;
}

.entry-dashboard__container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 20px;
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

body.dark-mode .entry-dashboard__container {
    background-color: #1e1e1e;
    box-shadow: 0 1px 3px rgba(255, 255, 255, 0.1);
}

.container {
    /* max-width: 960px; */
    margin: 0 auto;
    padding: 20px;
}

/* Title */
.entry-dashboard__title {
    font-size: 24px;
    font-weight: 500;
    color: #1a73e8;
    margin-bottom: 20px;
    text-align: center;
}

body.dark-mode .entry-dashboard__title {
    color: #90caf9;
}

/* Form Styles */
.entry-dashboard__form {
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin-bottom: 20px;
}

body.dark-mode .entry-dashboard__form {
    background-color: #1e1e1e;
    box-shadow: 0 1px 3px rgba(255, 255, 255, 0.1);
}

.entry-dashboard__field {
    margin-bottom: 20px;
}

.entry-dashboard__field label {
    font-size: 14px;
    font-weight: 500;
    margin: 10px;
    color: #5f6368;
    /* display: block; */
    margin-bottom: 8px;
}

body.dark-mode .entry-dashboard__field label {
    color: #b0bec5;
}

.entry-dashboard__input {
    /* width: 100%; */
    padding: 10px;
    font-size: 14px;
    border: 1px solid #dadce0;
    border-radius: 4px;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    transition: border-color 0.2s;
}

body.dark-mode .entry-dashboard__input {
    background-color: #2c2c2c;
    color: #e0e0e0;
    border: 1px solid #424242;
    box-shadow: inset 0 1px 2px rgba(255, 255, 255, 0.1);
}

.entry-dashboard__input:focus {
    border-color: #1a73e8;
    outline: none;
}

body.dark-mode .entry-dashboard__input:focus {
    border-color: #90caf9;
}

.entry-dashboard__textarea {
    /* width: 100%; */
    padding: 10px;
    font-size: 14px;
    border: 1px solid #dadce0;
    border-radius: 4px;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    transition: border-color 0.2s;
    resize: vertical;
}

body.dark-mode .entry-dashboard__textarea {
    background-color: #2c2c2c;
    color: #e0e0e0;
    border: 1px solid #424242;
}

.entry-dashboard__textarea:focus {
    border-color: #1a73e8;
    outline: none;
}

body.dark-mode .entry-dashboard__textarea:focus {
    border-color: #90caf9;
}

/* Button Styles */
.entry-dashboard__button-group {
    /* display: flex; */
    /* gap: 10px; */
    width: 100%;
    justify-content: space-between;
    align-items: center;
    flex-direction: row;
    flex-wrap: wrap;
}

.div {
    margin: 10px;
    padding: 10px;
}

.entry-dashboard__button-group-nav {
    display: flex;
    gap: 10px;
    flex-wrap: nowrap;
    justify-content: center;
    background-color: #f1f3f4;
    padding: 10px;
    border-bottom: 2px solid #dadce0;
}

body.dark-mode .entry-dashboard__button-group-nav {
    background-color: #2c2c2c;
    border-bottom: 2px solid #424242;
}

.entry-dashboard__button-group-nav .nav-item {
    padding: 10px 15px;
    font-size: 14px;
    font-weight: 500;
    color: #202124;
    cursor: pointer;
    transition: color 0.2s, font-weight 0.2s;
}

body.dark-mode .entry-dashboard__button-group-nav .nav-item {
    color: #e0e0e0;
}

.entry-dashboard__button-group-nav .nav-item:hover {
    color: #1a73e8;
}

body.dark-mode .entry-dashboard__button-group-nav .nav-item:hover {
    color: #90caf9;
}

.entry-dashboard__button-group-nav .nav-item--active {
    color: #1a73e8;
    font-weight: bold;
    border-bottom: 2px solid #1a73e8;
}

body.dark-mode .entry-dashboard__button-group-nav .nav-item--active {
    color: #90caf9;
    border-bottom: 2px solid #90caf9;
}

.entry-dashboard__button {
    padding: 10px 15px;
    font-size: 14px;
    font-weight: 500;
    color: #202124;
    background-color: #f1f3f4;
    border: 1px solid #dadce0;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s, color 0.2s;
}

body.dark-mode .entry-dashboard__button {
    background-color: #2c2c2c;
    color: #e0e0e0;
    border: 1px solid #424242;
}

.entry-dashboard__button:hover {
    background-color: #e8f0fe;
    color: #1a73e8;
}

body.dark-mode .entry-dashboard__button:hover {
    background-color: #424242;
    color: #90caf9;
}

.entry-dashboard__button--active {
    background-color: #1a73e8;
    color: #ffffff;
    border-color: #1a73e8;
}

body.dark-mode .entry-dashboard__button--active {
    background-color: #90caf9;
    color: #121212;
    border-color: #90caf9;
}

.entry-dashboard__submit-button {
    /* width: 100%; */
    padding: 12px;
    font-size: 16px;
    font-weight: 500;
    color: #ffffff;
    background-color: #1a73e8;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s;
}

body.dark-mode .entry-dashboard__submit-button {
    background-color: #90caf9;
    color: #121212;
}

.entry-dashboard__submit-button:hover {
    background-color: #174ea6;
}

body.dark-mode .entry-dashboard__submit-button:hover {
    background-color: #64b5f6;
}

/* Dropdown Styles */
.entry-dashboard__dropdown {
    position: absolute;
    background-color: #ffffff;
    border: 1px solid #dadce0;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-top: 5px;
    max-height: 200px;
    overflow-y: auto;
    z-index: 10;
    width: 100%;
    /* Ensures the dropdown aligns with the width of the field */
    left: 0;
    /* Aligns the dropdown directly below the field */
}

body.dark-mode .entry-dashboard__dropdown {
    background-color: #2c2c2c;
    border: 1px solid #424242;
    box-shadow: 0 2px 4px rgba(255, 255, 255, 0.1);
}

.entry-dashboard__dropdown-item {
    padding: 10px;
    font-size: 14px;
    color: #202124;
    cursor: pointer;
    transition: background-color 0.2s;
}

body.dark-mode .entry-dashboard__dropdown-item {
    color: #e0e0e0;
}

.entry-dashboard__dropdown-item:hover {
    background-color: #f1f3f4;
}

body.dark-mode .entry-dashboard__dropdown-item:hover {
    background-color: #424242;
}

/* Summary Section */
.entry-dashboard__summary {
    background-color: #f8f9fa;
    border: 1px solid #dadce0;
    border-radius: 4px;
    padding: 15px;
    margin-top: 20px;
}

body.dark-mode .entry-dashboard__summary {
    background-color: #1e1e1e;
    border: 1px solid #424242;
}

.entry-dashboard__summary h5 {
    font-size: 16px;
    font-weight: 500;
    color: #202124;
    margin-bottom: 10px;
}

body.dark-mode .entry-dashboard__summary h5 {
    color: #e0e0e0;
}

.entry-dashboard__summary p {
    font-size: 14px;
    color: #5f6368;
    margin: 5px 0;
}

body.dark-mode .entry-dashboard__summary p {
    color: #b0bec5;
}

/* Recent Entries Section */
.entry-dashboard__recent-title {
    font-size: 18px;
    font-weight: 500;
    color: #202124;
    margin-top: 20px;
}

body.dark-mode .entry-dashboard__recent-title {
    color: #e0e0e0;
}

.entry-dashboard__toggle-button {
    width: 100%;
    padding: 10px;
    font-size: 14px;
    font-weight: 500;
    color: #1a73e8;
    background-color: #e8f0fe;
    border: 1px solid #dadce0;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s, color 0.2s;
}

body.dark-mode .entry-dashboard__toggle-button {
    background-color: #424242;
    color: #90caf9;
    border: 1px solid #424242;
}

.entry-dashboard__toggle-button:hover {
    background-color: #d2e3fc;
    color: #174ea6;
}

body.dark-mode .entry-dashboard__toggle-button:hover {
    background-color: #555555;
    color: #64b5f6;
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/EntryDashboard.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/AddEntry.jsx ---
import { useState } from 'react';
import axios from 'axios';

export default function AddEntry() {
    const [form, setForm] = useState({
        entry_type: 'gold',
        gstin: '',
        weight: '',
        purity: '',
        dated: '',
        bank: false
    });

    const handleChange = e => {
        const { name, value, type, checked } = e.target;
        setForm(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
    };

    const handleSubmit = async e => {
        e.preventDefault();
        try {
            const res = await axios.post('http://localhost:5003/journal/entry', form);
            alert('Entry added!');
        } catch (err) {
            alert('Error adding entry');
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <h2>Add Entry</h2>
            {Object.entries(form).map(([key, val]) => (
                <div key={key}>
                    <label>{key}:</label>
                    <input
                        type={typeof val === 'boolean' ? 'checkbox' : 'text'}
                        name={key}
                        checked={typeof val === 'boolean' ? val : undefined}
                        value={typeof val !== 'boolean' ? val : undefined}
                        onChange={handleChange}
                    />
                </div>
            ))}
            <button type="submit">Submit</button>
        </form>
    );
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/AddEntry.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/Bill.jsx ---
import ViewTables from "../components/ViewTables";
export default function Bill() { return (<ViewTables tableName='bill' />) };
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/Bill.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/Dashboard.jsx ---
import React from 'react';
import EntryDashboard from './EntryDashboard';
// const Dashboard = () => {
//     return (
//         <div className="container mt-4">
//             <div className="card">
//                 <div className="card-body">
//                     <h2 className="card-title text-center mb-4"></h2>
//                     <EntryDashboard />
//                 </div>
//             </div>
//         </div>
//     );
// };
export default EntryDashboard;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/Dashboard.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/Stock.jsx ---
import ViewTables from "../components/ViewTables";
export default function Stock() { return (<ViewTables tableName='stock' />) };
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/Stock.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/ViewRecords.jsx ---
import { useParams } from 'react-router-dom';
import { useEffect, useState } from 'react';
import axios from 'axios';
import DataTable from '../components/DataTable';

export default function ViewRecords() {
    const { table } = useParams();
    const [records, setRecords] = useState([]);

    useEffect(() => {
        axios.get(`http://localhost:5003/api/queries/${table}/all`)
            .then(res => setRecords(res.data || []))
            // .then(res => console.log(res.data))
            .catch(err => console.error(err));
    }, [table]);

    return (
        <div>
            <h2>Viewing Records: {table}</h2>
            <DataTable data={records} />
        </div>
    );
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/ViewRecords.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/EntryDashboard.jsx ---
import React, { useEffect, useMemo, useState } from 'react';
import { insertUnifiedEntry } from '../api/index';
import { fetchAll } from '../api/index'; // assumes you have fetchAll API to get customers
import ViewTables from '../components/ViewTables'; // assumes you have a ViewTables component to display recent entries
import 'bootstrap/dist/js/bootstrap.bundle.min.js'; // Import Bootstrap JS for dropdowns and other components
import './EntryDashboard.css'; // Custom styles for EntryDashboard

const EntryDashboard = () => {
    const [entryType, setEntryType] = useState('');
    const [form, setForm] = useState({
        dated: new Date().toISOString().slice(0, 10),
        bank: false,
        remark_text: null,
        bill_no: null,
        purity: null,
        wt: null,
        rate: null,
        cgst: null,
        sgst: null,
        igst: null,
        cash_amount: null,
        weight: null,
        is_debit: false,
    });

    const [customers, setCustomers] = useState([]);
    const [customerSearchTerm, setCustomerSearchTerm] = useState('');
    const [showCustomerDropdown, setShowCustomerDropdown] = useState(false);
    const [selectedCustomer, setSelectedCustomer] = useState(null);

    useEffect(() => {
        const loadCustomers = async () => {
            try {
                const res = await fetchAll('customer_details', { page: 1, page_size: 100 });
                setCustomers(res.data);
            } catch (err) {
                console.error('Failed to load customers:', err);
            }
        };
        loadCustomers();
    }, []);

    const filteredCustomers = useMemo(() => {
        if (!customerSearchTerm) return customers;
        return customers.filter(c =>
            c.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
            c.phone?.includes(customerSearchTerm)
        );
    }, [customerSearchTerm, customers]);

    const handleCustomerSelect = (customer) => {
        setSelectedCustomer(customer);
        setCustomerSearchTerm(customer.name);
        setShowCustomerDropdown(false);
        sessionStorage.setItem('lastSelectedCustomer', JSON.stringify(customer));
    };

    useEffect(() => {
        const lastCustomer = sessionStorage.getItem('lastSelectedCustomer');
        if (lastCustomer) {
            const parsedCustomer = JSON.parse(lastCustomer);
            setSelectedCustomer(parsedCustomer);
            setCustomerSearchTerm(parsedCustomer.name);
        }
    }, []);

    const handleChange = (field, value) => {
        setForm(prev => ({ ...prev, [field]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!selectedCustomer?.gstin) {
            alert('Please select a valid customer with GSTIN.');
            return;
        }

        const payload = {
            ...form,
            entry_type: entryType,
            gstin: selectedCustomer.gstin,
        };

        const confirmationMessage = `
    Please confirm the following details before submission:

    - Date: ${form.dated} (${new Date(form.dated).toLocaleDateString('en-US', { weekday: 'long' })})
    - ${selectedCustomer?.name || 'N/A'}
    - ${entryType || 'N/A'} Entry
    - ${form.bank ? 'BANK' : 'CASH'} Transaction
    ${entryType === 'bill' ? `
    Bill Details:
    - Bill No: ${form.bill_no || 'N/A'}
    - Purity: ${form.purity || 'N/A'}
    - Weight: ${form.wt || 'N/A'}
    - Rate: ${form.rate || 'N/A'}
    `.trim() : ''}
    ${entryType === 'cash' ? `
    Cash Details:
    - Cash Amount: ${new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(form.cash_amount || 0)}
    `.trim() : ''}
    ${(entryType === 'stock' || entryType === 'gold') ? `
    Stock/Gold Details:
    - Purity: ${form.purity || 'N/A'}
    - Weight: ${form.weight || 'N/A'}
    `.trim() : ''}
    ${entryType === 'remarks' || form.remark_text ? `
    Remarks:
    - ${form.remark_text || 'N/A'}
    `.trim() : ''}
    `.trim();
        if (!window.confirm(confirmationMessage)) {
            return;
        }

        try {
            console.log('Submitting entry with payload:', { payload });
            await insertUnifiedEntry(payload);
            alert('Entry added successfully!');
            setForm({
                dated: new Date().toISOString().slice(0, 10),
                bank: false,
                remark_text: null,
                bill_no: null,
                purity: null,
                wt: null,
                rate: null,
                cgst: null,
                sgst: null,
                igst: null,
                cash_amount: null,
                weight: null,
                is_debit: false
            });
        } catch (error) {
            console.error(error);
            alert(error?.response?.data?.error || 'Failed to insert entry.');
        }
    };

    const renderFields = () => {
        switch (entryType) {
            case 'bill':
                return (
                    <>
                        <input className="entry-dashboard__input" placeholder="Bill No" value={form.bill_no} onChange={(e) => handleChange('bill_no', e.target.value)} />
                        <div></div >
                        Weight Details: <span></span>
                        <input className="entry-dashboard__input" placeholder="Purity" value={form.purity} onChange={(e) => handleChange('purity', e.target.value)} />
                        <input
                            className="entry-dashboard__input"
                            placeholder="Weight (wt)"
                            type="number"
                            value={parseFloat(form.wt).toFixed(3) || ''}
                            onChange={(e) => handleChange('wt', parseFloat(e.target.value) || 0)}
                        />
                        <input className="entry-dashboard__input" placeholder="Rate" type="number" value={form.rate} onChange={(e) => handleChange('rate', e.target.value)} />
                        <div></div>
                        Taxes: <span></span>
                        <input className="entry-dashboard__input" placeholder="CGST" type="number" value={form.cgst} onChange={(e) => handleChange('cgst', e.target.value)} />
                        <input className="entry-dashboard__input" placeholder="SGST" type="number" value={form.sgst} onChange={(e) => handleChange('sgst', e.target.value)} />
                        <input className="entry-dashboard__input" placeholder="IGST" type="number" value={form.igst} onChange={(e) => handleChange('igst', e.target.value)} />
                        <button
                            type="button"
                            className={`entry-dashboard__button ${form.is_debit ? 'entry-dashboard__button--debit' : 'entry-dashboard__button--credit'}`}
                            onClick={() => handleChange('is_debit', !form.is_debit)}
                        >
                            {form.is_debit ? 'Debit' : 'Credit'}
                        </button>
                        <div className="entry-dashboard__summary">
                            <strong>Formatted Amount: </strong>
                            {new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(form.amount || 0)}
                            <span>
                                {form.is_debit ? ' Debited' : ' Credited'}
                            </span>
                        </div>
                    </>
                );
            case 'cash':
                return (
                    <>

                        <div className="entry-dashboard__button-group div">
                            <input
                                className="entry-dashboard__input"
                                placeholder="Cash Amount"
                                type="number"
                                value={form.cash_amount}
                                onChange={(e) => handleChange('cash_amount', parseFloat(e.target.value) || 0)}
                                style={{ color: form.cash_amount < 0 ? 'red' : 'green' }}
                            />
                            <button
                                type="button"
                                className="entry-dashboard__button"
                                onClick={() => handleChange('cash_amount', (form.cash_amount || 0) * 100000)}
                            >
                                Convert to Lakhs
                            </button>
                            <button
                                type="button"
                                className={`entry-dashboard__button ${form.is_debit ? 'entry-dashboard__button--debit' : 'entry-dashboard__button--credit'}`}
                                onClick={() => {
                                    handleChange('is_debit', !form.is_debit);
                                }}
                            >
                                {form.is_debit ? 'Debit' : 'Credit'}
                            </button >
                        </div>
                        <div className="entry-dashboard__summary">
                            <strong>Formatted Amount: </strong>
                            {new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(form.cash_amount || 0)}
                            <span>
                                {form.is_debit ? ' Debited' : ' Credited'}
                            </span>
                        </div>
                    </>
                );
            case 'stock':
            case 'gold':
                return (
                    <>
                        <div className="entry-dashboard__field">
                            <div>
                                <div className="entry-dashboard__button-group div">
                                    <label >Purity</label>
                                    <input
                                        className="entry-dashboard__input"
                                        placeholder="Enter purity"
                                        value={form.purity}
                                        onChange={(e) => handleChange('purity', e.target.value)}
                                    />
                                    {['18CT', '22CT', '99.5', '99.99'].map((option) => (
                                        <button
                                            key={option}
                                            type="button"
                                            className={`entry-dashboard__button ${form.purity === option ? 'entry-dashboard__button--active' : ''}`}
                                            onClick={() => handleChange('purity', option)}
                                        >
                                            {option}
                                        </button>
                                    ))}
                                </div>
                            </div>
                        </div>
                        <input
                            className="entry-dashboard__input"
                            placeholder="Weight"
                            type="number"
                            value={form.weight || ''}
                            onChange={(e) => handleChange('weight', parseFloat(e.target.value) || 0)}
                        />
                        <button
                            type="button"
                            className={`entry-dashboard__button ${form.is_debit ? 'entry-dashboard__button--debit' : 'entry-dashboard__button--credit'}`}
                            onClick={() => handleChange('is_debit', !form.is_debit)}
                        >
                            {form.is_debit ? 'Debit' : 'Credit'}
                        </button>
                        <div className="entry-dashboard__summary">
                            <h4>
                                <strong>Final Weight: </strong>
                                {new Intl.NumberFormat('en-IN', { style: 'decimal', minimumFractionDigits: 3 }).format(form.weight || 0)}
                                <span>
                                    {form.is_debit ? ' Debited' : ' Credited'}
                                </span>
                            </h4>
                        </div>
                    </>
                );
            case 'remarks':
                return (
                    <textarea className="entry-dashboard__textarea" placeholder="Remark Text" value={form.remark_text} onChange={(e) => handleChange('remark_text', e.target.value)} />
                );
            default:
                return null;
        }
    };

    const [showTable, setShowTable] = useState(false);

    return (
        <div className="entry-dashboard__container">
            <h2 className="entry-dashboard__title">{(entryType.toUpperCase() || "Unified")} Dashboard</h2>

            <form onSubmit={handleSubmit} className="entry-dashboard__form">
                <div className="entry-dashboard__field">
                    <div className="entry-dashboard__button-group-nav">
                        {['bill', 'cash', 'stock', 'gold', 'remarks'].map((type) => (
                            <button
                                key={type}
                                type="button"
                                className={`entry-dashboard__button ${entryType === type ? 'entry-dashboard__button--active' : ''}`}
                                onClick={() => setEntryType(type)}
                            >
                                {type.charAt(0).toUpperCase() + type.slice(1)}
                            </button>
                        ))}
                    </div>
                </div>

                <div className="entry-dashboard__field">
                    <button
                        type="button"
                        className={`entry-dashboard__button ${form.bank ? 'entry-dashboard__button--bank' : 'entry-dashboard__button--cash'}`}
                        onClick={() => handleChange('bank', !form.bank)}
                    >
                        {form.bank ? 'Bank Transaction' : 'Cash Transaction'}
                    </button>
                </div>
                <div className="entry-dashboard__field">
                    <label>Customer Name</label>
                    <input
                        className="entry-dashboard__input"
                        value={customerSearchTerm}
                        placeholder="Search or enter customer name"
                        onChange={(e) => {
                            setCustomerSearchTerm(e.target.value);
                            setShowCustomerDropdown(true);
                        }}
                        onFocus={() => setShowCustomerDropdown(true)}
                    />
                    {showCustomerDropdown && (
                        <ul className="entry-dashboard__dropdown">
                            {filteredCustomers.map((c, i) => (
                                <li
                                    key={i}
                                    className="entry-dashboard__dropdown-item"
                                    onClick={() => handleCustomerSelect(c)}
                                >
                                    {c.name} ({c.phone})
                                </li>
                            ))}
                        </ul>
                    )}
                    {selectedCustomer && (
                        <>
                            <input className="entry-dashboard__input" disabled value={selectedCustomer.gstin} placeholder="GSTIN" />
                            <input className="entry-dashboard__input" disabled value={selectedCustomer.address} placeholder="Address" />
                        </>
                    )}
                </div>

                <div className="entry-dashboard__button-group">
                    <input type="date" className="entry-dashboard__input" value={form.dated} onChange={(e) => handleChange('dated', e.target.value)} />
                    <button
                        type="button"
                        className={`entry-dashboard__button ${form.dated === new Date().toISOString().slice(0, 10) ? 'entry-dashboard__button--active' : ''}`}
                        onClick={() => handleChange('dated', new Date().toISOString().slice(0, 10))}
                    >
                        Today
                    </button>
                    <button
                        type="button"
                        className={`entry-dashboard__button ${form.dated === new Date(Date.now() - 86400000).toISOString().slice(0, 10) ? 'entry-dashboard__button--active' : ''}`}
                        onClick={() => handleChange('dated', new Date(Date.now() - 86400000).toISOString().slice(0, 10))}
                    >
                        Yesterday
                    </button>
                    <button
                        type="button"
                        className={`entry-dashboard__button ${form.dated === new Date(Date.now() - 2 * 86400000).toISOString().slice(0, 10) ? 'entry-dashboard__button--active' : ''}`}
                        onClick={() => handleChange('dated', new Date(Date.now() - 2 * 86400000).toISOString().slice(0, 10))}
                    >
                        Day Before Yesterday
                    </button>
                </div>


                {renderFields()}

                <div className="entry-dashboard__summary">
                    <h5>Entry Summary</h5>
                    <p><strong>Date:</strong> {form.dated} ({new Date(form.dated).toLocaleDateString('en-US', { weekday: 'long' })})</p>
                    <p><strong>Customer Name:</strong> {selectedCustomer?.name || 'N/A'}</p>
                    <p><strong>Entry Type:</strong> {entryType || 'N/A'}</p>
                    {entryType === 'bill' && (
                        <>
                            <p><strong>Bill No:</strong> {form.bill_no || 'N/A'}</p>
                            <p><strong>Purity:</strong> {form.purity || 'N/A'}</p>
                            <p><strong>Weight:</strong> {form.wt || 'N/A'}</p>
                            <p><strong>Rate:</strong> {form.rate || 'N/A'}</p>
                        </>
                    )}
                    {entryType === 'cash' && (
                        <p><strong>Cash Amount:</strong> {new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(form.cash_amount || 0)}</p>
                    )}
                    {entryType === 'stock' || entryType === 'gold' ? (
                        <>
                            <p><strong>Purity:</strong> {form.purity || 'N/A'}</p>
                            <p><strong>Weight:</strong> {form.weight || 'N/A'}</p>
                        </>
                    ) : null}
                    {entryType === 'remarks' && (
                        <p><strong>Remark:</strong> {form.remark_text || 'N/A'}</p>
                    )}
                    <p><strong>Bank Transaction:</strong> {form.bank ? 'Yes' : 'No'}</p>
                </div>

                <button type="submit" className="entry-dashboard__submit-button">Submit Entry</button>

                {entryType !== 'remarks' && (
                    <textarea className="entry-dashboard__textarea" placeholder="Remark (Optional)" value={form.remark_text} onChange={(e) => handleChange('remark_text', e.target.value)} />
                )}
            </form>

            <button
                type="button"
                className="entry-dashboard__toggle-button"
                onClick={() => setShowTable(!showTable)}
            >
                {showTable ? 'Hide Recent Entries' : 'Show Recent Entries'}
            </button>

            {showTable && (
                <>
                    <h3 className="entry-dashboard__recent-title">Recent Journal Entries</h3>
                    <ViewTables
                        tableName={entryType || 'journal'}
                        initialParams={{
                            page_size: 5,
                            sort_by: 'id',
                            sort_order: "desc"
                        }}
                    />
                </>
            )}
        </div>
    );
};

export default EntryDashboard;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/EntryDashboard.jsx ---
