

--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/create.py ---
import os

def read_selected_files():
    output_file = "console.txt"
    current_dir = os.getcwd()
    valid_extensions = {'.css', '.js','.jsx','.json', '.py'}

    with open(output_file, 'w', encoding='utf-8') as out_f:
        for foldername, subfolders, filenames in os.walk(current_dir):
            for filename in filenames:
                filepath = os.path.join(foldername, filename)

                # Skip the output file itself
                if os.path.abspath(filepath) == os.path.abspath(output_file):
                    continue

                # Check file extension
                _, ext = os.path.splitext(filename)
                if ext.lower() not in valid_extensions:
                    continue

                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        out_f.write(f"\n\n--- START OF FILE: {filepath} ---\n")
                        out_f.write(f.read())
                        out_f.write(f"\n--- END OF FILE: {filepath} ---\n")
                except Exception as e:
                    print(f"Skipping file {filepath}: {e}")

if __name__ == '__main__':
    read_selected_files()
    print("Done. All .css, .js, and .py files written to 'console.txt'.")
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/create.py ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/vite.config.js ---
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173
  }
});
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/vite.config.js ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/package.json ---
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.6.7",
    "bootstrap": "^5.3.3",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^6.23.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.4.1",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "vite": "^6.3.5"
  }
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/package.json ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/eslint.config.js ---
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/eslint.config.js ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/routes.jsx ---
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Dashboard from './pages/Dashboard';
import AddEntry from './pages/AddEntry';
import ViewRecords from './pages/ViewRecords';
import NavBar from './components/NavBar';

import React, { useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS
import Header from './components/Header';
import Sidebar from './components/Sidebar';
import Dashboardx from './components/Dashboardx';
import Sales from './components/Sales';
// import Purchase from './components/Purchase';
import Stock from './components/Stock';
import Bills from './components/Bills';
import Receipt from './components/Receipt';
import UnifiedEntryForm from './components/UnifiedEntryForm';
// import ExcelInterface from './components/ExcelInterface';
// import CreateBill from './components/CreateBill';
import ReceiptPage from './components/ReceiptPage';

const AppRoutes = () => (
    <Router>

        <NavBar />
        <Header />
        <Dashboard />
        <Routes>
            <Route path="/" element={<Dashboard />} />
            <Route path="/UnifiedEntryForm" element={<UnifiedEntryForm />} />
            <Route path="/add" element={<AddEntry />} />
            <Route path="/view/:table" element={<ViewRecords />} />
            <Route path="/sales" element={<Sales />} />
            {/* <Route path="/purchase" element={<Purchase />} /> */}
            <Route path="/stock" element={<Stock />} />
            <Route path="/bills" element={<Bills />} />
            <Route path="/receipt" element={<Receipt />} />
            {/* <Route path="/excel" element={<ExcelInterface />} /> */}
            {/* <Route path="/create-bill" element={<CreateBill />} /> */}
            <Route path="/receipt-page" element={<ReceiptPage />} />
        </Routes>
    </Router>
);


export default AppRoutes;
// const AppRoutes = () => (
//     <Dashboard />    
// );




--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/routes.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/App.css ---
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/App.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/index.css ---
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/index.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/main.jsx ---
// /frontend/src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import AppRoutes from './routes';
import App from './App';
ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
    <AppRoutes />
  </React.StrictMode>
);
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/main.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/App.jsx ---
import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css'

function App() {
  const [count, setCount] = useState(0)

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React</h1>
      <div className="card">
        <button onClick={() => setCount((count) => count + 1)}>
          count is {count}
        </button>
        <p>
          Edit <code>src/App.jsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </>
  )
}

export default App

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/App.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Header.jsx ---
import React from 'react';

const Header = () => {
  return (
    <div className="header bg-primary text-white p-4">
      <h1>MDKJ Enterprise Dashboard</h1>
    </div>
  );
};

export default Header;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Header.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/PrintPreview.jsx ---
import React, { forwardRef } from 'react';
import convertToWords from './utils.js';
const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
    marginTop: '20px',
};

const thStyle = {
    border: '1px solid #ddd',
    padding: '8px',
    backgroundColor: '#f5f5f5',
    textAlign: 'left',
    fontWeight: 'bold',
};

const tdStyle = {
    border: '1px solid #ddd',
    padding: '8px',
    textAlign: 'left',
};

const PrintPreview = forwardRef(({
    billHeader,
    items,
    calculations,
    storeInfo,
}, ref) => (
    <div ref={ref} style={{ padding: '40px', backgroundColor: '#fff', color: '#333', fontFamily: 'Segoe UI', boxShadow: '0 0 10px rgba(0,0,0,0.1)', maxWidth: '900px', margin: 'auto' }}>
        {/* Header */}
        <div style={{ textAlign: 'center', marginBottom: '40px', borderBottom: '2px solid #333', paddingBottom: '20px' }}>
            <p style={{ margin: '0 0 10px' }}>{storeInfo.pagetype}</p>
            <h1 style={{ fontSize: '36px', margin: '0 0 15px' }}>{storeInfo.storeName}</h1>
            <div style={{ color: '#666', lineHeight: '1.4' }}>
                {storeInfo.storeAddress.split('\n').map((line, i) => (
                    <p key={i} style={{ margin: '5px 0' }}>{line}</p>
                ))}
            </div>
            <p style={{ color: '#666', marginTop: '10px' }}>
                Phone: {storeInfo.phone} | Email: {storeInfo.email}
            </p>
        </div>

        {/* Customer Info */}
        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '30px' }}>
            <div>
                <h3 style={{ margin: '0 0 10px' }}>Bill To:</h3>
                <p style={{ margin: '5px 0', fontSize: '16px' }}>
                    <strong>{billHeader.customerName || 'Customer Name'}</strong>
                </p>
                {billHeader.customerPhone && <p style={{ margin: '5px 0' }}>Phone: {billHeader.customerPhone}</p>}
                {billHeader.customerAddress && <p style={{ margin: '5px 0', whiteSpace: 'pre-line' }}>{billHeader.customerAddress}</p>}
                {billHeader.customerEmail && <p style={{ margin: '5px 0' }}>Email: {billHeader.customerEmail}</p>}
            </div>
            <div style={{ textAlign: 'right' }}>
                <p style={{ margin: '5px 0' }}><strong>Bill #:</strong> {billHeader.billNumber}</p>
                <p style={{ margin: '5px 0' }}><strong>Date:</strong> {billHeader.date}</p>
            </div>
        </div>

        {/* Items Table */}
        <div>
            <h3 style={{ marginBottom: '16px', color: '#444' }}>Items</h3>
            <table style={tableStyle}>
                <thead>
                    <tr>
                        <th style={thStyle}>S.No</th>
                        <th style={thStyle}>Description</th>
                        <th style={thStyle}>HSN/SAC</th>
                        <th style={thStyle}>Purity</th>
                        <th style={thStyle}>Weight (gms)</th>
                        <th style={thStyle}>Rate (₹)</th>
                        <th style={thStyle}>Amount (₹)</th>
                    </tr>
                </thead>
                <tbody>
                    {items.map((item, index) => (
                        <tr key={item.id || index}>
                            <td style={tdStyle}>{index + 1}</td>
                            <td style={tdStyle}>{item.description}</td>
                            <td style={tdStyle}>{item.hsnSac}</td>
                            <td style={tdStyle}>{item.purity}</td>
                            <td style={tdStyle}>{item.weight.toFixed(3)}</td>
                            <td style={tdStyle}>{item.rate.toFixed(2)}</td>
                            <td style={tdStyle}>{item.amount.toFixed(2)}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>

        {/* Tax Summary */}
        <div style={{ marginTop: '30px' }}>
            <h3 style={{ marginBottom: '16px', color: '#444' }}>Tax Summary</h3>
            <table style={tableStyle}>
                <tbody>
                    <tr>
                        <td style={tdStyle}>Total Taxable</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>₹{calculations.totalTaxable}</td>
                    </tr>
                    <tr>
                        <td style={tdStyle}>CGST ({calculations.cgstRate}%)</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>₹{calculations.cgstAmount}</td>
                    </tr>
                    <tr>
                        <td style={tdStyle}>SGST ({calculations.sgstRate}%)</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>₹{calculations.sgstAmount}</td>
                    </tr>
                    <tr>
                        <td style={tdStyle}>IGST ({calculations.igstRate}%)</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>₹{calculations.igstAmount}</td>
                    </tr>
                    <tr>
                        <td style={tdStyle}>Hallmarking Charges</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>₹{calculations.hallmarkingTotal}</td>
                    </tr>
                    <tr>
                        <td style={tdStyle}>Discount</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>-₹{calculations.discount}</td>
                    </tr>
                    <tr>
                        <td style={tdStyle}>Round Off</td>
                        <td style={{ ...tdStyle, textAlign: 'right' }}>{calculations.roundOff >= 0 ? '+' : ''}₹{calculations.roundOff}</td>
                    </tr>
                    <tr>
                        <td style={{ ...tdStyle, fontWeight: 'bold' }}>Grand Total</td>
                        <td style={{ ...tdStyle, textAlign: 'right', fontWeight: 'bold' }}>₹{calculations.grandTotal}</td>
                    </tr>
                </tbody>
            </table>
        </div>

        {/* Footer */}
        <div style={{ textAlign: 'center', marginTop: '30px', fontSize: '14px', color: '#666' }}>
            <p>Amount in Words: <strong>{convertToWords(calculations.grandTotal)}</strong></p>
            <p>Thank you for your business!</p>
        </div>
    </div>
));

export default PrintPreview;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/PrintPreview.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/BillPreview.jsx ---
import React from 'react';
import ItemsTable from './ItemsTable.jsx';
import TaxSummary from './TaxSummary.jsx';
import convertToWords from './utils.js';


const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
    marginTop: '30px',
};

const thStyle = {
    padding: '10px',
    border: '1px solid #ddd',
    fontWeight: 'bold',
    textAlign: 'left',
    fontSize: '14px',
};

const tdStyle = {
    padding: '10px',
    border: '1px solid #ddd',
    fontSize: '14px',
};

const BillPreview = ({ items, setItems, total, selectedRowIndex, setSelectedRowIndex, calculations, cgstRate, sgstRate, igstRate, hallmarkingCharges, hallmarkingPieces, hallmarkingCgst, hallmarkingSgst, discount, storeInfo, billHeader, onTotalChange, onChange, onAdd, onDelete, onEditClick, onKeyDown, onCgstChange, onSgstChange, onIgstChange, onHallmarkingCgstChange, onHallmarkingSgstChange, onHallmarkingChange, onPiecesChange, onDiscountChange }) => {
    return (
        <div style={{ padding: '40px', backgroundColor: '#fff', color: '#333', fontFamily: 'Segoe UI', boxShadow: '0 0 10px rgba(0,0,0,0.1)', maxWidth: '900px', margin: 'auto' }}>
            {/* Header */}
            <div style={{ textAlign: 'center', marginBottom: '40px', borderBottom: '2px solid #333', paddingBottom: '20px' }}>
                <p style={{ margin: '0 0 10px' }}>{storeInfo.pagetype}</p>
                <h1 style={{ fontSize: '36px', margin: '0 0 15px' }}>{storeInfo.storeName}</h1>
                <div style={{ color: '#666', lineHeight: '1.4' }}>
                    {storeInfo.storeAddress.split('\n').map((line, i) => (
                        <p key={i} style={{ margin: '5px 0' }}>{line}</p>
                    ))}
                </div>
                <p style={{ color: '#666', marginTop: '10px' }}>
                    Phone: {storeInfo.phone} | Email: {storeInfo.email}
                </p>
            </div>

            {/* Customer Info */}
            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '30px' }}>
                <div>
                    <h3 style={{ margin: '0 0 10px' }}>Bill To:</h3>
                    <p style={{ margin: '5px 0', fontSize: '16px' }}>
                        <strong>{billHeader.customerName || 'Customer Name'}</strong>
                    </p>
                    {billHeader.customerPhone && <p style={{ margin: '5px 0' }}>Phone: {billHeader.customerPhone}</p>}
                    {billHeader.customerAddress && <p style={{ margin: '5px 0', whiteSpace: 'pre-line' }}>{billHeader.customerAddress}</p>}
                    {billHeader.customerEmail && <p style={{ margin: '5px 0' }}>Email: {billHeader.customerEmail}</p>}
                </div>
                <div style={{ textAlign: 'right' }}>
                    <p style={{ margin: '5px 0' }}><strong>Bill #:</strong> {billHeader.billNumber}</p>
                    <p style={{ margin: '5px 0' }}><strong>Date:</strong> {billHeader.date}</p>
                </div>
            </div>

            <ItemsTable
                items={items}
                setItems={setItems}
                total={total}
                onTotalChange={onTotalChange}
                selectedRowIndex={selectedRowIndex}
                onChange={onChange}
                onAdd={onAdd}
                onDelete={onDelete}
                onEditClick={onEditClick}
                onKeyDown={onKeyDown}
                setSelectedRowIndex={setSelectedRowIndex}
            />

            <TaxSummary
                calculations={calculations}
                cgstRate={cgstRate}
                sgstRate={sgstRate}
                igstRate={igstRate}
                hallmarkingCharges={hallmarkingCharges}
                hallmarkingPieces={hallmarkingPieces}
                hallmarkingCgst={hallmarkingCgst}
                hallmarkingSgst={hallmarkingSgst}
                discount={discount}
                onCgstChange={onCgstChange}
                onSgstChange={onSgstChange}
                onIgstChange={onIgstChange}
                onHallmarkingCgstChange={onHallmarkingCgstChange}
                onHallmarkingSgstChange={onHallmarkingSgstChange}
                onHallmarkingChange={onHallmarkingChange}
                onPiecesChange={onPiecesChange}
                onDiscountChange={onDiscountChange}
            />

            <div style={{ marginTop: '30px', padding: '15px', backgroundColor: '#f9f9f9', border: '1px solid #ddd', borderRadius: '4px' }}>
                <strong>Amount in word(s):</strong><br />
                <span style={{ fontSize: '16px', fontWeight: 'bold', color: '#333' }}>
                    {convertToWords(calculations.grandTotal || 0)}
                </span>
            </div>


            {/* Thank you message */}
            <div style={{ textAlign: 'center', marginTop: '40px', color: '#666' }}>
                <p style={{ margin: 0, fontSize: '16px' }}>Thank you for choosing MDKJ Jewellers!</p>
            </div>
        </div>

    );
};

export default BillPreview;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/BillPreview.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/DataTable.jsx ---
export default function DataTable({ data }) {
    if (!data.length) return <p>No data found.</p>;

    const keys = Object.keys(data[0]);

    return (
        <table border="1" cellPadding="5" style={{ width: '100%', marginTop: '1em' }}>
            <thead>
                <tr>{keys.map(key => <th key={key}>{key}</th>)}</tr>
            </thead>
            <tbody>
                {data.map((row, idx) => (
                    <tr key={idx}>
                        {keys.map(key => <td key={key}>{row[key]}</td>)}
                    </tr>
                ))}
            </tbody>
        </table>
    );
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/DataTable.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ExcelInterface.jsx ---
import React, { useState, useEffect } from 'react';
import { fetchData, addData, updateData } from '../apiService';
import 'bootstrap/dist/css/bootstrap.min.css';
import './ExcelInterface.css';

// JSON object to describe the structure of the table
// const tableLayout = [
//   { key: 'product', label: 'Product', type: 'text', editable: true },
//   { key: 'quantity', label: 'Quantity', type: 'number', editable: true },
//   { key: 'price', label: 'Price', type: 'number', editable: true },
//   { key: 'total', label: 'Total', type: 'number', editable: false },
// ];
// const layout = {
//   ID: Date.now(),
//   product: '',
//   quantity: '',
//   price: '',
//   total: ''
// };

// JSON object to describe the structure of the table
const tableLayout = [
  { key: 'PRODUCT', label: 'PRODUCT', type: 'text', editable: true },
  { key: 'QUANTITY', label: 'QUANTITY', type: 'number', editable: true },
  { key: 'PRICE', label: 'PRICE', type: 'number', editable: true },
  { key: 'TOTAL', label: 'TOTAL', type: 'number', editable: false },
];
const layout = {
  ID: Date.now(),
  PRODUCT: '',
  QUANTITY: '',
  PRICE: '',
  TOTAL: ''
};


// AddEntryForm Component
const AddEntryForm = ({ newEntry, setNewEntry, handleAddEntry }) => (
  <div className="mb-2">
    {tableLayout
      .filter((column) => column.editable) // Only render editable fields in the form
      .map((column) => (
        <input
          key={column.key}
          type={column.type === 'number' ? 'number' : 'text'}
          className="form-control mb-2"
          placeholder={column.label}
          value={newEntry[column.key] || ''}
          onChange={(e) => setNewEntry({ ...newEntry, [column.key]: e.target.value })}
        />
      ))}
    <button className="btn btn-success" onClick={handleAddEntry}>
      Add Entry
    </button>
  </div>
);

// DataRow Component
const DataRow = ({
  row,
  rowIndex,
  handleCellChange,
  handleEditClick,
  handleCancelClick,
  selectedRowIndex,
  handleRowHover,
}) => (
  <tr
    key={row.ID}
    className={selectedRowIndex === rowIndex ? 'table-active' : ''}
    onMouseEnter={() => handleRowHover(rowIndex)}
  >
    <td>{row.ID}</td>
    {tableLayout.map((column) => (
      <td key={column.key}>
        {row.isEditing && column.editable ? (
          <input
            type={column.type === 'number' ? 'number' : 'text'}
            className="form-control"
            value={row[column.key]}
            onChange={(e) => handleCellChange(rowIndex, column.key, e.target.value)}
          />
        ) : (
          row[column.key]
        )}
      </td>
    ))}
    <td>
      <button
        className={`btn ${row.isEditing ? 'btn-success' : 'btn-primary'}`}
        onClick={() => handleEditClick(rowIndex, !(row.isEditing))}
      >
        {row.isEditing ? 'Save' : 'Edit'}
      </button>
    </td>
    <td>
      {row.isEditing && (
        <button className="btn btn-danger" onClick={() => handleCancelClick(rowIndex)}>
          Cancel
        </button>
      )}
    </td>
  </tr>
);

// Table Component
const DataTable = ({
  data,
  handleCellChange,
  handleEditClick,
  handleCancelClick,
  selectedRowIndex,
  handleRowHover,
}) => (
  <table className="table table-bordered">
    <thead className="thead-dark">
      <tr>
        <th>ID</th>
        {tableLayout.map((column) => (
          <th key={column.key}>{column.label}</th>
        ))}
        <th>Edit</th>
        <th>Cancel</th>
      </tr>
    </thead>
    <tbody>
      {data.map((row, rowIndex) => (
        <DataRow
          key={rowIndex}
          row={row}
          rowIndex={rowIndex}
          handleCellChange={handleCellChange}
          handleEditClick={handleEditClick}
          handleCancelClick={handleCancelClick}
          selectedRowIndex={selectedRowIndex}
          handleRowHover={handleRowHover}
        />
      ))}
    </tbody>
  </table>
);

// Main ExcelInterface Component
/**
 * ExcelInterface is a React functional component that provides an Excel-like interface
 * for displaying, editing, and managing tabular data. It supports fetching data,
 * inline editing, adding new entries, and inserting rows at specific positions.
 *
 * State:
 * - data: Array of current table data.
 * - sdata: Synchronized copy of data for editing.
 * - selectedRowIndex: Index of the currently hovered or selected row.
 * - newEntry: Object representing a new entry to be added, initialized from `layout`.
 *
 * Effects:
 * - Fetches initial data on mount and synchronizes `data` and `sdata`.
 *
 * Handlers:
 * - handleCellChange: Updates cell value in both `data` and `sdata`.
 * - handleEditClick: Toggles edit mode for a row and manages original row state.
 * - handleCancelClick: Cancels editing and restores original row data.
 * - handleRowHover: Sets the currently hovered row index.
 * - handleAddEntry: Adds a new entry to the table and resets the entry form.
 * - handleAddRow: Inserts a new editable row after the selected row.
 *
 * Renders:
 * - AddEntryForm: Form for adding new entries.
 * - DataTable: Table displaying the data with editing capabilities.
 * - Add Row button: Button to insert a new row.
 *
 * @component
 */
const ExcelInterface = () => {
  const [data, setData] = useState([]);
  const [sdata, setsData] = useState([]);
  const [selectedRowIndex, setSelectedRowIndex] = useState(null);
  const [newEntry, setNewEntry] = useState(layout);

  useEffect(() => {
    fetchData()
      .then((fetchedData) => {
        setData(fetchedData);
        const g = JSON.parse(JSON.stringify(fetchedData));
        setsData(g);
      })
      .catch((error) => console.error('Error fetching data:', error));
  }, []);

  const handleCellChange = (rowIndex, columnKey, value) => {
    const newData = [...data];
    const snewData = [...sdata];
    newData[rowIndex][columnKey] = value;
    snewData[rowIndex][columnKey] = value;
    delete snewData[rowIndex].isEditing;
    setData(newData);
    setsData(snewData);
    console.log(data[rowIndex]);
    console.log(sdata[rowIndex]);
  };

  const handleEditClick = (rowIndex, editing) => {
    if (editing) {
      const newData = [...data];
      newData[rowIndex].isEditing = !newData[rowIndex].isEditing;
      setData(newData);
      if (newData[rowIndex].isEditing) {
        newData[rowIndex].original = { ...newData[rowIndex] };
      }
    } else {
      const row = data[rowIndex];
      const srow = sdata[rowIndex];
      updateData(srow)
        .then(() => {
          const newData = [...data];
          newData[rowIndex].isEditing = false;
          setData(newData);
          fetchData();
        })
        .catch((error) => {
          console.error('Error updating row:', error);
        });
    }
  };

  const handleCancelClick = (rowIndex) => {
    const newData = [...data];
    newData[rowIndex] = { ...newData[rowIndex].original };
    newData[rowIndex].isEditing = false;
    setData(newData);
  };

  const handleRowHover = (rowIndex) => {
    setSelectedRowIndex(rowIndex);
  };

  const handleAddEntry = () => {
    newEntry.ID = Date.now();
    addData(newEntry)
      .then((addedEntry) => {
        setData([...data, addedEntry]);
        setNewEntry(layout);
        fetchData();
      })
      .catch((error) => console.error('Error adding entry:', error));
  };

  const handleAddRow = () => {
    const newRowIndex = selectedRowIndex !== null ? selectedRowIndex + 1 : data.length;
    const newData = [...data];
    const snewData = [...sdata];
    const newline = layout;

    newline.ID = Date.now();
    newline.isEditing = true;
    ;
    newData.splice(newRowIndex, 0, newline);
    snewData.splice(newRowIndex, 0, newline);
    console.log(newData);
    setData(newData);
    setsData(snewData);
    // addData(sdata);
    setSelectedRowIndex(newRowIndex);
  };

  return (
    <div className="container mt-4">
      <h1 className="mb-4">Excel-Like Interface</h1>
      <AddEntryForm newEntry={newEntry} setNewEntry={setNewEntry} handleAddEntry={handleAddEntry} />
      <DataTable
        data={data}
        handleCellChange={handleCellChange}
        handleEditClick={handleEditClick}
        handleCancelClick={handleCancelClick}
        selectedRowIndex={selectedRowIndex}
        handleRowHover={handleRowHover}
      />
      <button className="btn btn-success" onClick={handleAddRow}>
        Add Row
      </button>
    </div>
  );
};

export default ExcelInterface;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ExcelInterface.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ReceiptPage.jsx ---
import React, { useState, useMemo, useRef } from 'react';
import ReactDOMServer from 'react-dom/server';
import BillHeaderForm from './BillHeaderForm';
import ItemsTable from './ItemsTable';
import TaxSummary from './TaxSummary';
import PrintPreview from './PrintPreview';
// import { calculateTotals } from './utils';
import { containerStyle } from './styles';
// import { useReactToPrint } from 'react-to-print';
import BillPreview from './BillPreview';



function calculateTotals({
    items,
    cgstRate,
    sgstRate,
    igstRate,
    hallmarkingCharges,
    hallmarkingPieces,
    hallmarkingCgst,
    hallmarkingSgst,
    discount
}) {
    const totalAmount = items.reduce((sum, item) => sum + (Number(item.amount) || 0), 0);
    const totalTaxable = totalAmount;
    const cgstAmount = (cgstRate / 100) * totalAmount;
    const sgstAmount = (sgstRate / 100) * totalAmount;
    const igstAmount = (igstRate / 100) * totalAmount;

    const hallmarkingTotal = hallmarkingCharges * hallmarkingPieces;
    const hallmarkingCgstAmt = (hallmarkingCgst / 100) * hallmarkingTotal;
    const hallmarkingSgstAmt = (hallmarkingSgst / 100) * hallmarkingTotal;

    const grandTotal =
        totalAmount +
        cgstAmount +
        sgstAmount +
        igstAmount +
        hallmarkingTotal +
        hallmarkingCgstAmt +
        hallmarkingSgstAmt -
        discount;

    return {
        totalTaxable,
        totalAmount,
        cgstAmount,
        sgstAmount,
        igstAmount,
        hallmarkingTotal,
        hallmarkingCgstAmt,
        hallmarkingSgstAmt,
        grandTotal
    };
}


// Dummy customer data for autocomplete (move to a shared file if needed)
const dummyCustomers = [
    {
        id: 1,
        name: 'Rajesh Kumar',
        phone: '+91 98765 43210',
        address: '123 MG Road\nKanpur, UP 208001',
        email: 'rajesh.kumar@email.com'
    },
    {
        id: 2,
        name: 'Priya Sharma',
        phone: '+91 87654 32109',
        address: '456 Civil Lines\nKanpur, UP 208002',
        email: 'priya.sharma@email.com'
    },
    {
        id: 3,
        name: 'Amit Gupta',
        phone: '+91 76543 21098',
        address: '789 Swaroop Nagar\nKanpur, UP 208003',
        email: 'amit.gupta@email.com'
    },
    {
        id: 4,
        name: 'Sunita Verma',
        phone: '+91 65432 10987',
        address: '321 Kalyanpur\nKanpur, UP 208004',
        email: 'sunita.verma@email.com'
    },
    {
        id: 5,
        name: 'Vikram Singh',
        phone: '+91 54321 09876',
        address: '654 Govind Nagar\nKanpur, UP 208005',
        email: 'vikram.singh@email.com'
    }
];


const defaultItem = () => ({
    id: Date.now(),
    description: 'New Gold Ornaments',
    hsnSac: '7113',
    purity: '18 CT',
    weight: 0,
    rate: 7200.00,
    amount: 0,
    isEditing: false
});

const ReceiptPage = () => {
    // --- Bill Header State ---
    const [billHeader, setBillHeader] = useState({
        customerName: '',
        customerPhone: '',
        customerAddress: '',
        customerEmail: '',
        billNumber: 'BILL-' + Date.now().toString().slice(-6),
        date: new Date().toISOString().slice(0, 10)
    });

    // --- Customer Autocomplete State ---
    const [customerSearchTerm, setCustomerSearchTerm] = useState('');
    const [showCustomerDropdown, setShowCustomerDropdown] = useState(false);

    // --- Items State ---
    const [items, setItems] = useState([
        defaultItem()
    ]);
    const [total, setTotal] = useState(0);
    const [selectedRowIndex, setSelectedRowIndex] = useState(null);

    // --- Tax/Charges State ---
    const [cgstRate, setCgstRate] = useState(1.5);
    const [sgstRate, setSgstRate] = useState(1.5);
    const [igstRate, setIgstRate] = useState(0);
    const [hallmarkingCharges, setHallmarkingCharges] = useState(45.00);
    const [hallmarkingPieces, setHallmarkingPieces] = useState(0);
    const [hallmarkingCgst, setHallmarkingCgst] = useState(9);
    const [hallmarkingSgst, setHallmarkingSgst] = useState(9);
    const [discount, setDiscount] = useState(0);



    // --- Store Info ---
    const storeInfo = {
        pagetype: 'TAX INVOICE',
        storeName: 'MDKJ JEWELLERS',
        storeAddress: 'Shop No. 45, Birhana Road\nKanpur, Uttar Pradesh 208001',
        phone: '+91 98765 12345',
        email: 'mdkjjewellers@gmail.com'
    };

    const handleHallmarkingChargesChange = (hallmarkingCharges) => {
        setHallmarkingCharges(hallmarkingCharges);
        const total = hallmarkingCharges * hallmarkingPieces;
        // setHallmarkingCgst((total * hallmarkingCgst) / 100);
        // setHallmarkingSgst((total * hallmarkingSgst) / 100);
    };
    const handleHallmarkingPiecesChange = (hallmarkingPieces) => {
        setHallmarkingPieces(hallmarkingPieces);
        const total = hallmarkingCharges * hallmarkingPieces;
        // setHallmarkingCgst((total * hallmarkingCgst) / 100);
        // setHallmarkingSgst((total * hallmarkingSgst) / 100);
    };


    // --- Customer Autocomplete Logic ---
    const filteredCustomers = useMemo(() => {
        if (!customerSearchTerm) return dummyCustomers;
        return dummyCustomers.filter(customer =>
            customer.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
            customer.phone.includes(customerSearchTerm)
        );
    }, [customerSearchTerm]);

    const handleCustomerSelect = (customer) => {
        setBillHeader(prev => ({
            ...prev,
            customerName: customer.name,
            customerPhone: customer.phone,
            customerAddress: customer.address,
            customerEmail: customer.email
        }));
        setCustomerSearchTerm(customer.name);
        setShowCustomerDropdown(false);
    };

    const handleCustomerSearch = (value) => {
        setCustomerSearchTerm(value);
        setBillHeader(prev => ({ ...prev, customerName: value }));
        setShowCustomerDropdown(value.length > 0);
    };

    // --- Bill Header Change Handler ---
    const handleHeaderChange = (field, value) => {
        setBillHeader(prev => ({ ...prev, [field]: value }));
    };

    // --- Items Logic (auto-calc amount, edit/save, add/delete, keyboard nav) ---
    const handleItemChange = (rowIndex, field, value) => {
        const updatedItems = [...items];
        if (field === 'weight' || field === 'rate') {
            const numValue = parseFloat(value) || 0;
            updatedItems[rowIndex][field] = numValue;
            updatedItems[rowIndex].amount = (parseFloat(updatedItems[rowIndex].weight) || 0) * (parseFloat(updatedItems[rowIndex].rate) || 0);
        } else if (field === 'amount') {
            updatedItems[rowIndex][field] = parseFloat(value) || 0;
        } else {
            updatedItems[rowIndex][field] = value;
        }
        setItems(updatedItems);
    };

    const handleEditClick = (rowIndex) => {
        const updatedItems = [...items];
        updatedItems[rowIndex].isEditing = !updatedItems[rowIndex].isEditing;
        setItems(updatedItems);
    };

    const handleAddRow = () => {
        const newRowIndex = selectedRowIndex !== null ? selectedRowIndex + 1 : items.length;
        const updatedItems = [...items];
        updatedItems.splice(newRowIndex, 0, {
            ...defaultItem(),
            id: Date.now(),
            isEditing: true
        });
        setItems(updatedItems);
        setSelectedRowIndex(newRowIndex);
    };

    const handleDeleteRow = (rowIndex) => {
        if (items.length > 1) {
            const updatedItems = items.filter((_, idx) => idx !== rowIndex);
            setItems(updatedItems);
        }
    };

    const handleKeyDown = (event, rowIndex, field) => {
        if (event.key === 'Enter') {
            handleEditClick(rowIndex);
        } else if (event.key === 'Tab') {
            event.preventDefault();
            const fields = ['description', 'hsnSac', 'purity', 'weight', 'rate', 'amount'];
            const currentFieldIndex = fields.indexOf(field);

            if (currentFieldIndex < fields.length - 1) {
                const nextField = fields[currentFieldIndex + 1];
                const nextInput = document.querySelector(`input[data-row="${rowIndex}"][data-field="${nextField}"]`);
                if (nextInput) nextInput.focus();
            } else if (rowIndex < items.length - 1) {
                const nextInput = document.querySelector(`input[data-row="${rowIndex + 1}"][data-field="description"]`);
                if (nextInput) nextInput.focus();
            }
        }
    };

    // --- Calculations ---
    const calculations = useMemo(() => {
        return calculateTotals({
            items,
            cgstRate,
            sgstRate,
            igstRate,
            hallmarkingCharges,
            hallmarkingPieces,
            hallmarkingCgst,
            hallmarkingSgst,
            discount
        });
    }, [
        items,
        cgstRate,
        sgstRate,
        igstRate,
        hallmarkingCharges,
        hallmarkingPieces,
        hallmarkingCgst,
        hallmarkingSgst,
        discount
    ]);

    // --- Print Handler ---

    const componentRef = useRef(null);
    // const handlePrint = useReactToPrint({
    //     contentRef: componentRef,
    //     documentTitle: 'MDKJ_Receipt',
    //     copyStyles: true,
    // });

    const containerStyle = {
        maxWidth: '1400px',
        margin: '0 auto',
        padding: '20px',
        fontFamily: 'Arial, sans-serif',
        backgroundColor: '#f8f9fa'
    };

    const headerSectionStyle = {
        backgroundColor: 'white',
        padding: '30px',
        borderRadius: '8px',
        marginBottom: '20px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
    };

    const formGridStyle = {
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
        gap: '20px'
    };

    const labelStyle = {
        display: 'block',
        marginBottom: '5px',
        fontWeight: 'bold',
        color: '#333'
    };

    const inputStyle = {
        width: '100%',
        padding: '8px 12px',
        border: '1px solid #ddd',
        borderRadius: '4px',
        fontSize: '14px'
    };

    const customerDropdownStyle = {
        position: 'absolute',
        top: '100%',
        left: 0,
        right: 0,
        backgroundColor: 'white',
        border: '1px solid #ddd',
        borderTop: 'none',
        borderRadius: '0 0 4px 4px',
        maxHeight: '200px',
        overflowY: 'auto',
        zIndex: 1000
    };

    const customerOptionStyle = {
        padding: '10px',
        cursor: 'pointer',
        borderBottom: '1px solid #eee'
    };

    const billPreviewStyle = {
        backgroundColor: 'white',
        padding: '40px',
        borderRadius: '8px',
        marginBottom: '20px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
    };

    const tableStyle = {
        width: '100%',
        borderCollapse: 'collapse',
        margin: '20px 0'
    };

    const thStyle = {
        border: '1px solid #ddd',
        padding: '12px',
        backgroundColor: '#f5f5f5',
        fontWeight: 'bold',
        textAlign: 'left'
    };

    const tdStyle = {
        border: '1px solid #ddd',
        padding: '8px'
    };

    const controlsStyle = {
        display: 'flex',
        flexWrap: 'wrap',
        gap: '15px',
        alignItems: 'center',
        backgroundColor: 'white',
        padding: '20px',
        borderRadius: '8px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
    };

    const buttonStyle = {
        padding: '8px 16px',
        border: 'none',
        borderRadius: '4px',
        cursor: 'pointer',
        fontSize: '14px'
    };

    const editButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#007bff',
        color: 'white',
        marginRight: '5px'
    };

    const saveButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#28a745',
        color: 'white',
        marginRight: '5px'
    };

    const deleteButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#dc3545',
        color: 'white'
    };

    const billInfo = {
        storeName: storeInfo.storeName,
        storeAddress: storeInfo.storeAddress,
        phone: storeInfo.phone,
        email: storeInfo.email,
        billNumber: billHeader.billNumber,
        date: billHeader.date,
        customerName: billHeader.customerName,
        customerPhone: billHeader.customerPhone,
        customerAddress: billHeader.customerAddress,
        customerEmail: billHeader.customerEmail
    };

    return (<div style={containerStyle}>
        {/* --- Bill Header Form Section --- */}
        <div style={{ marginBottom: '40px' }}>
            <BillHeaderForm
                billHeader={billHeader}
                onChange={setBillHeader}
                customerSearchTerm={customerSearchTerm}
                onCustomerSearch={handleCustomerSearch}
                filteredCustomers={filteredCustomers}
                showCustomerDropdown={showCustomerDropdown}
                onCustomerSelect={handleCustomerSelect}
                setShowCustomerDropdown={setShowCustomerDropdown}
            />
        </div>

        {/* --- Bill Preview Section --- */}
        <div style={{ marginBottom: '40px' }}>
            <BillPreview
                items={items}
                setItems={setItems}
                total={total}
                selectedRowIndex={selectedRowIndex}
                setSelectedRowIndex={setSelectedRowIndex}
                calculations={calculations}
                cgstRate={cgstRate}
                sgstRate={sgstRate}
                igstRate={igstRate}
                hallmarkingCharges={hallmarkingCharges}
                hallmarkingPieces={hallmarkingPieces}
                hallmarkingCgst={hallmarkingCgst}
                hallmarkingSgst={hallmarkingSgst}
                discount={discount}
                storeInfo={storeInfo}
                billHeader={billHeader}
                onTotalChange={setTotal}
                onChange={handleItemChange}
                onAdd={handleAddRow}
                onDelete={handleDeleteRow}
                onEditClick={handleEditClick}
                onKeyDown={handleKeyDown}
                onCgstChange={setCgstRate}
                onSgstChange={setSgstRate}
                onIgstChange={setIgstRate}
                onHallmarkingCgstChange={setHallmarkingCgst}
                onHallmarkingSgstChange={setHallmarkingSgst}
                onHallmarkingChange={handleHallmarkingChargesChange}
                onPiecesChange={handleHallmarkingPiecesChange}
                onDiscountChange={setDiscount}
            />


        </div>

        {/* --- Action Buttons Section --- */}
        {/* <div style={controlsStyle}>
            <button
                onClick={handlePrint}
                style={{
                    ...buttonStyle,
                    backgroundColor: '#333',
                    color: 'white',
                    fontSize: '16px',
                    padding: '10px 20px',
                    transition: 'background-color 0.3s ease',
                }}
                onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = '#555')}
                onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = '#333')}
            >
                Print Receipt
            </button>
        </div>

        {/* --- Hidden Print Preview --- */}
        {/* <div style={{ display: 'none' }}>
            <PrintPreview
                ref={componentRef}
                billHeader={billHeader}
                items={items}
                calculations={calculations}
                storeInfo={storeInfo}
            />
        </div>  */}
    </div>);
};

export default ReceiptPage;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ReceiptPage.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/apiService.js ---
// Mock API URL (Replace with your actual API endpoint)
const API_URL = 'https://your-api-endpoint.com/data';

// Function to fetch data from the backend
export const fetchData = async () => {
  try {
    const response = await fetch(API_URL);
    if (!response.ok) {
      throw new Error('Error fetching data');
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error(error);
    throw error;
  }
};

// Function to add new data to the backend
export const addData = async (newEntry) => {
  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(newEntry),
    });
    if (!response.ok) {
      throw new Error('Error adding data');
    }
    const addedEntry = await response.json();
    return addedEntry;
  } catch (error) {
    console.error(error);
    throw error;
  }
};

// Function to update existing data on the backend
export const updateData = async (updatedEntry) => {
  try {
    const response = await fetch(`${API_URL}/${updatedEntry.id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updatedEntry),
    });
    if (!response.ok) {
      throw new Error('Error updating data');
    }
    return await response.json();
  } catch (error) {
    console.error(error);
    throw error;
  }
};

module.export = {addData,fetchData,updateData};
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/apiService.js ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ItemsTable.css ---
/* ItemsTable.css */
.table {
    width: 100%;
    border-collapse: collapse;
}

.table th,
.table td {
    border: 1px solid #ddd;
    padding: 8px;
}

.table th {
    background-color: #f2f2f2;
    text-align: left;
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ItemsTable.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Bills.css ---
/* Container styling */
.container {
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  /* Heading styling */
  h1 {
    font-size: 24px;
    color: #333;
    margin-bottom: 20px;
  }
  
  /* Table styling */
  .table {
    margin-bottom: 20px;
  }
  
  .table-bordered {
    border: 1px solid #ddd;
  }
  
  .table-bordered th, .table-bordered td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }
  
  .table-bordered th {
    background-color: #343a40;
    color: #fff;
  }
  
  .table-bordered td {
    background-color: #fff;
  }
  
  .table-active {
    background-color: #e9ecef;
  }
  
  .table .form-control {
    width: 100%;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  /* Button styling */
  .btn {
    margin-right: 5px;
  }
  
  .btn-success {
    background-color: #28a745;
    border-color: #28a745;
  }
  
  .btn-success:hover {
    background-color: #218838;
    border-color: #1e7e34;
  }
  
  .btn-primary {
    background-color: #007bff;
    border-color: #007bff;
  }
  
  .btn-primary:hover {
    background-color: #0069d9;
    border-color: #005cbf;
  }
  
  .btn-info {
    background-color: #17a2b8;
    border-color: #17a2b8;
  }
  
  .btn-info:hover {
    background-color: #138496;
    border-color: #117a8b;
  }
  
  /* Filter inputs styling */
  .form-control {
    display: inline-block;
    width: auto;
  }
  
  .d-flex {
    display: flex;
  }
  
  .mr-2 {
    margin-right: 0.5rem;
  }
  
  .ml-2 {
    margin-left: 0.5rem;
  }
  
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Bills.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Sidebar.jsx ---
import React from 'react';
import './Sidebar.css'; // Import custom CSS

const Sidebar = ({ isOpen, handleNavigation }) => {
  return (
    <div className={`sidebar ${isOpen ? 'open' : 'closed'}`}>
      <ul className="list-unstyled">
        <li className="nav-item" onClick={() => handleNavigation('dashboard')}>Dashboard</li>
        <li className="nav-item" onClick={() => handleNavigation('sales')}>Sales</li>
        <li className="nav-item" onClick={() => handleNavigation('purchase')}>Purchase</li>
        <li className="nav-item" onClick={() => handleNavigation('stock')}>Stock</li>
        <li className="nav-item" onClick={() => handleNavigation('bills')}>Bills</li>
        <li className="nav-item" onClick={() => handleNavigation('receipt')}>Receipt</li>
        <li className="nav-item" onClick={() => handleNavigation('createbill')}>CreateBill</li>
        <li className="nav-item" onClick={() => handleNavigation('receipt2')}>ReceiptPage</li>
      </ul>
    </div>
  );
};

export default Sidebar;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Sidebar.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/TaxSummary.jsx ---
import React, { useState, useEffect } from 'react';

const calculateHallmarkingTaxes = (hallmarkingCharges, cgstRate, sgstRate, igstRate) => {
    const taxable = parseFloat(hallmarkingCharges) || 0;
    const cgst = (taxable * (cgstRate || 0)) / 100;
    const sgst = (taxable * (sgstRate || 0)) / 100;
    const igst = (taxable * (igstRate || 0)) / 100;
    return {
        taxable,
        cgst,
        sgst,
        igst,
    };
};

const TaxSummary = ({
    calculations,
    cgstRate,
    sgstRate,
    igstRate,
    hallmarkingCharges,
    hallmarkingPieces,
    hallmarkingCgst,
    hallmarkingSgst,
    discount,
    onCgstChange,
    onSgstChange,
    onIgstChange,
    onHallmarkingChange,
    onPiecesChange,
    onHallmarkingCgstChange,
    onHallmarkingSgstChange,
    onDiscountChange,
}) => {

    const hallmarkingTax = calculateHallmarkingTaxes(hallmarkingCharges, cgstRate, sgstRate, igstRate);
    return (
        <div style={{ width: '400px', marginLeft: 'auto', marginTop: '30px' }}>
            <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                <tbody>
                    <tr>
                        <td style={{
                            padding: '8px',
                            fontWeight: 'bold',
                            backgroundColor: '#f5f5f5',
                            border: '1px solid #333',
                        }}>
                            Total Taxable
                        </td>
                        <td style={{
                            padding: '8px',
                            textAlign: 'right',
                            fontWeight: 'bold',
                            backgroundColor: '#f5f5f5',
                            border: '1px solid #333',
                        }}>
                            ₹{parseFloat(calculations.totalTaxable).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333' }}>
                            CGST&nbsp;
                            <input
                                type="number"
                                value={cgstRate}
                                min="0"
                                step="0.1"
                                onChange={e => onCgstChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 60, marginRight: 4 }}
                            />%
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹{parseFloat(calculations.cgstAmount).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333' }}>
                            SGST&nbsp;
                            <input
                                type="number"
                                value={sgstRate}
                                min="0"
                                step="0.1"
                                onChange={e => onSgstChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 60, marginRight: 4 }}
                            />%
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹{parseFloat(calculations.sgstAmount).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333' }}>
                            IGST&nbsp;
                            <input
                                type="number"
                                value={igstRate}
                                min="0"
                                step="0.1"
                                onChange={e => onIgstChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 60, marginRight: 4 }}
                            />%
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹{parseFloat(calculations.igstAmount).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>
                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333' }}>
                            Hallmarking Charges 9983 @ ₹
                            <input
                                type="number"
                                value={hallmarkingCharges}
                                min="0"
                                step="0.01"
                                onChange={e => onHallmarkingChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 80, marginRight: 4 }}
                            />
                            <br />
                            <small>
                                <input
                                    type="number"
                                    value={hallmarkingPieces}
                                    min="0"
                                    step="1"
                                    onChange={e => onPiecesChange(parseInt(e.target.value) || 0)}
                                    style={{ width: 60, marginRight: 4 }}
                                /> Pieces
                            </small>
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹{parseFloat(calculations.hallmarkingTotal).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                            CGST&nbsp;
                            <input
                                type="number"
                                value={hallmarkingCgst}
                                min="0"
                                step="0.1"
                                onChange={e => onHallmarkingCgstChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 60, marginRight: 4 }}
                            />%
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹{parseFloat(calculations.hallmarkingCgstAmt).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                            SGST&nbsp;
                            <input
                                type="number"
                                value={hallmarkingSgst}
                                min="0"
                                step="0.1"
                                onChange={e => onHallmarkingSgstChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 60, marginRight: 4 }}
                            />%
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹{parseFloat(calculations.hallmarkingSgstAmt).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                            IGST 0.0%
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            ₹0.00
                        </td>
                    </tr>
                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333' }}>
                            Discount&nbsp;
                            <input
                                type="number"
                                value={discount}
                                min="0"
                                step="0.01"
                                onChange={e => onDiscountChange(parseFloat(e.target.value) || 0)}
                                style={{ width: 80, marginRight: 4 }}
                            />
                        </td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            -₹{parseFloat(discount).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>

                    <tr>
                        <td style={{ padding: '8px', border: '1px solid #333' }}>Round off</td>
                        <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                            {parseFloat(calculations.roundOff) >= 0 ? '+' : ''}
                            ₹{calculations.roundOff}
                        </td>
                    </tr>

                    <tr>
                        <td style={{
                            padding: '12px',
                            fontWeight: 'bold',
                            fontSize: '18px',
                            backgroundColor: '#f0f0f0',
                            border: '2px solid #333',
                        }}>
                            Grand Total
                        </td>
                        <td style={{
                            padding: '12px',
                            textAlign: 'right',
                            fontWeight: 'bold',
                            fontSize: '18px',
                            backgroundColor: '#f0f0f0',
                            border: '2px solid #333',
                        }}>
                            ₹{parseFloat(calculations.grandTotal).toLocaleString('en-IN', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                            })}
                        </td>
                    </tr>
                </tbody>
            </table>

        </ div >
    );
};

export default TaxSummary;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/TaxSummary.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/CreateBill.jsx ---
import React, { useState, useRef, useMemo } from 'react';

const Receipt = () => {
    // --- Dummy customer data for auto-fill ---
    const dummyCustomers = [
        {
            id: 1,
            name: 'Rajesh Kumar',
            phone: '+91 98765 43210',
            address: '123 MG Road\nKanpur, UP 208001',
            email: 'rajesh.kumar@email.com'
        },
        {
            id: 2,
            name: 'Priya Sharma',
            phone: '+91 87654 32109',
            address: '456 Civil Lines\nKanpur, UP 208002',
            email: 'priya.sharma@email.com'
        },
        {
            id: 3,
            name: 'Amit Gupta',
            phone: '+91 76543 21098',
            address: '789 Swaroop Nagar\nKanpur, UP 208003',
            email: 'amit.gupta@email.com'
        },
        {
            id: 4,
            name: 'Sunita Verma',
            phone: '+91 65432 10987',
            address: '321 Kalyanpur\nKanpur, UP 208004',
            email: 'sunita.verma@email.com'
        },
        {
            id: 5,
            name: 'Vikram Singh',
            phone: '+91 54321 09876',
            address: '654 Govind Nagar\nKanpur, UP 208005',
            email: 'vikram.singh@email.com'
        }
    ];

    // --- Fixed store information ---
    const storeInfo = {
        storeName: 'MDKJ JEWELLERS',
        storeAddress: 'Shop No. 45, Birhana Road\nKanpur, Uttar Pradesh 208001',
        phone: '+91 98765 12345',
        email: 'mdkjjewellers@gmail.com'
    };

    // --- State for bill header information ---
    const [billHeader, setBillHeader] = useState({
        billNumber: 'BILL-' + Date.now().toString().slice(-6),
        date: new Date().toISOString().split('T')[0],
        customerName: '',
        customerPhone: '',
        customerAddress: '',
        customerEmail: ''
    });

    // --- State for bill items ---
    const [items, setItems] = useState([
        {
            id: 1,
            description: 'New Gold Ornaments',
            hsnSac: '7113',
            purity: '18 CT',
            weight: 104.510,
            rate: 7200.00,
            amount: 752472.00,
            isEditing: false
        },
        {
            id: 2,
            description: 'New Gold Ornaments',
            hsnSac: '7113',
            purity: '18 CT',
            weight: 260.770,
            rate: 7200.00,
            amount: 1877544.00,
            isEditing: false
        },
    ]);

    // --- State for charges and taxes ---
    const [cgstRate, setCgstRate] = useState(1.5);
    const [sgstRate, setSgstRate] = useState(1.5);
    const [igstRate, setIgstRate] = useState(0);
    const [hallmarkingCharges, setHallmarkingCharges] = useState(45.00);
    const [hallmarkingPieces, setHallmarkingPieces] = useState(40);
    const [hallmarkingCgst, setHallmarkingCgst] = useState(9.0);
    const [hallmarkingSgst, setHallmarkingSgst] = useState(9.0);
    const [discount, setDiscount] = useState(0);
    const [selectedRowIndex, setSelectedRowIndex] = useState(null);
    const [customerSearchTerm, setCustomerSearchTerm] = useState('');
    const [showCustomerDropdown, setShowCustomerDropdown] = useState(false);

    // --- Ref for the bill preview ---
    const billRef = useRef();

    // --- Filter customers based on search term ---
    const filteredCustomers = useMemo(() => {
        if (!customerSearchTerm) return dummyCustomers;
        return dummyCustomers.filter(customer =>
            customer.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
            customer.phone.includes(customerSearchTerm)
        );
    }, [customerSearchTerm]);

    // --- Convert number to words ---
    const convertToWords = (num) => {
        const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
        const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];

        const convertHundreds = (n) => {
            let result = '';
            if (n > 99) {
                result += ones[Math.floor(n / 100)] + ' Hundred ';
                n %= 100;
            }
            if (n > 19) {
                result += tens[Math.floor(n / 10)] + ' ';
                n %= 10;
            }
            if (n > 0) {
                result += ones[n] + ' ';
            }
            return result;
        };

        if (num === 0) return 'Zero';

        const crore = Math.floor(num / 10000000);
        const lakh = Math.floor((num % 10000000) / 100000);
        const thousand = Math.floor((num % 100000) / 1000);
        const remainder = num % 1000;

        let result = '';
        if (crore > 0) result += convertHundreds(crore) + 'Crore ';
        if (lakh > 0) result += convertHundreds(lakh) + 'Lakh(s) ';
        if (thousand > 0) result += convertHundreds(thousand) + 'Thousand ';
        if (remainder > 0) result += convertHundreds(remainder);

        return 'Rupees ' + result.trim() + ' Only';
    };

    // --- Memoized calculations for totals ---
    const calculations = useMemo(() => {
        const totalTaxable = items.reduce((sum, item) => sum + item.amount, 0);

        const cgstAmount = (totalTaxable * cgstRate) / 100;
        const sgstAmount = (totalTaxable * sgstRate) / 100;
        const igstAmount = (totalTaxable * igstRate) / 100;

        const hallmarkingTotal = hallmarkingCharges * hallmarkingPieces;
        const hallmarkingCgstAmount = (hallmarkingTotal * hallmarkingCgst) / 100;
        const hallmarkingSgstAmount = (hallmarkingTotal * hallmarkingSgst) / 100;

        const subtotal = totalTaxable + cgstAmount + sgstAmount + igstAmount + hallmarkingTotal + hallmarkingCgstAmount + hallmarkingSgstAmount;
        const roundOff = Math.round(subtotal) - subtotal;
        const grandTotal = Math.round(subtotal);

        return {
            totalTaxable: totalTaxable.toFixed(2),
            cgstAmount: cgstAmount.toFixed(2),
            sgstAmount: sgstAmount.toFixed(2),
            igstAmount: igstAmount.toFixed(2),
            hallmarkingTotal: hallmarkingTotal.toFixed(2),
            hallmarkingCgstAmount: hallmarkingCgstAmount.toFixed(2),
            hallmarkingSgstAmount: hallmarkingSgstAmount.toFixed(2),
            roundOff: roundOff.toFixed(2),
            grandTotal: grandTotal.toFixed(2),
            grandTotalWords: convertToWords(grandTotal)
        };
    }, [items, cgstRate, sgstRate, igstRate, hallmarkingCharges, hallmarkingPieces, hallmarkingCgst, hallmarkingSgst]);

    // --- Handle customer selection ---
    const handleCustomerSelect = (customer) => {
        setBillHeader(prev => ({
            ...prev,
            customerName: customer.name,
            customerPhone: customer.phone,
            customerAddress: customer.address,
            customerEmail: customer.email
        }));
        setCustomerSearchTerm(customer.name);
        setShowCustomerDropdown(false);
    };

    // --- Handle customer search ---
    const handleCustomerSearch = (value) => {
        setCustomerSearchTerm(value);
        setBillHeader(prev => ({ ...prev, customerName: value }));
        setShowCustomerDropdown(value.length > 0);
    };

    // --- Handle changes to bill header fields ---
    const handleHeaderChange = (field, value) => {
        setBillHeader(prev => ({ ...prev, [field]: value }));
    };

    // --- Handle changes to an item field ---
    const handleItemChange = (rowIndex, field, value) => {
        const newItems = [...items];
        if (field === 'weight' || field === 'rate') {
            const numValue = parseFloat(value) || 0;
            newItems[rowIndex][field] = numValue;
            // Auto-calculate amount when weight or rate changes
            if (field === 'weight' || field === 'rate') {
                newItems[rowIndex].amount = newItems[rowIndex].weight * newItems[rowIndex].rate;
            }
        } else if (field === 'amount') {
            newItems[rowIndex][field] = parseFloat(value) || 0;
        } else {
            newItems[rowIndex][field] = value;
        }
        setItems(newItems);
    };

    // --- Toggle edit mode for an item row ---
    const handleEditClick = (rowIndex) => {
        const newItems = [...items];
        newItems[rowIndex].isEditing = !newItems[rowIndex].isEditing;
        setItems(newItems);
    };

    // --- Add a new item row ---
    const handleAddRow = () => {
        const newRowIndex = selectedRowIndex !== null ? selectedRowIndex + 1 : items.length;
        const newItems = [...items];
        newItems.splice(newRowIndex, 0, {
            id: Date.now(),
            description: '',
            hsnSac: '7113',
            purity: '18 CT',
            weight: 0,
            rate: 7200.00,
            amount: 0,
            isEditing: true
        });
        setItems(newItems);
        setSelectedRowIndex(newRowIndex);
    };

    // --- Delete an item row ---
    const handleDeleteRow = (rowIndex) => {
        if (items.length > 1) {
            const newItems = items.filter((_, index) => index !== rowIndex);
            setItems(newItems);
        }
    };

    // --- Keyboard navigation ---
    const handleKeyDown = (event, rowIndex, field) => {
        if (event.key === 'Enter') {
            handleEditClick(rowIndex);
        } else if (event.key === 'Tab') {
            event.preventDefault();
            const fields = ['description', 'hsnSac', 'purity', 'weight', 'rate', 'amount'];
            const currentFieldIndex = fields.indexOf(field);

            if (currentFieldIndex < fields.length - 1) {
                const nextField = fields[currentFieldIndex + 1];
                const nextInput = document.querySelector(`input[data-row="${rowIndex}"][data-field="${nextField}"]`);
                if (nextInput) nextInput.focus();
            } else if (rowIndex < items.length - 1) {
                const nextInput = document.querySelector(`input[data-row="${rowIndex + 1}"][data-field="description"]`);
                if (nextInput) nextInput.focus();
            }
        }
    };

    // --- Print function ---
    const handlePrint = () => {
        const printContent = billRef.current.innerHTML;
        const printWindow = window.open('', '', 'height=600,width=800');

        printWindow.document.write(`
      <html>
        <head>
          <title>Print Bill - ${billHeader.billNumber}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .bill-header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }
            .bill-info { display: flex; justify-content: space-between; margin-bottom: 20px; }
            .customer-info { text-align: left; }
            .bill-details { text-align: right; }
            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f5f5f5; font-weight: bold; }
            .text-right { text-align: right; }
            .text-center { text-align: center; }
            .totals { margin-top: 20px; }
            .total-row { font-weight: bold; background-color: #f0f0f0; }
            .print-hide { display: none; }
            .grand-total { font-size: 18px; font-weight: bold; }
          </style>
        </head>
        <body>${printContent}</body>
      </html>
    `);

        printWindow.document.close();
        printWindow.focus();
        printWindow.print();
    };

    // Styles
    const containerStyle = {
        maxWidth: '1400px',
        margin: '0 auto',
        padding: '20px',
        fontFamily: 'Arial, sans-serif',
        backgroundColor: '#f8f9fa'
    };

    const headerSectionStyle = {
        backgroundColor: 'white',
        padding: '30px',
        borderRadius: '8px',
        marginBottom: '20px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
    };

    const formGridStyle = {
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
        gap: '20px'
    };

    const labelStyle = {
        display: 'block',
        marginBottom: '5px',
        fontWeight: 'bold',
        color: '#333'
    };

    const inputStyle = {
        width: '100%',
        padding: '8px 12px',
        border: '1px solid #ddd',
        borderRadius: '4px',
        fontSize: '14px'
    };

    const customerDropdownStyle = {
        position: 'absolute',
        top: '100%',
        left: 0,
        right: 0,
        backgroundColor: 'white',
        border: '1px solid #ddd',
        borderTop: 'none',
        borderRadius: '0 0 4px 4px',
        maxHeight: '200px',
        overflowY: 'auto',
        zIndex: 1000
    };

    const customerOptionStyle = {
        padding: '10px',
        cursor: 'pointer',
        borderBottom: '1px solid #eee'
    };

    const billPreviewStyle = {
        backgroundColor: 'white',
        padding: '40px',
        borderRadius: '8px',
        marginBottom: '20px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
    };

    const tableStyle = {
        width: '100%',
        borderCollapse: 'collapse',
        margin: '20px 0'
    };

    const thStyle = {
        border: '1px solid #ddd',
        padding: '12px',
        backgroundColor: '#f5f5f5',
        fontWeight: 'bold',
        textAlign: 'left'
    };

    const tdStyle = {
        border: '1px solid #ddd',
        padding: '8px'
    };

    const controlsStyle = {
        display: 'flex',
        flexWrap: 'wrap',
        gap: '15px',
        alignItems: 'center',
        backgroundColor: 'white',
        padding: '20px',
        borderRadius: '8px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
    };

    const buttonStyle = {
        padding: '8px 16px',
        border: 'none',
        borderRadius: '4px',
        cursor: 'pointer',
        fontSize: '14px'
    };

    const editButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#007bff',
        color: 'white',
        marginRight: '5px'
    };

    const saveButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#28a745',
        color: 'white',
        marginRight: '5px'
    };

    const deleteButtonStyle = {
        ...buttonStyle,
        backgroundColor: '#dc3545',
        color: 'white'
    };

    return (
        <div style={containerStyle}>
            {/* --- Customer Details Section --- */}
            <div style={headerSectionStyle}>
                <h2 style={{ margin: '0 0 20px 0', color: '#333' }}>Customer Information</h2>
                <div style={formGridStyle}>
                    {/* Customer Name with Search */}
                    <div style={{ position: 'relative' }}>
                        <label style={labelStyle}>Customer Name:</label>
                        <input
                            type="text"
                            style={inputStyle}
                            value={customerSearchTerm}
                            onChange={(e) => handleCustomerSearch(e.target.value)}
                            onFocus={() => setShowCustomerDropdown(customerSearchTerm.length > 0)}
                            placeholder="Search or enter customer name"
                        />
                        {showCustomerDropdown && (
                            <div style={customerDropdownStyle}>
                                {filteredCustomers.map((customer) => (
                                    <div
                                        key={customer.id}
                                        style={customerOptionStyle}
                                        onClick={() => handleCustomerSelect(customer)}
                                        onMouseEnter={(e) => e.target.style.backgroundColor = '#f0f0f0'}
                                        onMouseLeave={(e) => e.target.style.backgroundColor = 'white'}
                                    >
                                        <strong>{customer.name}</strong><br />
                                        <small>{customer.phone}</small>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>

                    {/* Customer Phone */}
                    <div>
                        <label style={labelStyle}>Customer Phone:</label>
                        <input
                            type="text"
                            style={inputStyle}
                            value={billHeader.customerPhone}
                            onChange={(e) => handleHeaderChange('customerPhone', e.target.value)}
                        />
                    </div>

                    {/* Customer Address */}
                    <div>
                        <label style={labelStyle}>Customer Address:</label>
                        <textarea
                            style={{ ...inputStyle, minHeight: '60px', resize: 'vertical' }}
                            value={billHeader.customerAddress}
                            onChange={(e) => handleHeaderChange('customerAddress', e.target.value)}
                        />
                    </div>

                    {/* Customer Email */}
                    <div>
                        <label style={labelStyle}>Customer Email:</label>
                        <input
                            type="email"
                            style={inputStyle}
                            value={billHeader.customerEmail}
                            onChange={(e) => handleHeaderChange('customerEmail', e.target.value)}
                        />
                    </div>

                    {/* Bill Date */}
                    <div>
                        <label style={labelStyle}>Bill Date:</label>
                        <input
                            type="date"
                            style={inputStyle}
                            value={billHeader.date}
                            onChange={(e) => handleHeaderChange('date', e.target.value)}
                        />
                    </div>
                </div>
            </div>

            {/* --- Bill Preview Section --- */}
            <div ref={billRef} style={billPreviewStyle}>
                {/* Bill Header */}
                <div style={{ textAlign: 'center', marginBottom: '40px', borderBottom: '2px solid #333', paddingBottom: '20px' }}>
                    <h1 style={{ fontSize: '36px', margin: '0 0 10px 0', color: '#333' }}>INVOICE</h1>
                    <h2 style={{ fontSize: '24px', margin: '0 0 15px 0', color: '#333' }}>{storeInfo.storeName}</h2>
                    <div style={{ color: '#666', lineHeight: '1.4' }}>
                        {storeInfo.storeAddress.split('\n').map((line, i) => (
                            <p key={i} style={{ margin: '5px 0' }}>{line}</p>
                        ))}
                    </div>
                    <p style={{ color: '#666', margin: '10px 0 0 0' }}>
                        Phone: {storeInfo.phone} | Email: {storeInfo.email}
                    </p>
                </div>

                {/* Bill Info */}
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '30px' }}>
                    <div>
                        <h3 style={{ margin: '0 0 10px 0', fontWeight: 'bold' }}>Bill To:</h3>
                        <p style={{ margin: '5px 0', fontSize: '16px' }}>
                            <strong>{billHeader.customerName || 'Customer Name'}</strong>
                        </p>
                        {billHeader.customerPhone && (
                            <p style={{ margin: '5px 0', fontSize: '14px' }}>
                                Phone: {billHeader.customerPhone}
                            </p>
                        )}
                        {billHeader.customerAddress && (
                            <p style={{ margin: '5px 0', fontSize: '14px', whiteSpace: 'pre-line' }}>
                                {billHeader.customerAddress}
                            </p>
                        )}
                        {billHeader.customerEmail && (
                            <p style={{ margin: '5px 0', fontSize: '14px' }}>
                                Email: {billHeader.customerEmail}
                            </p>
                        )}
                    </div>
                    <div style={{ textAlign: 'right' }}>
                        <p style={{ margin: '5px 0' }}><strong>Bill #:</strong> {billHeader.billNumber}</p>
                        <p style={{ margin: '5px 0' }}><strong>Date:</strong> {billHeader.date}</p>
                    </div>
                </div>

                {/* Items Table */}
                <table style={tableStyle}>
                    <thead>
                        <tr style={{ backgroundColor: '#f5f5f5' }}>
                            <th style={{ ...thStyle, width: '30px', textAlign: 'center' }}>S.No</th>
                            <th style={{ ...thStyle, width: '200px' }}>Description</th>
                            <th style={{ ...thStyle, width: '80px', textAlign: 'center' }}>HSN/SAC</th>
                            <th style={{ ...thStyle, width: '80px', textAlign: 'center' }}>Purity</th>
                            <th style={{ ...thStyle, width: '100px', textAlign: 'center' }}>Weight(in gms)</th>
                            <th style={{ ...thStyle, width: '100px', textAlign: 'right' }}>Rate (₹)</th>
                            <th style={{ ...thStyle, width: '120px', textAlign: 'right' }}>Amount (₹)</th>
                            <th style={{ ...thStyle, width: '150px', textAlign: 'center' }} className="print-hide">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {items.map((item, rowIndex) => (
                            <tr
                                key={item.id}
                                style={{
                                    backgroundColor: selectedRowIndex === rowIndex ? '#e3f2fd' : 'transparent',
                                    cursor: 'pointer'
                                }}
                                onMouseEnter={() => setSelectedRowIndex(rowIndex)}
                                onMouseLeave={() => setSelectedRowIndex(null)}
                            >
                                <td style={{ ...tdStyle, textAlign: 'center', fontWeight: 'bold' }}>
                                    {rowIndex + 1}
                                </td>
                                <td style={tdStyle}>
                                    {item.isEditing ? (
                                        <input
                                            type="text"
                                            style={{ ...inputStyle, margin: 0 }}
                                            value={item.description}
                                            data-row={rowIndex}
                                            data-field="description"
                                            onChange={(e) => handleItemChange(rowIndex, 'description', e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, 'description')}
                                            autoFocus
                                        />
                                    ) : (
                                        <span
                                            onClick={() => handleEditClick(rowIndex)}
                                            style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                                        >
                                            {item.description || 'Click to edit'}
                                        </span>
                                    )}
                                </td>
                                <td style={{ ...tdStyle, textAlign: 'center' }}>
                                    {item.isEditing ? (
                                        <input
                                            type="text"
                                            style={{ ...inputStyle, margin: 0, textAlign: 'center', width: '70px' }}
                                            value={item.hsnSac}
                                            data-row={rowIndex}
                                            data-field="hsnSac"
                                            onChange={(e) => handleItemChange(rowIndex, 'hsnSac', e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, 'hsnSac')}
                                        />
                                    ) : (
                                        <span
                                            onClick={() => handleEditClick(rowIndex)}
                                            style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                                        >
                                            {item.hsnSac}
                                        </span>
                                    )}
                                </td>
                                <td style={{ ...tdStyle, textAlign: 'center' }}>
                                    {item.isEditing ? (
                                        <input
                                            type="text"
                                            style={{ ...inputStyle, margin: 0, textAlign: 'center', width: '70px' }}
                                            value={item.purity}
                                            data-row={rowIndex}
                                            data-field="purity"
                                            onChange={(e) => handleItemChange(rowIndex, 'purity', e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, 'purity')}
                                        />
                                    ) : (
                                        <span
                                            onClick={() => handleEditClick(rowIndex)}
                                            style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                                        >
                                            {item.purity}
                                        </span>
                                    )}
                                </td>
                                <td style={{ ...tdStyle, textAlign: 'center' }}>
                                    {item.isEditing ? (
                                        <input
                                            type="number"
                                            style={{ ...inputStyle, margin: 0, textAlign: 'center', width: '90px' }}
                                            value={item.weight}
                                            data-row={rowIndex}
                                            data-field="weight"
                                            onChange={(e) => handleItemChange(rowIndex, 'weight', e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, 'weight')}
                                            min="0"
                                            step="0.001"
                                        />
                                    ) : (
                                        <span
                                            onClick={() => handleEditClick(rowIndex)}
                                            style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                                        >
                                            {item.weight.toFixed(3)}
                                        </span>
                                    )}
                                </td>
                                <td style={{ ...tdStyle, textAlign: 'right' }}>
                                    {item.isEditing ? (
                                        <input
                                            type="number"
                                            style={{ ...inputStyle, margin: 0, textAlign: 'right', width: '90px' }}
                                            value={item.rate}
                                            data-row={rowIndex}
                                            data-field="rate"
                                            onChange={(e) => handleItemChange(rowIndex, 'rate', e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, 'rate')}
                                            min="0"
                                            step="0.01"
                                        />
                                    ) : (
                                        <span
                                            onClick={() => handleEditClick(rowIndex)}
                                            style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                                        >
                                            ₹{item.rate.toFixed(2)}
                                        </span>
                                    )}
                                </td>
                                <td style={{ ...tdStyle, textAlign: 'right' }}>
                                    {item.isEditing ? (
                                        <input
                                            type="number"
                                            style={{ ...inputStyle, margin: 0, textAlign: 'right', width: '110px' }}
                                            value={item.amount}
                                            data-row={rowIndex}
                                            data-field="amount"
                                            onChange={(e) => handleItemChange(rowIndex, 'amount', e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, 'amount')}
                                            min="0"
                                            step="0.01"
                                        />
                                    ) : (
                                        <span
                                            onClick={() => handleEditClick(rowIndex)}
                                            style={{ cursor: 'pointer', display: 'block', padding: '4px', fontWeight: 'bold' }}
                                        >
                                            ₹{item.amount.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                        </span>
                                    )}
                                </td>
                                <td style={{ ...tdStyle, textAlign: 'center' }} className="print-hide">
                                    <button
                                        style={item.isEditing ? saveButtonStyle : editButtonStyle}
                                        onClick={() => handleEditClick(rowIndex)}
                                    >
                                        {item.isEditing ? 'Save' : 'Edit'}
                                    </button>
                                    <button
                                        style={deleteButtonStyle}
                                        onClick={() => handleDeleteRow(rowIndex)}
                                    >
                                        Del
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>

                {/* Totals Section */}
                <div style={{ width: '400px', marginLeft: 'auto', marginTop: '30px' }}>
                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                        <tbody>
                            <tr>
                                <td style={{ padding: '8px', fontWeight: 'bold', backgroundColor: '#f5f5f5', border: '1px solid #333' }}>
                                    Total Taxable
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', fontWeight: 'bold', backgroundColor: '#f5f5f5', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.totalTaxable).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333' }}>
                                    CGST {cgstRate}%
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.cgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333' }}>
                                    SGST {sgstRate}%
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.sgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333' }}>
                                    IGST {igstRate}%
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.igstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333' }}>
                                    Hallmarking Charges 9983 @ ₹{hallmarkingCharges.toFixed(2)}<br />
                                    <small>{hallmarkingPieces} Pieces</small>
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.hallmarkingTotal).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                                    CGST {hallmarkingCgst}%
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.hallmarkingCgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                                    SGST {hallmarkingSgst}%
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹{parseFloat(calculations.hallmarkingSgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                                    IGST 0.0%
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    ₹0.00
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '8px', border: '1px solid #333' }}>
                                    Round off
                                </td>
                                <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                                    {parseFloat(calculations.roundOff) >= 0 ? '+' : ''}₹{calculations.roundOff}
                                </td>
                            </tr>
                            <tr>
                                <td style={{ padding: '12px', fontWeight: 'bold', fontSize: '18px', backgroundColor: '#f0f0f0', border: '2px solid #333' }}>
                                    Grand Total
                                </td>
                                <td style={{ padding: '12px', textAlign: 'right', fontWeight: 'bold', fontSize: '18px', backgroundColor: '#f0f0f0', border: '2px solid #333' }}>
                                    ₹{parseFloat(calculations.grandTotal).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                {/* Amount in Words */}
                <div style={{ marginTop: '30px', padding: '15px', backgroundColor: '#f9f9f9', border: '1px solid #ddd', borderRadius: '4px' }}>
                    <strong>Amount in word(s):</strong><br />
                    <span style={{ fontSize: '16px', fontWeight: 'bold', color: '#333' }}>
                        {calculations.grandTotalWords}
                    </span>
                </div>

                {/* Thank you message */}
                <div style={{ textAlign: 'center', marginTop: '40px', color: '#666' }}>
                    <p style={{ margin: 0, fontSize: '16px' }}>Thank you for choosing MDKJ Jewellers!</p>
                </div>
            </div>

            {/* Controls */}
            <div style={controlsStyle}>
                <button
                    style={{ ...buttonStyle, backgroundColor: '#28a745', color: 'white', fontSize: '16px', padding: '12px 24px' }}
                    onClick={handleAddRow}
                >
                    Add Item
                </button>

                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <label style={{ fontSize: '14px', fontWeight: 'bold' }}>CGST (%):</label>
                    <input
                        type="number"
                        style={{ ...inputStyle, width: '80px' }}
                        value={cgstRate}
                        onChange={(e) => setCgstRate(parseFloat(e.target.value) || 0)}
                        min="0"
                        step="0.1"
                    />
                </div>

                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <label style={{ fontSize: '14px', fontWeight: 'bold' }}>SGST (%):</label>
                    <input
                        type="number"
                        style={{ ...inputStyle, width: '80px' }}
                        value={sgstRate}
                        onChange={(e) => setSgstRate(parseFloat(e.target.value) || 0)}
                        min="0"
                        step="0.1"
                    />
                </div>

                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <label style={{ fontSize: '14px', fontWeight: 'bold' }}>IGST (%):</label>
                    <input
                        type="number"
                        style={{ ...inputStyle, width: '80px' }}
                        value={igstRate}
                        onChange={(e) => setIgstRate(parseFloat(e.target.value) || 0)}
                        min="0"
                        step="0.1"
                    />
                </div>

                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <label style={{ fontSize: '14px', fontWeight: 'bold' }}>Hallmark Rate (₹):</label>
                    <input
                        type="number"
                        style={{ ...inputStyle, width: '80px' }}
                        value={hallmarkingCharges}
                        onChange={(e) => setHallmarkingCharges(parseFloat(e.target.value) || 0)}
                        min="0"
                        step="0.01"
                    />
                </div>

                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <label style={{ fontSize: '14px', fontWeight: 'bold' }}>Pieces:</label>
                    <input
                        type="number"
                        style={{ ...inputStyle, width: '80px' }}
                        value={hallmarkingPieces}
                        onChange={(e) => setHallmarkingPieces(parseInt(e.target.value) || 0)}
                        min="0"
                        step="1"
                    />
                </div>

                <button
                    style={{ ...buttonStyle, backgroundColor: '#007bff', color: 'white', fontSize: '16px', padding: '12px 24px' }}
                    onClick={handlePrint}
                >
                    Print Bill
                </button>
            </div>

            {/* Usage Instructions */}
            <div style={{
                marginTop: '20px',
                padding: '20px',
                backgroundColor: '#e3f2fd',
                borderRadius: '8px',
                border: '1px solid #2196f3'
            }}>
                <h3 style={{ margin: '0 0 15px 0', color: '#1976d2' }}>How to use:</h3>
                <ul style={{ margin: 0, paddingLeft: '20px', color: '#333', lineHeight: '1.6' }}>
                    <li>Search for existing customers or enter new customer details manually</li>
                    <li>Click on customer name in dropdown to auto-fill their information</li>
                    <li>Click on any item cell to edit it directly</li>
                    <li>Weight and Rate will auto-calculate Amount when changed</li>
                    <li>Use Tab to move between fields, Enter to save</li>
                    <li>Adjust tax rates and hallmarking charges as needed</li>
                    <li>Print the final bill when ready</li>
                </ul>
            </div>
        </div>
    );
};

export default Receipt;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/CreateBill.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ViewTable.jsx ---
import React, { useEffect, useState } from 'react';
import { fetchAll } from '../api';

export default function ViewTable({ table }) {
    const [records, setRecords] = useState([]);

    useEffect(() => {
        const load = async () => {
            try {
                const res = await fetchAll(table);
                setRecords(res.data);
            } catch (err) {
                console.error('Failed to fetch records:', err);
            }
        };
        load();
    }, [table]);

    return (
        <div>
            <h2>{table.toUpperCase()} Records</h2>
            <table border="1">
                <thead>
                    <tr>{records[0] && Object.keys(records[0]).map(col => <th key={col}>{col}</th>)}</tr>
                </thead>
                <tbody>
                    {records.map((row, i) => (
                        <tr key={i}>
                            {Object.values(row).map((val, j) => <td key={j}>{val?.toString()}</td>)}
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ViewTable.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Bills.jsx ---
/**
 * Bills.js
 * 
 * This component renders a Bills management page with the following features:
 * - Displays a table of bills with columns for Bill Number, Amount, and Date.
 * - Allows inline editing of bill rows and saving changes.
 * - Supports adding new rows.
 * - Provides filtering options for each column, including date range filtering.
 * - Enables printing of individual bill rows.
 * - Keyboard navigation and accessibility for editing cells.
 * - Uses Bootstrap for styling.
 */

import React, { useState, useMemo, useRef } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import './Bills.css'; // Custom CSS for styling

const Bills = () => {
  // State for table data, including editing state for each row
  const [data, setData] = useState([
    { id: 1, billNumber: 12345, amount: '$150', date: '2024-01-06', isEditing: false },
    { id: 2, billNumber: 67890, amount: '$200', date: '2024-01-07', isEditing: false },
    // Add more rows as needed
  ]);

  // State for the currently selected row index (for highlighting/navigation)
  const [selectedRowIndex, setSelectedRowIndex] = useState(null);

  // State for filter values for each column
  const [filters, setFilters] = useState({
    billNumber: '',
    amount: '',
    dateStart: '',
    dateEnd: '',
  });

  // Table column definitions
  const columns = [
    { key: 'billNumber', label: 'Bill Number' },
    { key: 'amount', label: 'Amount' },
    { key: 'date', label: 'Date' },
    // Add more columns as needed
  ];

  /**
   * Updates the value of a cell in the table.
   * @param {number} rowIndex - Index of the row to update.
   * @param {string} columnKey - Key of the column to update.
   * @param {string} value - New value for the cell.
   */
  const handleCellChange = (rowIndex, columnKey, value) => {
    const newData = [...data];
    newData[rowIndex][columnKey] = value;
    setData(newData);
  };

  /**
   * Toggles the editing state of a row.
   * @param {number} rowIndex - Index of the row to edit/save.
   */
  const handleEditClick = (rowIndex) => {
    const newData = [...data];
    newData[rowIndex].isEditing = !newData[rowIndex].isEditing;
    setData(newData);
  };

  /**
   * Sets the currently hovered row index for highlighting.
   * @param {number} rowIndex - Index of the hovered row.
   */
  const handleRowHover = (rowIndex) => {
    setSelectedRowIndex(rowIndex);
  };

  /**
   * Handles keyboard navigation and editing in table cells.
   * @param {object} event - Keyboard event.
   * @param {number} rowIndex - Index of the current row.
   * @param {string} columnKey - Key of the current column.
   */
  const handleKeyDown = (event, rowIndex, columnKey) => {
    if (event.key === 'Enter') {
      handleEditClick(rowIndex);
    } else if (event.key === 'ArrowUp' && rowIndex > 0) {
      setSelectedRowIndex(rowIndex - 1);
    } else if (event.key === 'ArrowDown' && rowIndex < data.length - 1) {
      setSelectedRowIndex(rowIndex + 1);
    } else if (event.key === 'ArrowLeft' && columnKey !== 'billNumber') {
      handleEditClick(rowIndex); // Edit the cell when pressing left arrow
    } else if (event.key === 'ArrowRight' && columnKey !== 'date') {
      handleEditClick(rowIndex); // Edit the cell when pressing right arrow
    }
  };

  /**
   * Adds a new row to the table, placing it after the selected row if any.
   */
  const handleAddRow = () => {
    const newRowIndex = selectedRowIndex !== null ? selectedRowIndex + 1 : data.length;
    const newData = [...data];
    newData.splice(newRowIndex, 0, { id: Date.now(), billNumber: '', amount: '', date: '', isEditing: true });
    setData(newData);
    setSelectedRowIndex(newRowIndex);
  };

  /**
   * Saves all rows by setting their editing state to false.
   */
  const handleSaveAll = () => {
    const newData = data.map(row => ({ ...row, isEditing: false }));
    setData(newData);
  };

  /**
   * Opens a print window for the selected bill row.
   * @param {object} row - The bill row to print.
   */
  const handlePrintRow = (row) => {
    // Customize this function to handle the print logic for the row
    const printWindow = window.open('', '', 'height=600,width=800');
    const billContent = `<div>
      <h1>Bill Number: ${row.billNumber}</h1>
      <p>Amount: ${row.amount}</p>
      <p>Date: ${row.date}</p>
    </div>`;

    printWindow.document.write('<html><head><title>Print Bill</title></head><body>');
    printWindow.document.write(billContent);
    printWindow.document.write('</body></html>');
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
  };

  /**
   * Updates the filter value for a specific column or date range.
   * @param {string} filterKey - The key of the filter to update.
   * @param {string} value - The new filter value.
   */
  const handleFilterChange = (filterKey, value) => {
    setFilters({
      ...filters,
      [filterKey]: value,
    });
  };

  /**
   * Returns the filtered data based on the current filter values.
   */
  const filteredData = useMemo(() => {
    return data.filter(row => {
      return columns.every(column => {
        const filterValue = filters[column.key];
        if (!filterValue) {
          return true; // No filter applied for this column
        }

        if (column.key === 'date') {
          // Check if the date falls within the specified range
          const startDate = new Date(filters.dateStart);
          const endDate = new Date(filters.dateEnd);

          const rowDate = new Date(row[column.key]);

          return rowDate >= startDate && rowDate <= endDate;
        }

        return String(row[column.key]).toLowerCase().includes(filterValue.toLowerCase());
      });
    });
  }, [data, filters, columns]);

  return (
    <div className="container mt-4">
      <h1 className="mb-4">Bills Page</h1>

      <div className="mb-2">
        {columns.map(column => (
          <div key={column.key} className="mb-2">
            <label className="mr-2">{column.label}:</label>
            {column.key === 'date' ? (
              <div className="d-flex">
                <input
                  type="date"
                  className="form-control mr-2"
                  placeholder="Start Date"
                  value={filters.dateStart || ''}
                  onChange={(e) => handleFilterChange('dateStart', e.target.value)}
                />
                <input
                  type="date"
                  className="form-control"
                  placeholder="End Date"
                  value={filters.dateEnd || ''}
                  onChange={(e) => handleFilterChange('dateEnd', e.target.value)}
                />
              </div>
            ) : (
              <input
                type="text"
                className="form-control"
                value={filters[column.key] || ''}
                onChange={(e) => handleFilterChange(column.key, e.target.value)}
              />
            )}
          </div>
        ))}
      </div>

      <table className="table table-bordered">
        <thead className="thead-dark">
          <tr>
            {columns.map((column) => (
              <th key={column.key}>{column.label}</th>
            ))}
            <th>Edit</th>
            <th>Print</th>
          </tr>
        </thead>
        <tbody>
          {filteredData.map((row, rowIndex) => (
            <tr
              key={row.id}
              className={selectedRowIndex === rowIndex ? 'table-active' : ''}
              onMouseEnter={() => handleRowHover(rowIndex)}
            >
              {columns.map((column) => (
                <td key={column.key}>
                  {row.isEditing ? (
                    column.key === 'date' ? (
                      <input
                        type="date"
                        className="form-control"
                        value={row[column.key]}
                        onChange={(e) => handleCellChange(rowIndex, column.key, e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, column.key)}
                      />
                    ) : (
                      <input
                        type="text"
                        className="form-control"
                        value={row[column.key]}
                        onChange={(e) => handleCellChange(rowIndex, column.key, e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, column.key)}
                      />
                    )
                  ) : (
                    row[column.key]
                  )}
                </td>
              ))}
              <td>
                <button
                  className={`btn ${row.isEditing ? 'btn-success' : 'btn-primary'}`}
                  onClick={() => handleEditClick(rowIndex)}
                >
                  {row.isEditing ? 'Save' : 'Edit'}
                </button>
              </td>
              <td>
                <button className="btn btn-info" onClick={() => handlePrintRow(row)}>
                  Print
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <button className="btn btn-success" onClick={handleAddRow}>
        Add Row
      </button>
      <button className="btn btn-primary ml-2" onClick={handleSaveAll}>
        Save All
      </button>
    </div>
  );
};

export default Bills;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Bills.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ItemsTable.jsx ---
import React, { useEffect } from 'react';

const fields = ['description', 'hsnSac', 'purity', 'weight', 'rate', 'amount'];

const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
    marginBottom: '20px',
    border: '1px solid #ddd'
};

const thStyle = {
    border: '1px solid #ddd',
    padding: '8px',
    backgroundColor: '#f5f5f5',
    textAlign: 'left',
    fontWeight: 'bold'
};

const tdStyle = {
    border: '1px solid #ddd',
    padding: '8px',
    verticalAlign: 'middle'
};

const inputStyle = {
    width: '100%',
    padding: '6px',
    border: '1px solid #ccc',
    borderRadius: '4px',
    fontSize: '14px'
};

const editButtonStyle = {
    padding: '4px 8px',
    marginRight: '5px',
    backgroundColor: '#007bff',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer'
};

const saveButtonStyle = {
    ...editButtonStyle,
    backgroundColor: '#28a745'
};

const deleteButtonStyle = {
    padding: '4px 8px',
    backgroundColor: '#dc3545',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer'
};

const ItemsTable = ({ items, setItems, selectedRowIndex, setSelectedRowIndex }) => {
    useEffect(() => {
        const total = items.reduce((sum, item) => sum + Number(item.amount || 0), 0);
        // Optionally notify parent component
        // onTotalChange && onTotalChange(total);
        console.log('Total:', total);
    }, [items]);

    const handleItemChange = (rowIndex, field, value) => {
        const newItems = [...items];
        if (field === 'weight' || field === 'rate') {
            const numValue = parseFloat(value) || 0;
            newItems[rowIndex][field] = numValue;
            newItems[rowIndex].amount = newItems[rowIndex].weight * newItems[rowIndex].rate;
        } else if (field === 'amount') {
            newItems[rowIndex][field] = parseFloat(value) || 0;
        } else {
            newItems[rowIndex][field] = value;
        }
        setItems(newItems);
    };

    const handleAddRow = () => {
        const newRowIndex = selectedRowIndex !== null ? selectedRowIndex + 1 : items.length;
        const newItems = [...items];
        newItems.splice(newRowIndex, 0, {
            id: Date.now(),
            description: '',
            hsnSac: '7113',
            purity: '18 CT',
            weight: 0,
            rate: 7200.00,
            amount: 0,
            isEditing: true
        });
        setItems(newItems);
        setSelectedRowIndex(newRowIndex);
    };

    const handleDeleteRow = (rowIndex) => {
        if (items.length > 1) {
            const newItems = items.filter((_, index) => index !== rowIndex);
            setItems(newItems);
        }
    };

    const handleEditClick = (rowIndex) => {
        const newItems = [...items];
        newItems[rowIndex].isEditing = !newItems[rowIndex].isEditing;
        setItems(newItems);
    };

    const handleKeyDown = (event, rowIndex, field) => {
        if (event.key === 'Enter') {
            handleEditClick(rowIndex);
        } else if (event.key === 'Tab') {
            event.preventDefault();
            const currentFieldIndex = fields.indexOf(field);
            if (currentFieldIndex < fields.length - 1) {
                const nextField = fields[currentFieldIndex + 1];
                const nextInput = document.querySelector(`input[data-row="${rowIndex}"][data-field="${nextField}"]`);
                if (nextInput) nextInput.focus();
            } else if (rowIndex < items.length - 1) {
                const nextInput = document.querySelector(`input[data-row="${rowIndex + 1}"][data-field="description"]`);
                if (nextInput) nextInput.focus();
            }
        }
    };

    return (
        <div>
            <table style={tableStyle}>
                <thead>
                    <tr>
                        <th style={{ ...thStyle, width: '30px', textAlign: 'center' }}>S.No</th>
                        <th style={{ ...thStyle, width: '200px' }}>Description</th>
                        <th style={{ ...thStyle, width: '80px', textAlign: 'center' }}>HSN/SAC</th>
                        <th style={{ ...thStyle, width: '80px', textAlign: 'center' }}>Purity</th>
                        <th style={{ ...thStyle, width: '100px', textAlign: 'center' }}>Weight (gms)</th>
                        <th style={{ ...thStyle, width: '100px', textAlign: 'right' }}>Rate (₹)</th>
                        <th style={{ ...thStyle, width: '120px', textAlign: 'right' }}>Amount (₹)</th>
                        <th style={{ ...thStyle, width: '150px', textAlign: 'center' }}>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {items.map((item, rowIndex) => (
                        <tr
                            key={item.id || rowIndex}
                            style={{
                                backgroundColor: selectedRowIndex === rowIndex ? '#e3f2fd' : 'transparent',
                                cursor: 'pointer'
                            }}
                            onMouseEnter={() => setSelectedRowIndex && setSelectedRowIndex(rowIndex)}
                            onMouseLeave={() => setSelectedRowIndex && setSelectedRowIndex(null)}
                        >
                            <td style={{ ...tdStyle, textAlign: 'center' }}>{rowIndex + 1}</td>
                            {fields.map((field) => (
                                <td key={field} style={{ ...tdStyle, textAlign: field === 'rate' || field === 'amount' ? 'right' : 'left' }}>
                                    {item.isEditing ? (
                                        <input
                                            style={inputStyle}
                                            type={field === 'weight' || field === 'rate' || field === 'amount' ? 'number' : 'text'}
                                            value={item[field]}
                                            onChange={(e) => handleItemChange(rowIndex, field, e.target.value)}
                                            onKeyDown={(e) => handleKeyDown(e, rowIndex, field)}
                                            data-row={rowIndex}
                                            data-field={field}
                                        />
                                    ) : (
                                        item[field]
                                    )}
                                </td>
                            ))}
                            <td style={{ ...tdStyle, textAlign: 'center' }}>
                                {item.isEditing ? (
                                    <button style={saveButtonStyle} onClick={() => handleEditClick(rowIndex)}>
                                        Save
                                    </button>
                                ) : (
                                    <button style={editButtonStyle} onClick={() => handleEditClick(rowIndex)}>
                                        Edit
                                    </button>
                                )}
                                <button style={deleteButtonStyle} onClick={() => handleDeleteRow(rowIndex)}>
                                    Delete
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
            <div style={{ textAlign: 'right' }}>
                <button onClick={handleAddRow} style={{ marginBottom: '10px', ...editButtonStyle }}>
                    + Add Item
                </button>
            </div>
        </div>
    );
};

export default ItemsTable;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ItemsTable.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Purchase.jsx ---
import React from 'react';
import ExcelInterface from './ExcelInterface';
// import Apps from './Apps';

/**
 * Purchase component renders an Excel-like interface for managing purchase data.
 *
 * @component
 * @returns {JSX.Element} The rendered ExcelInterface component with purchase data.
 */
const Purchase = () => {
  const columns = [
    { key: 'Product', label: 'Product' },
    { key: 'Quantity', label: 'Quantity' },
    { key: 'Price', label: 'Price' },
    { key: 'Total', label: 'Total' },
  ];

  const initialData = [
    { id: 1, product: 'Product X', quantity: 8, price: '$40', total: '$320', isEditing: false },
    { id: 2, product: 'Product Y', quantity: 15, price: '$25', total: '$375', isEditing: false },
    // Add more rows as needed
  ];

  return (
    <ExcelInterface columns={columns} initialData={initialData} />
    // <Apps />
  );
};

export default Purchase;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Purchase.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Sidebar.css ---
.sidebar {
    width: 250px; /* Fixed width for sidebar */
    height: 100vh; /* Full viewport height */
    position: fixed; /* Fixed position */
    top: 0;
    left: 0;
    background-color: #f8f9fa; /* Light background */
    border-right: 1px solid #dee2e6; /* Border for separation */
    transition: transform 0.3s ease; /* Smooth transition for open/close */
    overflow: auto; /* Enable scrolling if content overflows */
  }
  
  .sidebar.closed {
    transform: translateX(-100%); /* Move sidebar off-screen */
  }
  
  .sidebar.open {
    transform: translateX(0); /* Show sidebar */
  }
  
  .nav-item {
    cursor: pointer;
    padding: 10px;
    border-radius: 4px;
    transition: background-color 0.3s;
  }
  
  .nav-item:hover {
    background-color: #e9ecef; /* Hover effect */
  }
  
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Sidebar.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Sales.jsx ---
import React from 'react';
import PageTemplate from './PageTemplate';

const Sales = () => {
  const tableHeaders = ['Product', 'Quantity', 'Price', 'Total'];
  const tableData = [
    ['Product A', 10, '$50', '$500'],
    ['Product B', 5, '$30', '$150'],
    // Add more rows as needed
  ];

  return (
    <PageTemplate title="Sales Page" tableHeaders={tableHeaders} tableData={tableData} />
  );
};

export default Sales;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Sales.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/NavBar.jsx ---
import { Link } from 'react-router-dom';

export default function NavBar() {
    return (
        <nav style={{ padding: '1em', backgroundColor: '#f2f2f2' }}>
            <Link to="/">Dashboard</Link> | <Link to="/add">Add Entry</Link> | <Link to="/view/bill">View Bills</Link>
            | <Link to="/view/receipt">View Receipts</Link> | <Link to="/sales">Sales</Link> | <Link to="/stock">Stock</Link>
            {/* Add more links as needed */}
            <Link to="/bills">Bills</Link> | <Link to="/receipt">Receipt</Link>
            <Link to="/UnifiedEntryForm">Unified Entry Form</Link>
            {/* <Link to="/excel">Excel Interface</Link> */}
            {/* <Link to="/create-bill">Create Bill</Link> */}
            <Link to="/receipt-page">Receipt Page</Link>
        </nav>
    );
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/NavBar.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/utils.js ---
// utils.js

// Basic number to words for INR currency (can be replaced by a library for full feature)
export function numberToWords(num) {
    // For demo, return the formatted number + suffix
    if (typeof num !== 'number') num = parseFloat(num);
    if (isNaN(num)) return '';
    return num.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' Rupees Only';
}

// Format currency INR with 2 decimals
export function formatINR(amount) {
    if (typeof amount !== 'number') amount = parseFloat(amount);
    if (isNaN(amount)) amount = 0;
    return '₹' + amount.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
}

// Round to 2 decimals
export function round2Decimals(value) {
    return Math.round(value * 100) / 100;
}

// utils.js

const convertToWords = (num) => {
    const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
    const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];

    const convertHundreds = (n) => {
        let result = '';
        if (n > 99) {
            result += ones[Math.floor(n / 100)] + ' Hundred ';
            n %= 100;
        }
        if (n > 19) {
            result += tens[Math.floor(n / 10)] + ' ';
            n %= 10;
        }
        if (n > 0) {
            result += ones[n] + ' ';
        }
        return result;
    };

    if (num === 0) return 'Zero';

    const crore = Math.floor(num / 10000000);
    const lakh = Math.floor((num % 10000000) / 100000);
    const thousand = Math.floor((num % 100000) / 1000);
    const remainder = num % 1000;

    let result = '';
    if (crore > 0) result += convertHundreds(crore) + 'Crore ';
    if (lakh > 0) result += convertHundreds(lakh) + 'Lakh(s) ';
    if (thousand > 0) result += convertHundreds(thousand) + 'Thousand ';
    if (remainder > 0) result += convertHundreds(remainder);

    return 'Rupees ' + result.trim() + ' Only';
};

// exports = {
//     convertToWords,
//     numberToWords,
//     formatINR,
//     round2Decimals
// };
export default convertToWords;
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/utils.js ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/PageTemplate.jsx ---
import React from 'react';

/**
 * Renders a page template with a title and a table.
 *
 * @component
 * @param {Object} props - The component props.
 * @param {string} props.title - The title to display above the table.
 * @param {string[]} props.tableHeaders - An array of strings representing the table headers.
 * @param {Array<Array<React.ReactNode>>} props.tableData - A 2D array representing the table rows and cells.
 * @returns {JSX.Element} The rendered page template component.
 */
const PageTemplate = ({ title, tableHeaders, tableData }) => {
  return (
    <div className="page-container p-4">
      <h2>{title}</h2>
      <table className="table table-bordered mt-3">
        <thead>
          <tr>
            {tableHeaders.map((header, index) => (
              <th key={index}>{header}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {tableData.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, cellIndex) => (
                <td key={cellIndex}>{cell}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default PageTemplate;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/PageTemplate.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ExcelInterface.css ---
/* Container styling */
.container {
    max-width: 1200px;
    margin: 0 auto;
  }
  
  /* Table styling */
  .table {
    border-collapse: collapse;
    width: 100%;
    margin-bottom: 1rem;
  }
  
  .table th,
  .table td {
    border: 1px solid #dee2e6;
    padding: 0.75rem;
    vertical-align: top;
  }
  
  .table thead th {
    background-color: #343a40;
    color: #fff;
    font-weight: bold;
  }
  
  .table tbody tr.table-active {
    background-color: #e9ecef;
  }
  
  /* Button styling */
  .btn {
    margin: 0.2rem;
  }
  
  .btn-success {
    background-color: #28a745;
    border-color: #28a745;
  }
  
  .btn-primary {
    background-color: #007bff;
    border-color: #007bff;
  }
  
  .btn-info {
    background-color: #17a2b8;
    border-color: #17a2b8;
  }
  
  .btn-success:hover {
    background-color: #218838;
    border-color: #1e7e34;
  }
  
  .btn-primary:hover {
    background-color: #0056b3;
    border-color: #004085;
  }
  
  .btn-info:hover {
    background-color: #138496;
    border-color: #117a8b;
  }
  
  /* Form control styling */
  .form-control {
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
  }
  
  .input-group {
    display: flex;
    align-items: center;
  }
  
  .input-group .form-control {
    margin-right: 0.5rem;
  }
  
  .input-group .form-control:last-child {
    margin-right: 0;
  }
  
  /* Heading styling */
  h1 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }
  
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/ExcelInterface.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/UnifiedEntryForm.jsx ---
import React, { useState } from 'react';
import { insertUnifiedEntry } from '../api';

export default function UnifiedEntryForm() {
    const [entryType, setEntryType] = useState('bill');
    const [form, setForm] = useState({
        entry_type: 'bill',
        gstin: 'GSTIN001',
        dated: '2025-06-15',
        bank: false,
        bill_no: 'BILL123',
        purity: '91.6',
        wt: '100',
        rate: '5800',
        cgst: '2.5',
        sgst: '2.5',
        igst: '0',
        weight: '100',
        cash_amount: '580000'
    });

    const handleChange = (e) => {
        const { name, type, value, checked } = e.target;
        setForm((prev) => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
    };

    const handleEntryTypeChange = (e) => {
        const newType = e.target.value;
        setEntryType(newType);
        setForm((prev) => ({ ...prev, entry_type: newType }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await insertUnifiedEntry(form);
            alert('Entry inserted successfully');
            console.log(response.data);
        } catch (error) {
            console.error(error);
            alert('Failed to insert entry');
        }
    };

    return (
        <div>
            <h2>Add Entry</h2>
            <form onSubmit={handleSubmit}>
                <label>
                    Entry Type:
                    <select name="entry_type" value={form.entry_type} onChange={handleEntryTypeChange}>
                        <option value="bill">Bill</option>
                        <option value="cash">Cash</option>
                        <option value="gold">Gold</option>
                        <option value="stock">Stock</option>
                    </select>
                </label>
                <br />

                <input
                    name="gstin"
                    placeholder="GSTIN"
                    value={form.gstin}
                    onChange={handleChange}
                />

                {(form.entry_type === 'bill' || form.entry_type === 'gold' || form.entry_type === 'stock') && (
                    <>
                        <input
                            name="purity"
                            placeholder="Purity"
                            value={form.purity}
                            onChange={handleChange}
                        />
                        <input
                            name="weight"
                            type="number"
                            placeholder="Weight"
                            value={form.weight}
                            onChange={handleChange}
                        />
                    </>
                )}

                {form.entry_type === 'bill' && (
                    <>
                        <input
                            name="bill_no"
                            placeholder="Bill No"
                            value={form.bill_no}
                            onChange={handleChange}
                        />
                        <input
                            name="wt"
                            type="number"
                            placeholder="Bill Weight"
                            value={form.wt}
                            onChange={handleChange}
                        />
                        <input
                            name="rate"
                            type="number"
                            placeholder="Rate"
                            value={form.rate}
                            onChange={handleChange}
                        />
                        <input
                            name="cgst"
                            type="number"
                            placeholder="CGST"
                            value={form.cgst}
                            onChange={handleChange}
                        />
                        <input
                            name="sgst"
                            type="number"
                            placeholder="SGST"
                            value={form.sgst}
                            onChange={handleChange}
                        />
                        <input
                            name="igst"
                            type="number"
                            placeholder="IGST"
                            value={form.igst}
                            onChange={handleChange}
                        />
                    </>
                )}

                {form.entry_type === 'cash' && (
                    <input
                        name="cash_amount"
                        type="number"
                        placeholder="Cash Amount"
                        value={form.cash_amount}
                        onChange={handleChange}
                    />
                )}

                <label>
                    Bank Entry:
                    <input
                        type="checkbox"
                        name="bank"
                        checked={form.bank}
                        onChange={handleChange}
                    />
                </label>

                <input
                    type="date"
                    name="dated"
                    value={form.dated}
                    onChange={handleChange}
                />

                <button type="submit">Submit Entry</button>
            </form>
        </div>
    );
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/UnifiedEntryForm.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Dashboardx.jsx ---
// Dashboard.js
// This file defines the Dashboard component for the MDKJ Enterprise application.
// The Dashboard displays a welcome message and a brief description for users on the dashboard page.

import React from 'react';

/**
 * Dashboard component
 * Renders the main dashboard page with a heading and a welcome message.
 */
const Dashboardx = () => {
  return (
    <div className="dashboard p-4">
      <h2>Dashboard Page</h2>
      <p className="lead">Welcome to the MDKJ Enterprise Dashboard. Here, you can view key metrics and summaries of your business.</p>
    </div>
  );
};

export default Dashboardx;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Dashboardx.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/BillHeaderForm.jsx ---
import React, { useState, useMemo } from 'react';

// Dummy customer data for autocomplete
const dummyCustomers = [
    {
        id: 1,
        name: 'Rajesh Kumar',
        phone: '+91 98765 43210',
        address: '123 MG Road\nKanpur, UP 208001',
        email: 'rajesh.kumar@email.com'
    },
    {
        id: 2,
        name: 'Priya Sharma',
        phone: '+91 87654 32109',
        address: '456 Civil Lines\nKanpur, UP 208002',
        email: 'priya.sharma@email.com'
    },
    {
        id: 3,
        name: 'Amit Gupta',
        phone: '+91 76543 21098',
        address: '789 Swaroop Nagar\nKanpur, UP 208003',
        email: 'amit.gupta@email.com'
    },
    {
        id: 4,
        name: 'Sunita Verma',
        phone: '+91 65432 10987',
        address: '321 Kalyanpur\nKanpur, UP 208004',
        email: 'sunita.verma@email.com'
    },
    {
        id: 5,
        name: 'Vikram Singh',
        phone: '+91 54321 09876',
        address: '654 Govind Nagar\nKanpur, UP 208005',
        email: 'vikram.singh@email.com'
    }
];

// Basic inline styles
const labelStyle = { display: 'block', marginBottom: '6px', fontWeight: 'bold' };
const inputStyle = {
    width: '100%',
    padding: '8px',
    boxSizing: 'border-box',
    borderRadius: '4px',
    border: '1px solid #ccc',
};
const headerSectionStyle = {
    padding: '20px',
    border: '1px solid #ddd',
    borderRadius: '6px',
    maxWidth: '600px',
    margin: 'auto',
    backgroundColor: '#fafafa',
};
const formGridStyle = {
    display: 'grid',
    gridTemplateColumns: '1fr 1fr',
    gap: '20px',
};
const customerDropdownStyle = {
    position: 'absolute',
    top: '100%',
    left: 0,
    right: 0,
    backgroundColor: 'white',
    border: '1px solid #ddd',
    borderTop: 'none',
    borderRadius: '0 0 4px 4px',
    maxHeight: '200px',
    overflowY: 'auto',
    zIndex: 1000
};
const customerOptionStyle = {
    padding: '10px',
    cursor: 'pointer',
    borderBottom: '1px solid #eee'
};

// BillHeaderForm with autocomplete for customer name
const BillHeaderForm = ({ billHeader = {}, onChange, customerSearchTerm, onCustomerSearch, filteredCustomers, showCustomerDropdown, onCustomerSelect, setShowCustomerDropdown }) => {
    return (
        <div style={headerSectionStyle}>
            <h2 style={{ marginBottom: '20px', color: '#333' }}>Bill Information</h2>

            <div style={formGridStyle}>
                {/* Customer Name with Autocomplete */}
                <div style={{ position: 'relative' }}>
                    <label style={labelStyle}>Customer Name:</label>
                    <input
                        type="text"
                        style={inputStyle}
                        value={customerSearchTerm}
                        onChange={(e) => onCustomerSearch(e.target.value)}
                        onFocus={() => setShowCustomerDropdown(customerSearchTerm.trim().length > 0)}
                        placeholder="Search or enter customer name"
                        autoComplete="off"
                    />
                    {showCustomerDropdown && (
                        <div style={customerDropdownStyle}>
                            {filteredCustomers.length > 0 ? (
                                filteredCustomers.map((customer) => (
                                    <div
                                        key={customer.id}
                                        style={customerOptionStyle}
                                        onClick={() => onCustomerSelect(customer)}
                                        onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = '#f0f0f0')}
                                        onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = 'white')}
                                    >
                                        <strong>{customer.name}</strong><br />
                                        <small>{customer.phone}</small>
                                    </div>
                                ))
                            ) : (
                                <div style={{ padding: '10px', color: '#999' }}>No customers found</div>
                            )}
                        </div>
                    )}
                </div>

                {/* Customer Phone */}
                <div>
                    <label style={labelStyle}>Customer Phone:</label>
                    <input
                        type="text"
                        style={inputStyle}
                        value={billHeader.customerPhone || ''}
                        onChange={(e) => onChange('customerPhone', e.target.value)}
                        placeholder="Enter phone number"
                    />
                </div>

                {/* Customer Address */}
                <div style={{ gridColumn: 'span 2' }}>
                    <label style={labelStyle}>Customer Address:</label>
                    <textarea
                        style={{ ...inputStyle, minHeight: '60px', resize: 'vertical' }}
                        value={billHeader.customerAddress || ''}
                        onChange={(e) => onChange('customerAddress', e.target.value)}
                        placeholder="Enter customer address"
                    />
                </div>

                {/* Customer Email */}
                <div>
                    <label style={labelStyle}>Customer Email:</label>
                    <input
                        type="email"
                        style={inputStyle}
                        value={billHeader.customerEmail || ''}
                        onChange={(e) => onChange('customerEmail', e.target.value)}
                        placeholder="Enter email address"
                    />
                </div>

                {/* Bill Number */}
                <div>
                    <label style={labelStyle}>Bill Number:</label>
                    <input
                        type="text"
                        style={inputStyle}
                        value={billHeader.billNumber || ''}
                        onChange={(e) => onChange('billNumber', e.target.value)}
                        placeholder="Enter bill number"
                    />
                </div>

                {/* Bill Date */}
                <div>
                    <label style={labelStyle}>Bill Date:</label>
                    <input
                        type="date"
                        style={inputStyle}
                        value={billHeader.date || ''}
                        onChange={(e) => onChange('date', e.target.value)}
                    />
                </div>
            </div>
        </div>

    );
};

export default BillHeaderForm;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/BillHeaderForm.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Stock.jsx ---
import React from 'react';
import PageTemplate from './PageTemplate';

const Stock = () => {
  const tableHeaders = ['Product', 'Available Quantity'];
  const tableData = [
    ['Product A', 20],
    ['Product B', 10],
    // Add more rows as needed
  ];

  return (
    <PageTemplate title="Stock Page" tableHeaders={tableHeaders} tableData={tableData} />
  );
};

export default Stock;

--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Stock.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/styles.jsx ---
// styles.js

export const containerStyle = {
    padding: '20px',
    maxWidth: '1000px',
    margin: 'auto',
    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
    color: '#333',
};

export const headerStyle = {
    textAlign: 'center',
    marginBottom: '25px',
};

export const inputStyle = {
    width: '100%',
    padding: '8px',
    fontSize: '14px',
    borderRadius: '4px',
    border: '1px solid #ccc',
    boxSizing: 'border-box',
};

export const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
};

export const thStyle = {
    border: '1px solid #ddd',
    padding: '10px',
    backgroundColor: '#f2f2f2',
    fontWeight: 'bold',
    textAlign: 'left',
};

export const tdStyle = {
    border: '1px solid #ddd',
    padding: '8px',
    textAlign: 'left',
};

export const buttonPrimary = {
    backgroundColor: '#28a745',
    color: 'white',
    border: 'none',
    padding: '12px 20px',
    cursor: 'pointer',
    fontSize: '16px',
    borderRadius: '4px',
};

export const buttonDanger = {
    backgroundColor: '#dc3545',
    color: 'white',
    border: 'none',
    padding: '6px 12px',
    cursor: 'pointer',
    fontSize: '14px',
    borderRadius: '4px',
};

export const totalsContainer = {
    width: '400px',
    marginLeft: 'auto',
    marginTop: '30px',
};

export const totalsTable = {
    width: '100%',
    borderCollapse: 'collapse',
};

export const totalsTdLabel = {
    padding: '8px',
    fontWeight: 'bold',
    backgroundColor: '#f5f5f5',
    border: '1px solid #333',
};

export const totalsTdValue = {
    padding: '8px',
    textAlign: 'right',
    fontWeight: 'bold',
    backgroundColor: '#f5f5f5',
    border: '1px solid #333',
};

export const totalsTdNormal = {
    padding: '8px',
    border: '1px solid #333',
};

export const totalsTdIndented = {
    padding: '8px 8px 8px 20px',
    border: '1px solid #333',
};

export const grandTotalRow = {
    padding: '12px',
    fontWeight: 'bold',
    fontSize: '18px',
    backgroundColor: '#f0f0f0',
    border: '2px solid #333',
};

export const amountInWordsBox = {
    marginTop: '30px',
    padding: '15px',
    backgroundColor: '#f9f9f9',
    border: '1px solid #ddd',
    borderRadius: '4px',
    fontWeight: 'bold',
    fontSize: '16px',
    color: '#333',
};

export const thankYouMessage = {
    textAlign: 'center',
    marginTop: '40px',
    color: '#666',
    fontSize: '16px',
};

export const headerSectionStyle = {
    marginBottom: '20px',
    borderBottom: '2px solid #333',
    paddingBottom: '10px',
};

export const formGridStyle = {
    display: 'grid',
    gridTemplateColumns: '1fr 2fr',
    gap: '15px 20px',
    alignItems: 'center',
    marginBottom: '20px',
};

export const labelStyle = {
    fontWeight: '600',
    fontSize: '14px',
    color: '#222',
};
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/styles.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Receipt.jsx ---


import React, { useEffect, useState, useRef, useMemo } from 'react';
import { fetchAll, addRecord, insertUnifiedEntry } from '../api';
import { json } from 'react-router-dom';

const Receipt = () => {
  // --- Fixed store information ---
  const [cgstRate, setCgstRate] = useState(1.5);
  const [sgstRate, setSgstRate] = useState(1.5);
  const [igstRate, setIgstRate] = useState(0);
  const [hallmarkingCharges, setHallmarkingCharges] = useState(45.00);
  const [hallmarkingPieces, setHallmarkingPieces] = useState(40);
  const [hallmarkingCgst, setHallmarkingCgst] = useState(9.0);
  const [hallmarkingSgst, setHallmarkingSgst] = useState(9.0);
  const [discount, setDiscount] = useState(0);
  const [selectedRowIndex, setSelectedRowIndex] = useState(null);
  const [customerSearchTerm, setCustomerSearchTerm] = useState('');
  const [showCustomerDropdown, setShowCustomerDropdown] = useState(false);
  const storeInfo = {
    storeName: 'MDKJ JEWELLERS',
    storeAddress: 'Shop No. 45, Birhana Road\nKanpur, Uttar Pradesh 208001',
    phone: '+91 98765 12345',
    email: 'mdkjjewellers@gmail.com'
  };



  const [customers, setCustomers] = useState([]);
  useEffect(() => {
    const loadCustomers = async () => {
      try {
        const response = await fetchAll('customer_details', {
          page: 1,
          page_size: 100
        });
        setCustomers(response.data); // Assuming backend returns `{ records: [...] }`
      } catch (err) {
        console.error('Error loading customers:', err);
      } finally {
        ;
      }
    };

    loadCustomers();
  }, []);
  // --- Filter customers based on search term ---
  const filteredCustomers = useMemo(() => {
    if (!customerSearchTerm) return customers;
    return customers.filter(customer =>
      customer.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
      customer.phone.includes(customerSearchTerm)
    );
  }, [customerSearchTerm]);


  // --- State for bill header information ---
  const [billHeader, setBillHeader] = useState({
    billNumber: 'BILL-' + Date.now().toString().slice(-6),
    date: new Date().toISOString().split('T')[0],
    customerName: '',
    customerPhone: '',
    customerAddress: '',
    customerEmail: ''
  });



  // --- State for bill items ---
  const [items, setItems] = useState([
    {
      id: 1,
      description: 'New Gold Ornaments',
      hsnSac: '7113',
      purity: '18 CT',
      weight: 0,
      rate: 7200.00,
      amount: 0,
      isEditing: true
    },
    // {
    //   id: 2,
    //   description: 'New Gold Ornaments',
    //   hsnSac: '7113',
    //   purity: '18 CT',
    //   weight: 260.770,
    //   rate: 7200.00,
    //   amount: 1877544.00,
    //   isEditing: false
    // },
  ]);

  // --- State for charges and taxes ---

  // --- Ref for the bill preview ---
  const billRef = useRef();


  // --- Memoized calculations for totals ---
  const calculations = useMemo(() => {
    const totalTaxable = items.reduce((sum, item) => sum + item.amount, 0);

    const cgstAmount = (totalTaxable * cgstRate) / 100;
    const sgstAmount = (totalTaxable * sgstRate) / 100;
    const igstAmount = (totalTaxable * igstRate) / 100;

    const hallmarkingTotal = hallmarkingCharges * hallmarkingPieces;
    const hallmarkingCgstAmount = (hallmarkingTotal * hallmarkingCgst) / 100;
    const hallmarkingSgstAmount = (hallmarkingTotal * hallmarkingSgst) / 100;

    const subtotal = totalTaxable + cgstAmount + sgstAmount + igstAmount + hallmarkingTotal + hallmarkingCgstAmount + hallmarkingSgstAmount;
    const roundOff = Math.round(subtotal) - subtotal;
    const grandTotal = Math.round(subtotal);

    return {
      totalTaxable: totalTaxable.toFixed(2),
      cgstAmount: cgstAmount.toFixed(2),
      sgstAmount: sgstAmount.toFixed(2),
      igstAmount: igstAmount.toFixed(2),
      hallmarkingTotal: hallmarkingTotal.toFixed(2),
      hallmarkingCgstAmount: hallmarkingCgstAmount.toFixed(2),
      hallmarkingSgstAmount: hallmarkingSgstAmount.toFixed(2),
      roundOff: roundOff.toFixed(2),
      grandTotal: grandTotal.toFixed(2),
      grandTotalWords: convertToWords(grandTotal)
    };
  }, [items, cgstRate, sgstRate, igstRate, hallmarkingCharges, hallmarkingPieces, hallmarkingCgst, hallmarkingSgst]);

  // --- Handle customer selection ---
  const handleCustomerSelect = (customer) => {
    setBillHeader(prev => ({
      ...prev,
      customerName: customer.name,
      customerPhone: customer.phone,
      customerAddress: customer.address,
      customerEmail: customer.email,
      customerGstin: customer.gstin || '' // Assuming customer object has gstin field
    }));
    setCustomerSearchTerm(customer.name);
    setShowCustomerDropdown(false);
  };

  // --- Handle customer search ---
  const handleCustomerSearch = (value) => {
    setCustomerSearchTerm(value);
    setBillHeader(prev => ({ ...prev, customerName: value }));
    setShowCustomerDropdown(value.length > 0);
  };

  // --- Handle changes to bill header fields ---
  const handleHeaderChange = (field, value) => {
    setBillHeader(prev => ({ ...prev, [field]: value }));
  };

  // --- Handle changes to an item field ---
  const handleItemChange = (rowIndex, field, value) => {
    const newItems = [...items];
    if (field === 'weight' || field === 'rate') {
      const numValue = parseFloat(value) || 0;
      newItems[rowIndex][field] = numValue;
      // Auto-calculate amount when weight or rate changes
      if (field === 'weight' || field === 'rate') {
        newItems[rowIndex].amount = newItems[rowIndex].weight * newItems[rowIndex].rate;
      }
    } else if (field === 'amount') {
      newItems[rowIndex][field] = parseFloat(value) || 0;
    } else {
      newItems[rowIndex][field] = value;
    }
    setItems(newItems);
  };

  // --- Toggle edit mode for an item row ---
  const handleEditClick = (rowIndex) => {
    const newItems = [...items];
    newItems[rowIndex].isEditing = !newItems[rowIndex].isEditing;
    setItems(newItems);
  };

  // --- Add a new item row ---
  const handleAddRow = () => {
    const newRowIndex = selectedRowIndex !== null ? selectedRowIndex + 1 : items.length;
    const newItems = [...items];
    newItems.splice(newRowIndex, 0, {
      id: Date.now(),
      description: '',
      hsnSac: '7113',
      purity: '18 CT',
      weight: 0,
      rate: 7200.00,
      amount: 0,
      isEditing: true
    });
    setItems(newItems);
    setSelectedRowIndex(newRowIndex);
  };

  // --- Delete an item row ---
  const handleDeleteRow = (rowIndex) => {
    if (items.length > 1) {
      const newItems = items.filter((_, index) => index !== rowIndex);
      setItems(newItems);
    }
  };

  // --- Keyboard navigation ---
  const handleKeyDown = (event, rowIndex, field) => {
    if (event.key === 'Enter') {
      handleEditClick(rowIndex);
    } else if (event.key === 'Tab') {
      event.preventDefault();
      const fields = ['description', 'hsnSac', 'purity', 'weight', 'rate', 'amount'];
      const currentFieldIndex = fields.indexOf(field);

      if (currentFieldIndex < fields.length - 1) {
        const nextField = fields[currentFieldIndex + 1];
        const nextInput = document.querySelector(`input[data-row="${rowIndex}"][data-field="${nextField}"]`);
        if (nextInput) nextInput.focus();
      } else if (rowIndex < items.length - 1) {
        const nextInput = document.querySelector(`input[data-row="${rowIndex + 1}"][data-field="description"]`);
        if (nextInput) nextInput.focus();
      }
    }
  };

  // --- Print function ---
  const handlePrint = () => {
    const printContent = billRef.current.innerHTML;
    const printWindow = window.open('', '', 'height=600,width=800');

    printWindow.document.write(`
      <html>
        <head>
          <title>Print Bill - ${billHeader.billNumber}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .bill-header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }
            .bill-info { display: flex; justify-content: space-between; margin-bottom: 20px; }
            .customer-info { text-align: left; }
            .bill-details { text-align: right; }
            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f5f5f5; font-weight: bold; }
            .text-right { text-align: right; }
            .text-center { text-align: center; }
            .totals { margin-top: 20px; }
            .total-row { font-weight: bold; background-color: #f0f0f0; }
            .print-hide { display: none; }
            .grand-total { font-size: 18px; font-weight: bold; }
          </style>
        </head>
        <body>${printContent}</body>
      </html>
    `);

    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
  };

  // Styles
  const containerStyle = {
    maxWidth: '1400px',
    margin: '0 auto',
    padding: '20px',
    fontFamily: 'Arial, sans-serif',
    backgroundColor: '#f8f9fa'
  };

  const headerSectionStyle = {
    backgroundColor: 'white',
    padding: '30px',
    borderRadius: '8px',
    marginBottom: '20px',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
  };

  const formGridStyle = {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
    gap: '20px'
  };

  const labelStyle = {
    display: 'block',
    marginBottom: '5px',
    fontWeight: 'bold',
    color: '#333'
  };

  const inputStyle = {
    width: '100%',
    padding: '8px 12px',
    border: '1px solid #ddd',
    borderRadius: '4px',
    fontSize: '14px'
  };

  const customerDropdownStyle = {
    position: 'absolute',
    top: '100%',
    left: 0,
    right: 0,
    backgroundColor: 'white',
    border: '1px solid #ddd',
    borderTop: 'none',
    borderRadius: '0 0 4px 4px',
    maxHeight: '200px',
    overflowY: 'auto',
    zIndex: 1000
  };

  const customerOptionStyle = {
    padding: '10px',
    cursor: 'pointer',
    borderBottom: '1px solid #eee'
  };

  const billPreviewStyle = {
    backgroundColor: 'white',
    padding: '40px',
    borderRadius: '8px',
    marginBottom: '20px',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
  };

  const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
    margin: '20px 0'
  };

  const thStyle = {
    border: '1px solid #ddd',
    padding: '12px',
    backgroundColor: '#f5f5f5',
    fontWeight: 'bold',
    textAlign: 'left'
  };

  const tdStyle = {
    border: '1px solid #ddd',
    padding: '8px'
  };

  const controlsStyle = {
    display: 'flex',
    flexWrap: 'wrap',
    gap: '15px',
    alignItems: 'center',
    backgroundColor: 'white',
    padding: '20px',
    borderRadius: '8px',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
  };

  const buttonStyle = {
    padding: '8px 16px',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '14px'
  };

  const editButtonStyle = {
    ...buttonStyle,
    backgroundColor: '#007bff',
    color: 'white',
    marginRight: '5px'
  };

  const saveButtonStyle = {
    ...buttonStyle,
    backgroundColor: '#28a745',
    color: 'white',
    marginRight: '5px'
  };

  const deleteButtonStyle = {
    ...buttonStyle,
    backgroundColor: '#dc3545',
    color: 'white'
  };

  return (
    <div style={containerStyle}>
      {/* --- Customer Details Section --- */}
      <div style={headerSectionStyle}>
        <h2 style={{ margin: '0 0 20px 0', color: '#333' }}>Customer Information</h2>
        <div style={formGridStyle}>
          {/* Customer Name with Search */}
          <div style={{ position: 'relative' }}>
            <label style={labelStyle}>Customer Name:</label>
            <input
              type="text"
              style={inputStyle}
              value={customerSearchTerm}
              onChange={(e) => handleCustomerSearch(e.target.value)}
              onFocus={() => setShowCustomerDropdown(customerSearchTerm.length > 0)}
              placeholder="Search or enter customer name"
            />
            {showCustomerDropdown && (
              <div style={customerDropdownStyle}>
                {filteredCustomers.map((customer) => (
                  <div
                    key={customer.id}
                    style={customerOptionStyle}
                    onClick={() => handleCustomerSelect(customer)}
                    onMouseEnter={(e) => e.target.style.backgroundColor = '#f0f0f0'}
                    onMouseLeave={(e) => e.target.style.backgroundColor = 'white'}
                  >
                    <strong>{customer.name}</strong><br />
                    <small>{customer.phone}</small>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Customer Phone */}
          <div>
            <label style={labelStyle}>Customer Phone:</label>
            <input
              type="text"
              style={inputStyle}
              value={billHeader.customerPhone}
              onChange={(e) => handleHeaderChange('customerPhone', e.target.value)}
            />
          </div>
          {/* Customer GSTIN */}
          <div>
            <label style={labelStyle}>Customer GSTIN:</label>
            <input
              type="text"
              style={inputStyle}
              value={billHeader.customerGstin || ''}
              onChange={(e) => handleHeaderChange('customerGstin', e.target.value)}
            />
          </div>

          {/* Customer Address */}
          <div>
            <label style={labelStyle}>Customer Address:</label>
            <textarea
              style={{ ...inputStyle, minHeight: '60px', resize: 'vertical' }}
              value={billHeader.customerAddress}
              onChange={(e) => handleHeaderChange('customerAddress', e.target.value)}
            />
          </div>

          {/* Customer Email */}
          <div>
            <label style={labelStyle}>Customer Email:</label>
            <input
              type="email"
              style={inputStyle}
              value={billHeader.customerEmail}
              onChange={(e) => handleHeaderChange('customerEmail', e.target.value)}
            />
          </div>

          {/* Bill Date */}
          <div>
            <label style={labelStyle}>Bill Date:</label>
            <input
              type="date"
              style={inputStyle}
              value={billHeader.date}
              onChange={(e) => handleHeaderChange('date', e.target.value)}
            />
          </div>
        </div>
      </div>

      {/* --- Bill Preview Section --- */}
      <div ref={billRef} style={billPreviewStyle}>
        {/* Bill Header */}
        <div style={{ textAlign: 'center', marginBottom: '40px', borderBottom: '2px solid #333', paddingBottom: '20px' }}>
          <h1 style={{ fontSize: '36px', margin: '0 0 10px 0', color: '#333' }}>INVOICE</h1>
          <h2 style={{ fontSize: '24px', margin: '0 0 15px 0', color: '#333' }}>{storeInfo.storeName}</h2>
          <div style={{ color: '#666', lineHeight: '1.4' }}>
            {storeInfo.storeAddress.split('\n').map((line, i) => (
              <p key={i} style={{ margin: '5px 0' }}>{line}</p>
            ))}
          </div>
          <p style={{ color: '#666', margin: '10px 0 0 0' }}>
            Phone: {storeInfo.phone} | Email: {storeInfo.email}
          </p>
        </div>

        {/* Bill Info */}
        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '30px' }}>
          <div>
            <h3 style={{ margin: '0 0 10px 0', fontWeight: 'bold' }}>Bill To:</h3>
            <p style={{ margin: '5px 0', fontSize: '16px' }}>
              <strong>{billHeader.customerName || 'Customer Name'}</strong>
            </p>
            {billHeader.customerPhone && (
              <p style={{ margin: '5px 0', fontSize: '14px' }}>
                Phone: {billHeader.customerPhone}
              </p>
            )}
            {billHeader.customerGstin && (
              <p style={{ margin: '5px 0', fontSize: '14px' }}>
                GSTIN: {billHeader.customerGstin}
              </p>
            )}
            {billHeader.customerAddress && (
              <p style={{ margin: '5px 0', fontSize: '14px', whiteSpace: 'pre-line' }}>
                {billHeader.customerAddress}
              </p>
            )}
            {billHeader.customerEmail && (
              <p style={{ margin: '5px 0', fontSize: '14px' }}>
                Email: {billHeader.customerEmail}
              </p>
            )}
          </div>
          <div style={{ textAlign: 'right' }}>
            <p style={{ margin: '5px 0' }}><strong>Bill #:</strong> {billHeader.billNumber}</p>
            <p style={{ margin: '5px 0' }}><strong>Date:</strong> {billHeader.date}</p>
          </div>
        </div>
        <div>
          {/* Items Table */}
          <table style={tableStyle}>
            <thead>
              <tr style={{ backgroundColor: '#f5f5f5' }}>
                <th style={{ ...thStyle, width: '30px', textAlign: 'center' }}>S.No</th>
                <th style={{ ...thStyle, width: '200px' }}>Description</th>
                <th style={{ ...thStyle, width: '80px', textAlign: 'center' }}>HSN/SAC</th>
                <th style={{ ...thStyle, width: '80px', textAlign: 'center' }}>Purity</th>
                <th style={{ ...thStyle, width: '100px', textAlign: 'center' }}>Weight(in gms)</th>
                <th style={{ ...thStyle, width: '100px', textAlign: 'right' }}>Rate (₹)</th>
                <th style={{ ...thStyle, width: '120px', textAlign: 'right' }}>Amount (₹)</th>
                <th style={{ ...thStyle, width: '150px', textAlign: 'center' }} className="print-hide">Actions</th>
              </tr>
            </thead>
            <tbody>
              {items.map((item, rowIndex) => (
                <tr
                  key={item.id}
                  style={{
                    backgroundColor: selectedRowIndex === rowIndex ? '#e3f2fd' : 'transparent',
                    cursor: 'pointer'
                  }}
                  onMouseEnter={() => setSelectedRowIndex(rowIndex)}
                  onMouseLeave={() => setSelectedRowIndex(null)}
                >
                  <td style={{ ...tdStyle, textAlign: 'center', fontWeight: 'bold' }}>
                    {rowIndex + 1}
                  </td>
                  <td style={tdStyle}>
                    {item.isEditing ? (
                      <input
                        type="text"
                        style={{ ...inputStyle, margin: 0 }}
                        value={item.description}
                        data-row={rowIndex}
                        data-field="description"
                        onChange={(e) => handleItemChange(rowIndex, 'description', e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, 'description')}
                        autoFocus
                      />
                    ) : (
                      <span
                        onClick={() => handleEditClick(rowIndex)}
                        style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                      >
                        {item.description || 'Click to edit'}
                      </span>
                    )}
                  </td>
                  <td style={{ ...tdStyle, textAlign: 'center' }}>
                    {item.isEditing ? (
                      <input
                        type="text"
                        style={{ ...inputStyle, margin: 0, textAlign: 'center', width: '70px' }}
                        value={item.hsnSac}
                        data-row={rowIndex}
                        data-field="hsnSac"
                        onChange={(e) => handleItemChange(rowIndex, 'hsnSac', e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, 'hsnSac')}
                      />
                    ) : (
                      <span
                        onClick={() => handleEditClick(rowIndex)}
                        style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                      >
                        {item.hsnSac}
                      </span>
                    )}
                  </td>
                  <td style={{ ...tdStyle, textAlign: 'center' }}>
                    {item.isEditing ? (
                      <input
                        type="text"
                        style={{ ...inputStyle, margin: 0, textAlign: 'center', width: '70px' }}
                        value={item.purity}
                        data-row={rowIndex}
                        data-field="purity"
                        onChange={(e) => handleItemChange(rowIndex, 'purity', e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, 'purity')}
                      />
                    ) : (
                      <span
                        onClick={() => handleEditClick(rowIndex)}
                        style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                      >
                        {item.purity}
                      </span>
                    )}
                  </td>
                  <td style={{ ...tdStyle, textAlign: 'center' }}>
                    {item.isEditing ? (
                      <input
                        type="number"
                        style={{ ...inputStyle, margin: 0, textAlign: 'center', width: '90px' }}
                        value={item.weight}
                        data-row={rowIndex}
                        data-field="weight"
                        onChange={(e) => handleItemChange(rowIndex, 'weight', e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, 'weight')}
                        min="0"
                        step="0.001"
                      />
                    ) : (
                      <span
                        onClick={() => handleEditClick(rowIndex)}
                        style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                      >
                        {item.weight.toFixed(3)}
                      </span>
                    )}
                  </td>
                  <td style={{ ...tdStyle, textAlign: 'right' }}>
                    {item.isEditing ? (
                      <input
                        type="number"
                        style={{ ...inputStyle, margin: 0, textAlign: 'right', width: '90px' }}
                        value={item.rate}
                        data-row={rowIndex}
                        data-field="rate"
                        onChange={(e) => handleItemChange(rowIndex, 'rate', e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, 'rate')}
                        min="0"
                        step="0.01"
                      />
                    ) : (
                      <span
                        onClick={() => handleEditClick(rowIndex)}
                        style={{ cursor: 'pointer', display: 'block', padding: '4px' }}
                      >
                        ₹{item.rate.toFixed(2)}
                      </span>
                    )}
                  </td>
                  <td style={{ ...tdStyle, textAlign: 'right' }}>
                    {item.isEditing ? (
                      <input
                        type="number"
                        style={{ ...inputStyle, margin: 0, textAlign: 'right', width: '110px' }}
                        value={item.amount}
                        data-row={rowIndex}
                        data-field="amount"
                        onChange={(e) => handleItemChange(rowIndex, 'amount', e.target.value)}
                        onKeyDown={(e) => handleKeyDown(e, rowIndex, 'amount')}
                        min="0"
                        step="0.01"
                      />
                    ) : (
                      <span
                        onClick={() => handleEditClick(rowIndex)}
                        style={{ cursor: 'pointer', display: 'block', padding: '4px', fontWeight: 'bold' }}
                      >
                        ₹{item.amount.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                      </span>
                    )}
                  </td>
                  <td style={{ ...tdStyle, textAlign: 'center' }} className="print-hide">
                    <button
                      style={item.isEditing ? saveButtonStyle : editButtonStyle}
                      onClick={() => handleEditClick(rowIndex)}
                    >
                      {item.isEditing ? 'Save' : 'Edit'}
                    </button>
                    <button
                      style={deleteButtonStyle}
                      onClick={() => handleDeleteRow(rowIndex)}
                    >
                      Del
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>

          </table>


          <div style={controlsStyle}>
            <button
              style={{ ...buttonStyle, backgroundColor: '#28a745', color: 'white', fontSize: '16px', padding: '12px 24px' }}
              onClick={handleAddRow}
            >
              Add Item
            </button>
          </div>

          {/* Totals Section */}
          <div style={{ width: '400px', marginLeft: 'auto', marginTop: '30px' }}>
            <table style={{ width: '100%', borderCollapse: 'collapse' }}>
              <tbody>
                <tr>
                  <td style={{ padding: '8px', fontWeight: 'bold', backgroundColor: '#f5f5f5', border: '1px solid #333' }}>
                    Total Taxable
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', fontWeight: 'bold', backgroundColor: '#f5f5f5', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.totalTaxable).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333' }}>
                    CGST {cgstRate}%
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.cgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333' }}>
                    SGST {sgstRate}%
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.sgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333' }}>
                    IGST {igstRate}%
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.igstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333' }}>
                    Hallmarking Charges 9983 @ ₹{hallmarkingCharges.toFixed(2)}<br />
                    <small>
                      Pieces:
                      <input
                        type="number"
                        style={{ ...inputStyle, width: '60px', marginLeft: '10px' }}
                        value={hallmarkingPieces}
                        onChange={(e) => setHallmarkingPieces(parseInt(e.target.value) || 0)}
                        min="0"
                        step="1"
                      />
                    </small>
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.hallmarkingTotal).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                    CGST {hallmarkingCgst}%
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.hallmarkingCgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                    SGST {hallmarkingSgst}%
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹{parseFloat(calculations.hallmarkingSgstAmount).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333', paddingLeft: '20px' }}>
                    IGST 0.0%
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    ₹0.00
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '8px', border: '1px solid #333' }}>
                    Round off
                  </td>
                  <td style={{ padding: '8px', textAlign: 'right', border: '1px solid #333' }}>
                    {parseFloat(calculations.roundOff) >= 0 ? '+' : ''}₹{calculations.roundOff}
                  </td>
                </tr>
                <tr>
                  <td style={{ padding: '12px', fontWeight: 'bold', fontSize: '18px', backgroundColor: '#f0f0f0', border: '2px solid #333' }}>
                    Grand Total
                  </td>
                  <td style={{ padding: '12px', textAlign: 'right', fontWeight: 'bold', fontSize: '18px', backgroundColor: '#f0f0f0', border: '2px solid #333' }}>
                    ₹{parseFloat(calculations.grandTotal).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>

          {/* Amount in Words */}
          <div style={{ marginTop: '30px', padding: '15px', backgroundColor: '#f9f9f9', border: '1px solid #ddd', borderRadius: '4px' }}>
            <strong>Amount in word(s):</strong><br />
            <span style={{ fontSize: '16px', fontWeight: 'bold', color: '#333' }}>
              {calculations.grandTotalWords}
            </span>
          </div>

          {/* Thank you message */}
          <div style={{ textAlign: 'center', marginTop: '40px', color: '#666' }}>
            <p style={{ margin: 0, fontSize: '16px' }}>Thank you for choosing MDKJ Jewellers!</p>
          </div>
        </div>

        {/* Controls */}

        <div style={controlsStyle}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            <label style={{ fontSize: '14px', fontWeight: 'bold' }}>CGST (%):</label>
            <input
              type="number"
              style={{ ...inputStyle, width: '80px' }}
              value={cgstRate}
              onChange={(e) => setCgstRate(parseFloat(e.target.value) || 0)}
              min="0"
              step="0.1"
            />
          </div>

          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            <label style={{ fontSize: '14px', fontWeight: 'bold' }}>SGST (%):</label>
            <input
              type="number"
              style={{ ...inputStyle, width: '80px' }}
              value={sgstRate}
              onChange={(e) => setSgstRate(parseFloat(e.target.value) || 0)}
              min="0"
              step="0.1"
            />
          </div>

          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            <label style={{ fontSize: '14px', fontWeight: 'bold' }}>IGST (%):</label>
            <input
              type="number"
              style={{ ...inputStyle, width: '80px' }}
              value={igstRate}
              onChange={(e) => setIgstRate(parseFloat(e.target.value) || 0)}
              min="0"
              step="0.1"
            />
          </div>

          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            <label style={{ fontSize: '14px', fontWeight: 'bold' }}>Hallmark Rate (₹):</label>
            <input
              type="number"
              style={{ ...inputStyle, width: '80px' }}
              value={hallmarkingCharges}
              onChange={(e) => setHallmarkingCharges(parseFloat(e.target.value) || 0)}
              min="0"
              step="0.01"
            />
          </div>

          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            <label style={{ fontSize: '14px', fontWeight: 'bold' }}>Pieces:</label>
            <input
              type="number"
              style={{ ...inputStyle, width: '80px' }}
              value={hallmarkingPieces}
              onChange={(e) => setHallmarkingPieces(parseInt(e.target.value) || 0)}
              min="0"
              step="1"
            />
          </div>
          <div style={{ display: 'flex', alignSelf: "center", alignItems: 'right', gap: '8px' }}>
            <button
              style={{ ...buttonStyle, backgroundColor: '#ffc107', color: 'black', fontSize: '16px', padding: '12px 24px' }}
              onClick={async () => {
                // Validation checks
                if (!billHeader.customerName || !billHeader.customerPhone || !billHeader.customerAddress) {
                  alert('Please fill all mandatory customer details.');
                  return;
                }

                const customerExists = customers.some(customer => customer.gstin === billHeader.customerGstin);
                if (!customerExists && billHeader.customerGstin) {
                  const confirmCreate = window.confirm(
                    'The GSTIN provided does not exist in the database. Do you want to create a new customer?'
                  );
                  if (!confirmCreate) return;

                  try {
                    await addRecord('customer_details', {
                      name: billHeader.customerName,
                      phone: billHeader.customerPhone,
                      address: billHeader.customerAddress,
                      email: billHeader.customerEmail,
                      gstin: billHeader.customerGstin
                    });
                    alert('New customer created successfully.');
                  } catch (err) {
                    console.error('Error creating customer:', err);
                    alert('Failed to create new customer.');
                    return;
                  }
                }

                // Prepare bill data
                const billData = items.map(item => ({
                  entry_type: 'bill',
                  gstin: billHeader.customerGstin || null,
                  dated: billHeader.date,
                  bank: false, // Assuming bank is false by default
                  bill_no: billHeader.billNumber || 'N/A',
                  purity: item.purity || 'N/A',
                  wt: item.weight,
                  rate: item.rate,
                  cgst: ((item.amount * cgstRate) / 100).toFixed(2),
                  sgst: ((item.amount * sgstRate) / 100).toFixed(2),
                  igst: ((item.amount * igstRate) / 100).toFixed(2),
                  weight: item.weight,
                  cash_amount: item.amount.toFixed(2)
                }));

                try {
                  console.log(billData);
                  await insertUnifiedEntry(billData[0]);
                  alert('Bill submitted successfully.');
                } catch (err) {
                  console.error('Error submitting bill:', err);
                  alert('Failed to submit bill.');
                }
              }}
            >
              Submit Bill
            </button>
            <button
              style={{ ...buttonStyle, backgroundColor: '#007bff', color: 'white', fontSize: '16px', padding: '12px 24px' }}
              onClick={handlePrint}
            >
              Print Bill
            </button>
          </div>
        </div>
      </div>

      {/* Usage Instructions */}
      <div style={{
        marginTop: '20px',
        padding: '20px',
        backgroundColor: '#e3f2fd',
        borderRadius: '8px',
        border: '1px solid #2196f3'
      }}>
        <h3 style={{ margin: '0 0 15px 0', color: '#1976d2' }}>How to use:</h3>
        <ul style={{ margin: 0, paddingLeft: '20px', color: '#333', lineHeight: '1.6' }}>
          <li>Search for existing customers or enter new customer details manually</li>
          <li>Click on customer name in dropdown to auto-fill their information</li>
          <li>Click on any item cell to edit it directly</li>
          <li>Weight and Rate will auto-calculate Amount when changed</li>
          <li>Use Tab to move between fields, Enter to save</li>
          <li>Adjust tax rates and hallmarking charges as needed</li>
          <li>Print the final bill when ready</li>
        </ul>
      </div>
    </div >
  );
};

export default Receipt;


// ------------- END OF FILE -------------


// --- Convert number to words ---
const convertToWords = (num) => {
  const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
  const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];

  const convertHundreds = (n) => {
    let result = '';
    if (n > 99) {
      result += ones[Math.floor(n / 100)] + ' Hundred ';
      n %= 100;
    }
    if (n > 19) {
      result += tens[Math.floor(n / 10)] + ' ';
      n %= 10;
    }
    if (n > 0) {
      result += ones[n] + ' ';
    }
    return result;
  };

  if (num === 0) return 'Zero';

  const crore = Math.floor(num / 10000000);
  const lakh = Math.floor((num % 10000000) / 100000);
  const thousand = Math.floor((num % 100000) / 1000);
  const remainder = num % 1000;

  let result = '';
  if (crore > 0) result += convertHundreds(crore) + 'Crore ';
  if (lakh > 0) result += convertHundreds(lakh) + 'Lakh(s) ';
  if (thousand > 0) result += convertHundreds(thousand) + 'Thousand ';
  if (remainder > 0) result += convertHundreds(remainder);

  return 'Rupees ' + result.trim() + ' Only';
};
// const dummyCustomers = [
//   {
//     id: 1,
//     name: 'Rajesh Kumar',
//     phone: '+91 98765 43210',
//     address: '123 MG Road\nKanpur, UP 208001',
//     email: 'rajesh.kumar@email.com'
//   },
//   {
//     id: 2,
//     name: 'Priya Sharma',
//     phone: '+91 87654 32109',
//     address: '456 Civil Lines\nKanpur, UP 208002',
//     email: 'priya.sharma@email.com'
//   },
//   {
//     id: 3,
//     name: 'Amit Gupta',
//     phone: '+91 76543 21098',
//     address: '789 Swaroop Nagar\nKanpur, UP 208003',
//     email: 'amit.gupta@email.com'
//   },
//   {
//     id: 4,
//     name: 'Sunita Verma',
//     phone: '+91 65432 10987',
//     address: '321 Kalyanpur\nKanpur, UP 208004',
//     email: 'sunita.verma@email.com'
//   },
//   {
//     id: 5,
//     name: 'Vikram Singh',
//     phone: '+91 54321 09876',
//     address: '654 Govind Nagar\nKanpur, UP 208005',
//     email: 'vikram.singh@email.com'
//   }
// ];



// ------------- SCROLL UP TO SEE THE END OF FILE -------------
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/Receipt.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/BillGenerator.css ---
/* Container Styles */
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    font-family: 'Arial', sans-serif;
    background-color: #f8f9fa;
}

/* Section Header Styles */
.header-section {
    margin-bottom: 30px;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #ffffff;
}

.header-section h2 {
    margin: 0 0 20px 0;
    color: #333;
    font-size: 28px;
    /* Added for consistency, was previously inline */
    border-bottom: 2px solid #e9ecef;
    /* Added for consistency, was previously inline */
    padding-bottom: 15px;
    /* Added for consistency, was previously inline */
}

/* Form Grid Styles */
.form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 15px;
    margin-top: 15px;
}

/* Label and Input Styles */
.label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    font-size: 14px;
}

.input {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 14px;
    box-sizing: border-box;
    /* Ensures padding doesn't increase total width */
    transition: all 0.3s ease;
    /* Added for better UX */
}

.input:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    outline: none;
}

textarea.input {
    min-height: 60px;
    /* Added for consistency */
    resize: vertical;
    /* Added for consistency */
}

/* Customer Dropdown Styles (retained from previous comprehensive CSS) */
.customer-dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background-color: #fff;
    border: 1px solid #ced4da;
    border-radius: 6px;
    max-height: 200px;
    overflow-y: auto;
    z-index: 100;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.customer-option {
    padding: 12px 15px;
    cursor: pointer;
    border-bottom: 1px solid #e9ecef;
    transition: background-color 0.2s ease;
}

.customer-option:last-child {
    border-bottom: none;
}

.customer-option:hover {
    background-color: #f0f0f0;
}

.customer-option strong {
    color: #333;
}

.customer-option small {
    color: #777;
}

/* Bill Preview Section */
.bill-preview {
    border: 2px solid #333;
    padding: 40px;
    background-color: #ffffff;
    margin-bottom: 20px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    /* Retained for aesthetics */
    border-radius: 10px;
    /* Retained for aesthetics */
}

/* Bill Header Info (retain some inline for clarity if needed, or move to classes) */
.bill-preview h1 {
    font-size: 36px;
    margin: 0 0 10px 0;
    color: #333;
}

.bill-preview h2 {
    font-size: 24px;
    margin: 0 0 15px 0;
    color: #333;
}

.bill-preview .store-info p {
    margin: 5px 0;
    color: #666;
    line-height: 1.4;
}

.bill-info {
    display: flex;
    justify-content: space-between;
    margin-bottom: 30px;
    border-bottom: 1px solid #eee;
    /* Retained for clarity */
    padding-bottom: 15px;
    /* Retained for clarity */
}

.bill-info h3 {
    margin: 0 0 10px 0;
    font-weight: bold;
    color: #333;
}

.bill-info p {
    margin: 5px 0;
    font-size: 16px;
    color: #555;
}

.bill-info p strong {
    color: #333;
}

/* Items Table */
.table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 30px;
}

.table th {
    border: 1px solid #333;
    padding: 12px 8px;
    background-color: #f5f5f5;
    font-weight: bold;
    text-align: left;
    white-space: nowrap;
    /* Prevent wrapping for headers */
}

.table td {
    border: 1px solid #333;
    padding: 8px;
    vertical-align: middle;
}

.table tbody tr {
    transition: background-color 0.2s ease;
    /* Retained from previous comprehensive CSS */
}

.table tbody tr:hover {
    background-color: #f8f9fa;
    /* Retained from previous comprehensive CSS */
}

.table tbody tr.selected-row {
    background-color: #e3f2fd;
    /* Retained from previous comprehensive CSS */
}

.table td span {
    display: block;
    padding: 4px;
    cursor: pointer;
}

.table td input {
    width: calc(100% - 8px);
    /* Adjust for padding */
    padding: 8px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    box-sizing: border-box;
}

/* Buttons */
.button {
    padding: 8px 16px;
    margin: 0 4px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s ease, transform 0.1s ease;
}

.edit-button {
    background-color: #007bff;
    color: white;
}

.edit-button:hover {
    transform: translateY(-1px);
    background-color: #0056b3;
}

.save-button {
    background-color: #28a745;
    color: white;
}

.save-button:hover {
    transform: translateY(-1px);
    background-color: #218838;
}

.delete-button {
    background-color: #dc3545;
    color: white;
}

.delete-button:hover {
    transform: translateY(-1px);
    background-color: #c82333;
}

/* Controls Section */
.controls {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    align-items: center;
    justify-content: center;
    padding: 20px;
    background-color: #ffffff;
    border: 1px solid #ddd;
    border-radius: 8px;
}

.controls button {
    /* Generic button style within controls */
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    font-weight: bold;
    transition: background-color 0.2s ease, transform 0.1s ease;
    white-space: nowrap;
}

.controls button:hover {
    transform: translateY(-2px);
}

.add-item-button {
    /* Specific button style, like add item */
    background-color: #28a745;
    color: white;
}

.add-item-button:hover {
    background-color: #218838;
}

.print-bill-button {
    /* Specific button style, like print */
    background-color: #007bff;
    color: white;
}

.print-bill-button:hover {
    background-color: #0056b3;
}

.controls .input-group {
    /* Grouping for labels and inputs in controls */
    display: flex;
    align-items: center;
    gap: 8px;
}

.controls .input-group label {
    font-size: 14px;
    font-weight: bold;
    color: #555;
}

.controls .input-group input {
    width: 80px;
    padding: 10px;
    border: 1px solid #ced4da;
    border-radius: 6px;
    font-size: 15px;
    text-align: center;
}


/* Totals Section */
.totals-section {
    margin-left: auto;
    width: 350px;
    border: 1px solid #333;
    /* This border will apply to the div itself */
    margin-top: 30px;
    /* Added for spacing */
}

.totals-table {
    width: 100%;
    border-collapse: collapse;
}

.totals-table td {
    padding: 10px 12px;
    border: 1px solid #dee2e6;
    text-align: right;
    font-size: 15px;
}

.totals-table tr:first-child td {
    font-weight: bold;
    background-color: #f5f5f5;
}

.totals-table tr:nth-child(even) td {
    background-color: #fcfcfc;
}

.totals-table tr:last-child td {
    font-weight: bold;
    font-size: 18px;
    background-color: #e9ecef;
    border: 2px solid #333;
}

.totals-table small {
    font-size: 12px;
    color: #777;
}

/* Amount in Words */
.amount-in-words {
    margin-top: 30px;
    padding: 18px;
    background-color: #f9f9f9;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    color: #333;
}

.amount-in-words strong {
    color: #555;
    font-size: 15px;
}

.amount-in-words span {
    font-size: 17px;
    font-weight: bold;
    color: #333;
}

/* Thank you message */
.thank-you-message {
    text-align: center;
    margin-top: 40px;
    color: #666;
    font-size: 16px;
    padding-top: 15px;
    border-top: 1px dashed #ced4da;
}

/* Usage Instructions (from previous comprehensive CSS) */
.usage-instructions {
    margin-top: 30px;
    padding: 25px;
    background-color: #e3f2fd;
    border-radius: 10px;
    border: 1px solid #90caf9;
    color: #333;
    box-shadow: 0 2px 8px rgba(33, 150, 243, 0.1);
}

.usage-instructions h3 {
    margin: 0 0 15px 0;
    color: #1976d2;
    font-size: 22px;
}

.usage-instructions ul {
    margin: 0;
    padding-left: 25px;
    color: #444;
    line-height: 1.8;
    list-style-type: disc;
}

.usage-instructions li {
    margin-bottom: 8px;
}

/* Print Specific Styles */
@media print {
    body * {
        visibility: hidden;
    }

    .bill-preview,
    .bill-preview * {
        visibility: visible;
    }

    .bill-preview {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        margin: 0;
        padding: 0;
        box-shadow: none;
        border: none;
    }

    .print-hide {
        display: none !important;
    }

    .container {
        padding: 0;
        box-shadow: none;
    }

    .header-section,
    .controls,
    .usage-instructions {
        display: none;
    }

    .table th,
    .table td {
        padding: 8px 6px;
        /* Smaller padding for print */
        font-size: 13px;
        /* Smaller font for print */
    }

    .bill-preview h1 {
        font-size: 28px;
    }

    .bill-preview h2 {
        font-size: 20px;
    }

    .bill-info p {
        font-size: 13px;
    }

    .totals-table td {
        font-size: 13px;
        padding: 6px 8px;
    }

    .totals-table tr:last-child td {
        font-size: 16px;
    }

    .amount-in-words span {
        font-size: 14px;
    }
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/components/BillGenerator.css ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/api/index.jsx ---

import axios from 'axios';

const API_BASE = 'http://localhost:5003/api/queries';

// --- JOURNAL ENTRY INSERT (Only insert endpoint used for all types)
export const insertUnifiedEntry = (data) =>
    axios.post(`${API_BASE}/journal/entry`, data);

// Generic fetch for any table
export const fetchAll = (table, params = {}) =>
    axios.get(`${API_BASE}/${table}/all`, { params });

// Fetch by GSTIN
export const fetchByGSTIN = (table, gstin) =>
    axios.get(`${API_BASE}/${table}/customer/${gstin}`);


// Add a new record to a specified table
export const addRecord = (table, data) =>
    axios.post(`${API_BASE}/${table}/add`, data);





// // src/api/index.js
// import axios from 'axios';

// const API_BASE = 'http://localhost:5003'; // Your backend port

// // Generic Fetch All Records
// export const fetchAll = (table, params = {}) =>
//     axios.get(`${API_BASE}/${table}/all`, { params });

// // Get Records by GSTIN
// export const fetchByGSTIN = (table, gstin) =>
//     axios.get(`${API_BASE}/${table}/customer/${gstin}`);

// // Add a Record
// export const addRecord = (table, data) =>
//     axios.post(`${API_BASE}/${table}/add`, data);

// // Update a Record
// export const updateRecord = (table, id, data) =>
//     axios.put(`${API_BASE}/${table}/update/${id}`, data);

// // Delete a Record
// export const deleteRecord = (table, id) =>
//     axios.delete(`${API_BASE}/${table}/delete/${id}`);

// // Add Journal Entry (smart function that hits your unified_insert_journal_entry logic)
// export const addJournalEntry = (data) =>
//     axios.post(`${API_BASE}/journal/entry`, data);

// // Health Check
// export const healthCheck = () =>
//     axios.get(`${API_BASE}/health`);
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/api/index.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/AddEntry.jsx ---
import { useState } from 'react';
import axios from 'axios';

export default function AddEntry() {
    const [form, setForm] = useState({
        entry_type: 'gold',
        gstin: '',
        weight: '',
        purity: '',
        dated: '',
        bank: false
    });

    const handleChange = e => {
        const { name, value, type, checked } = e.target;
        setForm(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
    };

    const handleSubmit = async e => {
        e.preventDefault();
        try {
            const res = await axios.post('http://localhost:5003/journal/entry', form);
            alert('Entry added!');
        } catch (err) {
            alert('Error adding entry');
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <h2>Add Entry</h2>
            {Object.entries(form).map(([key, val]) => (
                <div key={key}>
                    <label>{key}:</label>
                    <input
                        type={typeof val === 'boolean' ? 'checkbox' : 'text'}
                        name={key}
                        checked={typeof val === 'boolean' ? val : undefined}
                        value={typeof val !== 'boolean' ? val : undefined}
                        onChange={handleChange}
                    />
                </div>
            ))}
            <button type="submit">Submit</button>
        </form>
    );
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/AddEntry.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/Dashboard.jsx ---
export default function Dashboard() {
    return <h2>Welcome to Gold Management Dashboard</h2>;
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/Dashboard.jsx ---


--- START OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/ViewRecords.jsx ---
import { useParams } from 'react-router-dom';
import { useEffect, useState } from 'react';
import axios from 'axios';
import DataTable from '../components/DataTable';

export default function ViewRecords() {
    const { table } = useParams();
    const [records, setRecords] = useState([]);

    useEffect(() => {
        axios.get(`http://localhost:5003/api/queries/${table}/all`)
            .then(res => setRecords(res.data || []))
            // .then(res => console.log(res.data))
            .catch(err => console.error(err));
    }, [table]);

    return (
        <div>
            <h2>Viewing Records: {table}</h2>
            <DataTable data={records} />
        </div>
    );
}
--- END OF FILE: /Users/ujjwalsingh/Development/MDKJ/MDKJAPP/gold-invoicing-app/frontend/src/pages/ViewRecords.jsx ---
